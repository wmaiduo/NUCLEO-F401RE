
1_GPIOInputOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000080c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009a0  080009a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009a0  080009a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080009a0  080009a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009a0  080009a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009a0  080009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009a4  080009a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080009a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080009b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080009b4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000240a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000938  00000000  00000000  00022446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  00022d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000278  00000000  00000000  00023058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b52  00000000  00000000  000232d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e00  00000000  00000000  00036e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007df95  00000000  00000000  00039c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7bb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a14  00000000  00000000  000b7c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000988 	.word	0x08000988

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000988 	.word	0x08000988

080001d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <HAL_Init+0x40>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <HAL_Init+0x40>)
 80001de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <HAL_Init+0x40>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0a      	ldr	r2, [pc, #40]	; (8000214 <HAL_Init+0x40>)
 80001ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <HAL_Init+0x40>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_Init+0x40>)
 80001f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001fc:	2003      	movs	r0, #3
 80001fe:	f000 f909 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000202:	200f      	movs	r0, #15
 8000204:	f000 f810 	bl	8000228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000208:	f000 f806 	bl	8000218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	40023c00 	.word	0x40023c00

08000218 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000230:	4b12      	ldr	r3, [pc, #72]	; (800027c <HAL_InitTick+0x54>)
 8000232:	681a      	ldr	r2, [r3, #0]
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <HAL_InitTick+0x58>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	4619      	mov	r1, r3
 800023a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800023e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000242:	fbb2 f3f3 	udiv	r3, r2, r3
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f90b 	bl	8000462 <HAL_SYSTICK_Config>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	e00e      	b.n	8000274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	d80a      	bhi.n	8000272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800025c:	2200      	movs	r2, #0
 800025e:	6879      	ldr	r1, [r7, #4]
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f000 f8e1 	bl	800042a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_InitTick+0x5c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800026e:	2300      	movs	r3, #0
 8000270:	e000      	b.n	8000274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
}
 8000274:	4618      	mov	r0, r3
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	20000008 	.word	0x20000008
 8000280:	20000004 	.word	0x20000004
 8000284:	20000000 	.word	0x20000000

08000288 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_IncTick+0x20>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <HAL_IncTick+0x24>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4413      	add	r3, r2
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <HAL_IncTick+0x24>)
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000028 	.word	0x20000028

080002b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <__NVIC_SetPriorityGrouping+0x44>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	60d3      	str	r3, [r2, #12]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <__NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f003 0307 	and.w	r3, r3, #7
 800037a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	69fb      	ldr	r3, [r7, #28]
 800037e:	f1c3 0307 	rsb	r3, r3, #7
 8000382:	2b04      	cmp	r3, #4
 8000384:	bf28      	it	cs
 8000386:	2304      	movcs	r3, #4
 8000388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800038a:	69fb      	ldr	r3, [r7, #28]
 800038c:	3304      	adds	r3, #4
 800038e:	2b06      	cmp	r3, #6
 8000390:	d902      	bls.n	8000398 <NVIC_EncodePriority+0x30>
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3b03      	subs	r3, #3
 8000396:	e000      	b.n	800039a <NVIC_EncodePriority+0x32>
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	f04f 32ff 	mov.w	r2, #4294967295
 80003a0:	69bb      	ldr	r3, [r7, #24]
 80003a2:	fa02 f303 	lsl.w	r3, r2, r3
 80003a6:	43da      	mvns	r2, r3
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	401a      	ands	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b0:	f04f 31ff 	mov.w	r1, #4294967295
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ba:	43d9      	mvns	r1, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c0:	4313      	orrs	r3, r2
         );
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3724      	adds	r7, #36	; 0x24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003e0:	d301      	bcc.n	80003e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003e2:	2301      	movs	r3, #1
 80003e4:	e00f      	b.n	8000406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e6:	4a0a      	ldr	r2, [pc, #40]	; (8000410 <SysTick_Config+0x40>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	3b01      	subs	r3, #1
 80003ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ee:	210f      	movs	r1, #15
 80003f0:	f04f 30ff 	mov.w	r0, #4294967295
 80003f4:	f7ff ff8e 	bl	8000314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <SysTick_Config+0x40>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fe:	4b04      	ldr	r3, [pc, #16]	; (8000410 <SysTick_Config+0x40>)
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010

08000414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f7ff ff47 	bl	80002b0 <__NVIC_SetPriorityGrouping>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800042a:	b580      	push	{r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af00      	add	r7, sp, #0
 8000430:	4603      	mov	r3, r0
 8000432:	60b9      	str	r1, [r7, #8]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000438:	2300      	movs	r3, #0
 800043a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800043c:	f7ff ff5c 	bl	80002f8 <__NVIC_GetPriorityGrouping>
 8000440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	6978      	ldr	r0, [r7, #20]
 8000448:	f7ff ff8e 	bl	8000368 <NVIC_EncodePriority>
 800044c:	4602      	mov	r2, r0
 800044e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000452:	4611      	mov	r1, r2
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <__NVIC_SetPriority>
}
 800045a:	bf00      	nop
 800045c:	3718      	adds	r7, #24
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800046a:	6878      	ldr	r0, [r7, #4]
 800046c:	f7ff ffb0 	bl	80003d0 <SysTick_Config>
 8000470:	4603      	mov	r3, r0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800048e:	2300      	movs	r3, #0
 8000490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
 8000496:	e159      	b.n	800074c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000498:	2201      	movs	r2, #1
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	697a      	ldr	r2, [r7, #20]
 80004a8:	4013      	ands	r3, r2
 80004aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	f040 8148 	bne.w	8000746 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d005      	beq.n	80004ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d130      	bne.n	8000530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	689b      	ldr	r3, [r3, #8]
 80004d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	2203      	movs	r2, #3
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	43db      	mvns	r3, r3
 80004e0:	69ba      	ldr	r2, [r7, #24]
 80004e2:	4013      	ands	r3, r2
 80004e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	68da      	ldr	r2, [r3, #12]
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	69ba      	ldr	r2, [r7, #24]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	69ba      	ldr	r2, [r7, #24]
 80004fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	685b      	ldr	r3, [r3, #4]
 8000502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000504:	2201      	movs	r2, #1
 8000506:	69fb      	ldr	r3, [r7, #28]
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	69ba      	ldr	r2, [r7, #24]
 8000510:	4013      	ands	r3, r2
 8000512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	091b      	lsrs	r3, r3, #4
 800051a:	f003 0201 	and.w	r2, r3, #1
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	69ba      	ldr	r2, [r7, #24]
 8000526:	4313      	orrs	r3, r2
 8000528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	69ba      	ldr	r2, [r7, #24]
 800052e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	f003 0303 	and.w	r3, r3, #3
 8000538:	2b03      	cmp	r3, #3
 800053a:	d017      	beq.n	800056c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	69ba      	ldr	r2, [r7, #24]
 8000550:	4013      	ands	r3, r2
 8000552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	69ba      	ldr	r2, [r7, #24]
 8000562:	4313      	orrs	r3, r2
 8000564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	69ba      	ldr	r2, [r7, #24]
 800056a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f003 0303 	and.w	r3, r3, #3
 8000574:	2b02      	cmp	r3, #2
 8000576:	d123      	bne.n	80005c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	08da      	lsrs	r2, r3, #3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3208      	adds	r2, #8
 8000580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	f003 0307 	and.w	r3, r3, #7
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	220f      	movs	r2, #15
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	69ba      	ldr	r2, [r7, #24]
 8000598:	4013      	ands	r3, r2
 800059a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	691a      	ldr	r2, [r3, #16]
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	69ba      	ldr	r2, [r7, #24]
 80005ae:	4313      	orrs	r3, r2
 80005b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	08da      	lsrs	r2, r3, #3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3208      	adds	r2, #8
 80005ba:	69b9      	ldr	r1, [r7, #24]
 80005bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	2203      	movs	r2, #3
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	43db      	mvns	r3, r3
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	4013      	ands	r3, r2
 80005d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	f003 0203 	and.w	r2, r3, #3
 80005e0:	69fb      	ldr	r3, [r7, #28]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f000 80a2 	beq.w	8000746 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	4b57      	ldr	r3, [pc, #348]	; (8000764 <HAL_GPIO_Init+0x2e8>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	4a56      	ldr	r2, [pc, #344]	; (8000764 <HAL_GPIO_Init+0x2e8>)
 800060c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000610:	6453      	str	r3, [r2, #68]	; 0x44
 8000612:	4b54      	ldr	r3, [pc, #336]	; (8000764 <HAL_GPIO_Init+0x2e8>)
 8000614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800061e:	4a52      	ldr	r2, [pc, #328]	; (8000768 <HAL_GPIO_Init+0x2ec>)
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	3302      	adds	r3, #2
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	f003 0303 	and.w	r3, r3, #3
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	220f      	movs	r2, #15
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	4013      	ands	r3, r2
 8000640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a49      	ldr	r2, [pc, #292]	; (800076c <HAL_GPIO_Init+0x2f0>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d019      	beq.n	800067e <HAL_GPIO_Init+0x202>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a48      	ldr	r2, [pc, #288]	; (8000770 <HAL_GPIO_Init+0x2f4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d013      	beq.n	800067a <HAL_GPIO_Init+0x1fe>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4a47      	ldr	r2, [pc, #284]	; (8000774 <HAL_GPIO_Init+0x2f8>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d00d      	beq.n	8000676 <HAL_GPIO_Init+0x1fa>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a46      	ldr	r2, [pc, #280]	; (8000778 <HAL_GPIO_Init+0x2fc>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d007      	beq.n	8000672 <HAL_GPIO_Init+0x1f6>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4a45      	ldr	r2, [pc, #276]	; (800077c <HAL_GPIO_Init+0x300>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d101      	bne.n	800066e <HAL_GPIO_Init+0x1f2>
 800066a:	2304      	movs	r3, #4
 800066c:	e008      	b.n	8000680 <HAL_GPIO_Init+0x204>
 800066e:	2307      	movs	r3, #7
 8000670:	e006      	b.n	8000680 <HAL_GPIO_Init+0x204>
 8000672:	2303      	movs	r3, #3
 8000674:	e004      	b.n	8000680 <HAL_GPIO_Init+0x204>
 8000676:	2302      	movs	r3, #2
 8000678:	e002      	b.n	8000680 <HAL_GPIO_Init+0x204>
 800067a:	2301      	movs	r3, #1
 800067c:	e000      	b.n	8000680 <HAL_GPIO_Init+0x204>
 800067e:	2300      	movs	r3, #0
 8000680:	69fa      	ldr	r2, [r7, #28]
 8000682:	f002 0203 	and.w	r2, r2, #3
 8000686:	0092      	lsls	r2, r2, #2
 8000688:	4093      	lsls	r3, r2
 800068a:	69ba      	ldr	r2, [r7, #24]
 800068c:	4313      	orrs	r3, r2
 800068e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000690:	4935      	ldr	r1, [pc, #212]	; (8000768 <HAL_GPIO_Init+0x2ec>)
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	089b      	lsrs	r3, r3, #2
 8000696:	3302      	adds	r3, #2
 8000698:	69ba      	ldr	r2, [r7, #24]
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800069e:	4b38      	ldr	r3, [pc, #224]	; (8000780 <HAL_GPIO_Init+0x304>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	4013      	ands	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d003      	beq.n	80006c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80006ba:	69ba      	ldr	r2, [r7, #24]
 80006bc:	693b      	ldr	r3, [r7, #16]
 80006be:	4313      	orrs	r3, r2
 80006c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80006c2:	4a2f      	ldr	r2, [pc, #188]	; (8000780 <HAL_GPIO_Init+0x304>)
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006c8:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <HAL_GPIO_Init+0x304>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	43db      	mvns	r3, r3
 80006d2:	69ba      	ldr	r2, [r7, #24]
 80006d4:	4013      	ands	r3, r2
 80006d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80006ec:	4a24      	ldr	r2, [pc, #144]	; (8000780 <HAL_GPIO_Init+0x304>)
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <HAL_GPIO_Init+0x304>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	43db      	mvns	r3, r3
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	4013      	ands	r3, r2
 8000700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	4313      	orrs	r3, r2
 8000714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000716:	4a1a      	ldr	r2, [pc, #104]	; (8000780 <HAL_GPIO_Init+0x304>)
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_GPIO_Init+0x304>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	43db      	mvns	r3, r3
 8000726:	69ba      	ldr	r2, [r7, #24]
 8000728:	4013      	ands	r3, r2
 800072a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000734:	2b00      	cmp	r3, #0
 8000736:	d003      	beq.n	8000740 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	4313      	orrs	r3, r2
 800073e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <HAL_GPIO_Init+0x304>)
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3301      	adds	r3, #1
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	2b0f      	cmp	r3, #15
 8000750:	f67f aea2 	bls.w	8000498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40013800 	.word	0x40013800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020400 	.word	0x40020400
 8000774:	40020800 	.word	0x40020800
 8000778:	40020c00 	.word	0x40020c00
 800077c:	40021000 	.word	0x40021000
 8000780:	40013c00 	.word	0x40013c00

08000784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	4013      	ands	r3, r2
 8000798:	2b00      	cmp	r3, #0
 800079a:	d002      	beq.n	80007a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800079c:	2301      	movs	r3, #1
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	e001      	b.n	80007a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
 80007c0:	4613      	mov	r3, r2
 80007c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007c4:	787b      	ldrb	r3, [r7, #1]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007ca:	887a      	ldrh	r2, [r7, #2]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80007d0:	e003      	b.n	80007da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	041a      	lsls	r2, r3, #16
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	619a      	str	r2, [r3, #24]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <main>:
void pc13_btn_init(void);
void pa5_led_init(void);

uint8_t buttonStatus;

int main() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_Init();
 80007ec:	f7ff fcf2 	bl	80001d4 <HAL_Init>
	pc13_btn_init();
 80007f0:	f000 f81a 	bl	8000828 <pc13_btn_init>
	pa5_led_init();
 80007f4:	f000 f846 	bl	8000884 <pa5_led_init>

	while (1) {
		buttonStatus = HAL_GPIO_ReadPin (BTN_PORT, BTN_PIN);
 80007f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <main+0x34>)
 80007fe:	f7ff ffc1 	bl	8000784 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <main+0x38>)
 8000808:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin (LED_PORT, LED_PIN, buttonStatus);
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <main+0x38>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	2120      	movs	r1, #32
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <main+0x3c>)
 8000814:	f7ff ffce 	bl	80007b4 <HAL_GPIO_WritePin>
		buttonStatus = HAL_GPIO_ReadPin (BTN_PORT, BTN_PIN);
 8000818:	e7ee      	b.n	80007f8 <main+0x10>
 800081a:	bf00      	nop
 800081c:	40020800 	.word	0x40020800
 8000820:	2000002c 	.word	0x2000002c
 8000824:	40020000 	.word	0x40020000

08000828 <pc13_btn_init>:
	}
}

void pc13_btn_init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af00      	add	r7, sp, #0
	//1. Configure PA5 as output

	//enable clock
	GPIO_InitTypeDef 	GPIO_InitStruct = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <pc13_btn_init+0x54>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <pc13_btn_init+0x54>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <pc13_btn_init+0x54>)
 800084e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <pc13_btn_init+0x58>)
 8000870:	f7ff fe04 	bl	800047c <HAL_GPIO_Init>
}
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000

08000884 <pa5_led_init>:

void pa5_led_init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
	//2. Configure PC13 AS input pin

	//enable clock for PC13
	GPIO_InitTypeDef 	GPIO_InitStruct = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <pa5_led_init+0x54>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4a0d      	ldr	r2, [pc, #52]	; (80008d8 <pa5_led_init+0x54>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6313      	str	r3, [r2, #48]	; 0x30
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <pa5_led_init+0x54>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
	GPIO_InitStruct.Pin = BTN_PIN;
 80008b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <pa5_led_init+0x58>)
 80008cc:	f7ff fdd6 	bl	800047c <HAL_GPIO_Init>
}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020800 	.word	0x40020800

080008e0 <SysTick_Handler>:

void SysTick_Handler(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80008e4:	f7ff fcd0 	bl	8000288 <HAL_IncTick>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800091a:	f000 f811 	bl	8000940 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800091e:	f7ff ff63 	bl	80007e8 <main>

08000922 <LoopForever>:

LoopForever:
  b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   r0, =_estack
 8000924:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000930:	080009a8 	.word	0x080009a8
  ldr r2, =_sbss
 8000934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000938:	20000030 	.word	0x20000030

0800093c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <__libc_init_array>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	4d0d      	ldr	r5, [pc, #52]	; (8000978 <__libc_init_array+0x38>)
 8000944:	4c0d      	ldr	r4, [pc, #52]	; (800097c <__libc_init_array+0x3c>)
 8000946:	1b64      	subs	r4, r4, r5
 8000948:	10a4      	asrs	r4, r4, #2
 800094a:	2600      	movs	r6, #0
 800094c:	42a6      	cmp	r6, r4
 800094e:	d109      	bne.n	8000964 <__libc_init_array+0x24>
 8000950:	4d0b      	ldr	r5, [pc, #44]	; (8000980 <__libc_init_array+0x40>)
 8000952:	4c0c      	ldr	r4, [pc, #48]	; (8000984 <__libc_init_array+0x44>)
 8000954:	f000 f818 	bl	8000988 <_init>
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	10a4      	asrs	r4, r4, #2
 800095c:	2600      	movs	r6, #0
 800095e:	42a6      	cmp	r6, r4
 8000960:	d105      	bne.n	800096e <__libc_init_array+0x2e>
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f855 3b04 	ldr.w	r3, [r5], #4
 8000968:	4798      	blx	r3
 800096a:	3601      	adds	r6, #1
 800096c:	e7ee      	b.n	800094c <__libc_init_array+0xc>
 800096e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000972:	4798      	blx	r3
 8000974:	3601      	adds	r6, #1
 8000976:	e7f2      	b.n	800095e <__libc_init_array+0x1e>
 8000978:	080009a0 	.word	0x080009a0
 800097c:	080009a0 	.word	0x080009a0
 8000980:	080009a0 	.word	0x080009a0
 8000984:	080009a4 	.word	0x080009a4

08000988 <_init>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	bf00      	nop
 800098c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800098e:	bc08      	pop	{r3}
 8000990:	469e      	mov	lr, r3
 8000992:	4770      	bx	lr

08000994 <_fini>:
 8000994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000996:	bf00      	nop
 8000998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099a:	bc08      	pop	{r3}
 800099c:	469e      	mov	lr, r3
 800099e:	4770      	bx	lr
