
1_GPIOInputOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002810  08002810  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002888  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002888  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008322  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016dd  00000000  00000000  000283c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00029aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000668  00000000  00000000  0002a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166de  00000000  00000000  0002a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009296  00000000  00000000  00040ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861af  00000000  00000000  0004a18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d033b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d8  00000000  00000000  000d038c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002740 	.word	0x08002740

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002740 	.word	0x08002740

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_GPIO_EXTI_Callback>:

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){

	};
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BTN_PIN);
 800059e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005a2:	f000 fcff 	bl	8000fa4 <HAL_GPIO_EXTI_IRQHandler>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <uart_init>:
#include <stdint.h>
#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

void uart_init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b25      	ldr	r3, [pc, #148]	; (800065c <uart_init+0xb0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a24      	ldr	r2, [pc, #144]	; (800065c <uart_init+0xb0>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <uart_init+0xb0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b1e      	ldr	r3, [pc, #120]	; (800065c <uart_init+0xb0>)
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	4a1d      	ldr	r2, [pc, #116]	; (800065c <uart_init+0xb0>)
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	6413      	str	r3, [r2, #64]	; 0x40
 80005ee:	4b1b      	ldr	r3, [pc, #108]	; (800065c <uart_init+0xb0>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80005fa:	230c      	movs	r3, #12
 80005fc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000602:	2307      	movs	r3, #7
 8000604:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <uart_init+0xb4>)
 8000616:	f000 fb41 	bl	8000c9c <HAL_GPIO_Init>

	huart2.Instance = USART2;
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <uart_init+0xb8>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <uart_init+0xbc>)
 800061e:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <uart_init+0xb8>)
 8000622:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000626:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <uart_init+0xb8>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <uart_init+0xb8>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <uart_init+0xb8>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <uart_init+0xb8>)
 800063c:	220c      	movs	r2, #12
 800063e:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <uart_init+0xb8>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <uart_init+0xb8>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <uart_init+0xb8>)
 800064e:	f000 fcf5 	bl	800103c <HAL_UART_Init>
}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000
 8000664:	2000008c 	.word	0x2000008c
 8000668:	40004400 	.word	0x40004400

0800066c <uart_putchar>:

int uart_putchar(int ch) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000674:	1d39      	adds	r1, r7, #4
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	2201      	movs	r2, #1
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <uart_putchar+0x20>)
 800067e:	f000 fd2a 	bl	80010d6 <HAL_UART_Transmit>
    return ch;
 8000682:	687b      	ldr	r3, [r7, #4]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000008c 	.word	0x2000008c

08000690 <_write>:

int _write(int file, char* ptr, int len) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
 80006a0:	e009      	b.n	80006b6 <_write+0x26>
        uart_putchar(*ptr++);
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	60ba      	str	r2, [r7, #8]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffde 	bl	800066c <uart_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	3301      	adds	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	dbf1      	blt.n	80006a2 <_write+0x12>
    }

    return len;
 80006be:	687b      	ldr	r3, [r7, #4]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <main>:
#include <stdio.h>
#include <stdint.h>
#include "stm32f4xx_hal.h"
#include "../Peripherals/Inc/uart.h"

int main(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

	HAL_Init();
 80006cc:	f000 f96a 	bl	80009a4 <HAL_Init>
	uart_init();
 80006d0:	f7ff ff6c 	bl	80005ac <uart_init>

    while (1)
    {
//    	HAL_UART_Transmit(&huart2, (uint8_t *) message, 20, 100);
    	printf("Printing ! \n\r");
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <main+0x1c>)
 80006d6:	f001 f8a5 	bl	8001824 <iprintf>
    	HAL_Delay(10);
 80006da:	200a      	movs	r0, #10
 80006dc:	f000 f9d4 	bl	8000a88 <HAL_Delay>
    	printf("Printing ! \n\r");
 80006e0:	e7f8      	b.n	80006d4 <main+0xc>
 80006e2:	bf00      	nop
 80006e4:	08002758 	.word	0x08002758

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	4a0f      	ldr	r2, [pc, #60]	; (8000734 <HAL_MspInit+0x4c>)
 80006f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fc:	6453      	str	r3, [r2, #68]	; 0x44
 80006fe:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_MspInit+0x4c>)
 8000714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000726:	2007      	movs	r0, #7
 8000728:	f000 fa84 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800

08000738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08a      	sub	sp, #40	; 0x28
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a19      	ldr	r2, [pc, #100]	; (80007bc <HAL_UART_MspInit+0x84>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d12b      	bne.n	80007b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0x88>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_UART_MspInit+0x88>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	6413      	str	r3, [r2, #64]	; 0x40
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_UART_MspInit+0x88>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_UART_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <HAL_UART_MspInit+0x88>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <HAL_UART_MspInit+0x88>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000792:	230c      	movs	r3, #12
 8000794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a2:	2307      	movs	r3, #7
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4805      	ldr	r0, [pc, #20]	; (80007c4 <HAL_UART_MspInit+0x8c>)
 80007ae:	f000 fa75 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40004400 	.word	0x40004400
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020000 	.word	0x40020000

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f918 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	e00a      	b.n	8000844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800082e:	f3af 8000 	nop.w
 8000832:	4601      	mov	r1, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	b2ca      	uxtb	r2, r1
 800083c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697a      	ldr	r2, [r7, #20]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	429a      	cmp	r2, r3
 800084a:	dbf0      	blt.n	800082e <_read+0x12>
  }

  return len;
 800084c:	687b      	ldr	r3, [r7, #4]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800087e:	605a      	str	r2, [r3, #4]
  return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <_isatty>:

int _isatty(int file)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008c8:	4a14      	ldr	r2, [pc, #80]	; (800091c <_sbrk+0x5c>)
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <_sbrk+0x60>)
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d102      	bne.n	80008e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <_sbrk+0x64>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <_sbrk+0x68>)
 80008e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d207      	bcs.n	8000900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f0:	f000 ff66 	bl	80017c0 <__errno>
 80008f4:	4603      	mov	r3, r0
 80008f6:	220c      	movs	r2, #12
 80008f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	e009      	b.n	8000914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a05      	ldr	r2, [pc, #20]	; (8000924 <_sbrk+0x64>)
 8000910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20018000 	.word	0x20018000
 8000920:	00000400 	.word	0x00000400
 8000924:	200000d0 	.word	0x200000d0
 8000928:	200000e8 	.word	0x200000e8

0800092c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <SystemInit+0x20>)
 8000932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <SystemInit+0x20>)
 8000938:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800093c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000950:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000988 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000956:	490e      	ldr	r1, [pc, #56]	; (8000990 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800096c:	4c0b      	ldr	r4, [pc, #44]	; (800099c <LoopFillZerobss+0x26>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800097a:	f7ff ffd7 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097e:	f000 ff25 	bl	80017cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000982:	f7ff fea1 	bl	80006c8 <main>
  bx  lr    
 8000986:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000988:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000994:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 8000998:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800099c:	200000e8 	.word	0x200000e8

080009a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC_IRQHandler>
	...

080009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <HAL_Init+0x40>)
 80009ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0a      	ldr	r2, [pc, #40]	; (80009e4 <HAL_Init+0x40>)
 80009ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <HAL_Init+0x40>)
 80009c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 f931 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f808 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d8:	f7ff fe86 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023c00 	.word	0x40023c00

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x54>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <HAL_InitTick+0x58>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4619      	mov	r1, r3
 80009fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f93b 	bl	8000c82 <HAL_SYSTICK_Config>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00e      	b.n	8000a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b0f      	cmp	r3, #15
 8000a1a:	d80a      	bhi.n	8000a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f000 f911 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4a06      	ldr	r2, [pc, #24]	; (8000a44 <HAL_InitTick+0x5c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_IncTick+0x24>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4413      	add	r3, r2
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_IncTick+0x24>)
 8000a5a:	6013      	str	r3, [r2, #0]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	200000d4 	.word	0x200000d4

08000a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return uwTick;
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <HAL_GetTick+0x14>)
 8000a76:	681b      	ldr	r3, [r3, #0]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	200000d4 	.word	0x200000d4

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff ffee 	bl	8000a70 <HAL_GetTick>
 8000a94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	bf00      	nop
 8000ab0:	f7ff ffde 	bl	8000a70 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000008 	.word	0x20000008

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff47 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff5c 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffb0 	bl	8000bf0 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e159      	b.n	8000f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8148 	bne.w	8000f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a2 	beq.w	8000f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a56      	ldr	r2, [pc, #344]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <HAL_GPIO_Init+0x2f0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x202>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_GPIO_Init+0x2f4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1fe>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a47      	ldr	r2, [pc, #284]	; (8000f94 <HAL_GPIO_Init+0x2f8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1f6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1f2>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	f67f aea2 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fade 	bl	8000584 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40013c00 	.word	0x40013c00

08000fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000fda:	681b      	ldr	r3, [r3, #0]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ff0:	f7ff fff0 	bl	8000fd4 <HAL_RCC_GetHCLKFreq>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	0a9b      	lsrs	r3, r3, #10
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	4903      	ldr	r1, [pc, #12]	; (8001010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001002:	5ccb      	ldrb	r3, [r1, r3]
 8001004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001008:	4618      	mov	r0, r3
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	08002768 	.word	0x08002768

08001014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001018:	f7ff ffdc 	bl	8000fd4 <HAL_RCC_GetHCLKFreq>
 800101c:	4602      	mov	r2, r0
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	0b5b      	lsrs	r3, r3, #13
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	4903      	ldr	r1, [pc, #12]	; (8001038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800102a:	5ccb      	ldrb	r3, [r1, r3]
 800102c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	08002768 	.word	0x08002768

0800103c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e03f      	b.n	80010ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fb68 	bl	8000738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2224      	movs	r2, #36	; 0x24
 800106c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800107e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 f929 	bl	80012d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	695a      	ldr	r2, [r3, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2220      	movs	r2, #32
 80010c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b08a      	sub	sp, #40	; 0x28
 80010da:	af02      	add	r7, sp, #8
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b20      	cmp	r3, #32
 80010f4:	d17c      	bne.n	80011f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_UART_Transmit+0x2c>
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e075      	b.n	80011f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_UART_Transmit+0x3e>
 8001110:	2302      	movs	r3, #2
 8001112:	e06e      	b.n	80011f2 <HAL_UART_Transmit+0x11c>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2221      	movs	r2, #33	; 0x21
 8001126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800112a:	f7ff fca1 	bl	8000a70 <HAL_GetTick>
 800112e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	88fa      	ldrh	r2, [r7, #6]
 8001134:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	88fa      	ldrh	r2, [r7, #6]
 800113a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001144:	d108      	bne.n	8001158 <HAL_UART_Transmit+0x82>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d104      	bne.n	8001158 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	e003      	b.n	8001160 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001168:	e02a      	b.n	80011c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2200      	movs	r2, #0
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f840 	bl	80011fa <UART_WaitOnFlagUntilTimeout>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e036      	b.n	80011f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10b      	bne.n	80011a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	881b      	ldrh	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001198:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	3302      	adds	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	e007      	b.n	80011b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	781a      	ldrb	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3301      	adds	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3b01      	subs	r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1cf      	bne.n	800116a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2200      	movs	r2, #0
 80011d2:	2140      	movs	r1, #64	; 0x40
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f810 	bl	80011fa <UART_WaitOnFlagUntilTimeout>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e006      	b.n	80011f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2220      	movs	r2, #32
 80011e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e000      	b.n	80011f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80011f0:	2302      	movs	r3, #2
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b090      	sub	sp, #64	; 0x40
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4613      	mov	r3, r2
 8001208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800120a:	e050      	b.n	80012ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800120c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800120e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001212:	d04c      	beq.n	80012ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <UART_WaitOnFlagUntilTimeout+0x30>
 800121a:	f7ff fc29 	bl	8000a70 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001226:	429a      	cmp	r2, r3
 8001228:	d241      	bcs.n	80012ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	330c      	adds	r3, #12
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	e853 3f00 	ldrex	r3, [r3]
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	330c      	adds	r3, #12
 8001248:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124a:	637a      	str	r2, [r7, #52]	; 0x34
 800124c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800124e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001252:	e841 2300 	strex	r3, r2, [r1]
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1e5      	bne.n	800122a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3314      	adds	r3, #20
 8001264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	e853 3f00 	ldrex	r3, [r3]
 800126c:	613b      	str	r3, [r7, #16]
   return(result);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	63bb      	str	r3, [r7, #56]	; 0x38
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3314      	adds	r3, #20
 800127c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800127e:	623a      	str	r2, [r7, #32]
 8001280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001282:	69f9      	ldr	r1, [r7, #28]
 8001284:	6a3a      	ldr	r2, [r7, #32]
 8001286:	e841 2300 	strex	r3, r2, [r1]
 800128a:	61bb      	str	r3, [r7, #24]
   return(result);
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1e5      	bne.n	800125e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2220      	movs	r2, #32
 8001296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2220      	movs	r2, #32
 800129e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e00f      	b.n	80012ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4013      	ands	r3, r2
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	bf0c      	ite	eq
 80012be:	2301      	moveq	r3, #1
 80012c0:	2300      	movne	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d09f      	beq.n	800120c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3740      	adds	r7, #64	; 0x40
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012dc:	b0c0      	sub	sp, #256	; 0x100
 80012de:	af00      	add	r7, sp, #0
 80012e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80012f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	ea40 0301 	orr.w	r3, r0, r1
 8001300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	431a      	orrs	r2, r3
 8001310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	431a      	orrs	r2, r3
 8001318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4313      	orrs	r3, r2
 8001320:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001330:	f021 010c 	bic.w	r1, r1, #12
 8001334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800133e:	430b      	orrs	r3, r1
 8001340:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800134e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001352:	6999      	ldr	r1, [r3, #24]
 8001354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	ea40 0301 	orr.w	r3, r0, r1
 800135e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <UART_SetConfig+0x2cc>)
 8001368:	429a      	cmp	r2, r3
 800136a:	d005      	beq.n	8001378 <UART_SetConfig+0xa0>
 800136c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b8d      	ldr	r3, [pc, #564]	; (80015a8 <UART_SetConfig+0x2d0>)
 8001374:	429a      	cmp	r2, r3
 8001376:	d104      	bne.n	8001382 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001378:	f7ff fe4c 	bl	8001014 <HAL_RCC_GetPCLK2Freq>
 800137c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001380:	e003      	b.n	800138a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001382:	f7ff fe33 	bl	8000fec <HAL_RCC_GetPCLK1Freq>
 8001386:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800138a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001394:	f040 810c 	bne.w	80015b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800139c:	2200      	movs	r2, #0
 800139e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80013a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80013a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80013aa:	4622      	mov	r2, r4
 80013ac:	462b      	mov	r3, r5
 80013ae:	1891      	adds	r1, r2, r2
 80013b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80013b2:	415b      	adcs	r3, r3
 80013b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80013ba:	4621      	mov	r1, r4
 80013bc:	eb12 0801 	adds.w	r8, r2, r1
 80013c0:	4629      	mov	r1, r5
 80013c2:	eb43 0901 	adc.w	r9, r3, r1
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013da:	4690      	mov	r8, r2
 80013dc:	4699      	mov	r9, r3
 80013de:	4623      	mov	r3, r4
 80013e0:	eb18 0303 	adds.w	r3, r8, r3
 80013e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80013e8:	462b      	mov	r3, r5
 80013ea:	eb49 0303 	adc.w	r3, r9, r3
 80013ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80013f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80013fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001402:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001406:	460b      	mov	r3, r1
 8001408:	18db      	adds	r3, r3, r3
 800140a:	653b      	str	r3, [r7, #80]	; 0x50
 800140c:	4613      	mov	r3, r2
 800140e:	eb42 0303 	adc.w	r3, r2, r3
 8001412:	657b      	str	r3, [r7, #84]	; 0x54
 8001414:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001418:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800141c:	f7fe ff30 	bl	8000280 <__aeabi_uldivmod>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4b61      	ldr	r3, [pc, #388]	; (80015ac <UART_SetConfig+0x2d4>)
 8001426:	fba3 2302 	umull	r2, r3, r3, r2
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	011c      	lsls	r4, r3, #4
 800142e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001432:	2200      	movs	r2, #0
 8001434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001438:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800143c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001440:	4642      	mov	r2, r8
 8001442:	464b      	mov	r3, r9
 8001444:	1891      	adds	r1, r2, r2
 8001446:	64b9      	str	r1, [r7, #72]	; 0x48
 8001448:	415b      	adcs	r3, r3
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800144c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001450:	4641      	mov	r1, r8
 8001452:	eb12 0a01 	adds.w	sl, r2, r1
 8001456:	4649      	mov	r1, r9
 8001458:	eb43 0b01 	adc.w	fp, r3, r1
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001468:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800146c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001470:	4692      	mov	sl, r2
 8001472:	469b      	mov	fp, r3
 8001474:	4643      	mov	r3, r8
 8001476:	eb1a 0303 	adds.w	r3, sl, r3
 800147a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800147e:	464b      	mov	r3, r9
 8001480:	eb4b 0303 	adc.w	r3, fp, r3
 8001484:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001494:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001498:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800149c:	460b      	mov	r3, r1
 800149e:	18db      	adds	r3, r3, r3
 80014a0:	643b      	str	r3, [r7, #64]	; 0x40
 80014a2:	4613      	mov	r3, r2
 80014a4:	eb42 0303 	adc.w	r3, r2, r3
 80014a8:	647b      	str	r3, [r7, #68]	; 0x44
 80014aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80014ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80014b2:	f7fe fee5 	bl	8000280 <__aeabi_uldivmod>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <UART_SetConfig+0x2d4>)
 80014be:	fba3 2301 	umull	r2, r3, r3, r1
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2264      	movs	r2, #100	; 0x64
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	1acb      	subs	r3, r1, r3
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <UART_SetConfig+0x2d4>)
 80014d4:	fba3 2302 	umull	r2, r3, r3, r2
 80014d8:	095b      	lsrs	r3, r3, #5
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80014e0:	441c      	add	r4, r3
 80014e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80014f4:	4642      	mov	r2, r8
 80014f6:	464b      	mov	r3, r9
 80014f8:	1891      	adds	r1, r2, r2
 80014fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80014fc:	415b      	adcs	r3, r3
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001500:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001504:	4641      	mov	r1, r8
 8001506:	1851      	adds	r1, r2, r1
 8001508:	6339      	str	r1, [r7, #48]	; 0x30
 800150a:	4649      	mov	r1, r9
 800150c:	414b      	adcs	r3, r1
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800151c:	4659      	mov	r1, fp
 800151e:	00cb      	lsls	r3, r1, #3
 8001520:	4651      	mov	r1, sl
 8001522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001526:	4651      	mov	r1, sl
 8001528:	00ca      	lsls	r2, r1, #3
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	4603      	mov	r3, r0
 8001530:	4642      	mov	r2, r8
 8001532:	189b      	adds	r3, r3, r2
 8001534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001538:	464b      	mov	r3, r9
 800153a:	460a      	mov	r2, r1
 800153c:	eb42 0303 	adc.w	r3, r2, r3
 8001540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001550:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001554:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001558:	460b      	mov	r3, r1
 800155a:	18db      	adds	r3, r3, r3
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
 800155e:	4613      	mov	r3, r2
 8001560:	eb42 0303 	adc.w	r3, r2, r3
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001566:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800156a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800156e:	f7fe fe87 	bl	8000280 <__aeabi_uldivmod>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <UART_SetConfig+0x2d4>)
 8001578:	fba3 1302 	umull	r1, r3, r3, r2
 800157c:	095b      	lsrs	r3, r3, #5
 800157e:	2164      	movs	r1, #100	; 0x64
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	3332      	adds	r3, #50	; 0x32
 800158a:	4a08      	ldr	r2, [pc, #32]	; (80015ac <UART_SetConfig+0x2d4>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	f003 0207 	and.w	r2, r3, #7
 8001596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4422      	add	r2, r4
 800159e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80015a0:	e105      	b.n	80017ae <UART_SetConfig+0x4d6>
 80015a2:	bf00      	nop
 80015a4:	40011000 	.word	0x40011000
 80015a8:	40011400 	.word	0x40011400
 80015ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015b4:	2200      	movs	r2, #0
 80015b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015c2:	4642      	mov	r2, r8
 80015c4:	464b      	mov	r3, r9
 80015c6:	1891      	adds	r1, r2, r2
 80015c8:	6239      	str	r1, [r7, #32]
 80015ca:	415b      	adcs	r3, r3
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015d2:	4641      	mov	r1, r8
 80015d4:	1854      	adds	r4, r2, r1
 80015d6:	4649      	mov	r1, r9
 80015d8:	eb43 0501 	adc.w	r5, r3, r1
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	00eb      	lsls	r3, r5, #3
 80015e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ea:	00e2      	lsls	r2, r4, #3
 80015ec:	4614      	mov	r4, r2
 80015ee:	461d      	mov	r5, r3
 80015f0:	4643      	mov	r3, r8
 80015f2:	18e3      	adds	r3, r4, r3
 80015f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80015f8:	464b      	mov	r3, r9
 80015fa:	eb45 0303 	adc.w	r3, r5, r3
 80015fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800160e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800161e:	4629      	mov	r1, r5
 8001620:	008b      	lsls	r3, r1, #2
 8001622:	4621      	mov	r1, r4
 8001624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001628:	4621      	mov	r1, r4
 800162a:	008a      	lsls	r2, r1, #2
 800162c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001630:	f7fe fe26 	bl	8000280 <__aeabi_uldivmod>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4b60      	ldr	r3, [pc, #384]	; (80017bc <UART_SetConfig+0x4e4>)
 800163a:	fba3 2302 	umull	r2, r3, r3, r2
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	011c      	lsls	r4, r3, #4
 8001642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001646:	2200      	movs	r2, #0
 8001648:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800164c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001650:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001654:	4642      	mov	r2, r8
 8001656:	464b      	mov	r3, r9
 8001658:	1891      	adds	r1, r2, r2
 800165a:	61b9      	str	r1, [r7, #24]
 800165c:	415b      	adcs	r3, r3
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001664:	4641      	mov	r1, r8
 8001666:	1851      	adds	r1, r2, r1
 8001668:	6139      	str	r1, [r7, #16]
 800166a:	4649      	mov	r1, r9
 800166c:	414b      	adcs	r3, r1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800167c:	4659      	mov	r1, fp
 800167e:	00cb      	lsls	r3, r1, #3
 8001680:	4651      	mov	r1, sl
 8001682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001686:	4651      	mov	r1, sl
 8001688:	00ca      	lsls	r2, r1, #3
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	4603      	mov	r3, r0
 8001690:	4642      	mov	r2, r8
 8001692:	189b      	adds	r3, r3, r2
 8001694:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001698:	464b      	mov	r3, r9
 800169a:	460a      	mov	r2, r1
 800169c:	eb42 0303 	adc.w	r3, r2, r3
 80016a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80016a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80016ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80016bc:	4649      	mov	r1, r9
 80016be:	008b      	lsls	r3, r1, #2
 80016c0:	4641      	mov	r1, r8
 80016c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016c6:	4641      	mov	r1, r8
 80016c8:	008a      	lsls	r2, r1, #2
 80016ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80016ce:	f7fe fdd7 	bl	8000280 <__aeabi_uldivmod>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4b39      	ldr	r3, [pc, #228]	; (80017bc <UART_SetConfig+0x4e4>)
 80016d8:	fba3 1302 	umull	r1, r3, r3, r2
 80016dc:	095b      	lsrs	r3, r3, #5
 80016de:	2164      	movs	r1, #100	; 0x64
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	3332      	adds	r3, #50	; 0x32
 80016ea:	4a34      	ldr	r2, [pc, #208]	; (80017bc <UART_SetConfig+0x4e4>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f6:	441c      	add	r4, r3
 80016f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80016fc:	2200      	movs	r2, #0
 80016fe:	673b      	str	r3, [r7, #112]	; 0x70
 8001700:	677a      	str	r2, [r7, #116]	; 0x74
 8001702:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001706:	4642      	mov	r2, r8
 8001708:	464b      	mov	r3, r9
 800170a:	1891      	adds	r1, r2, r2
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	415b      	adcs	r3, r3
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001716:	4641      	mov	r1, r8
 8001718:	1851      	adds	r1, r2, r1
 800171a:	6039      	str	r1, [r7, #0]
 800171c:	4649      	mov	r1, r9
 800171e:	414b      	adcs	r3, r1
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800172e:	4659      	mov	r1, fp
 8001730:	00cb      	lsls	r3, r1, #3
 8001732:	4651      	mov	r1, sl
 8001734:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001738:	4651      	mov	r1, sl
 800173a:	00ca      	lsls	r2, r1, #3
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	4603      	mov	r3, r0
 8001742:	4642      	mov	r2, r8
 8001744:	189b      	adds	r3, r3, r2
 8001746:	66bb      	str	r3, [r7, #104]	; 0x68
 8001748:	464b      	mov	r3, r9
 800174a:	460a      	mov	r2, r1
 800174c:	eb42 0303 	adc.w	r3, r2, r3
 8001750:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	663b      	str	r3, [r7, #96]	; 0x60
 800175c:	667a      	str	r2, [r7, #100]	; 0x64
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800176a:	4649      	mov	r1, r9
 800176c:	008b      	lsls	r3, r1, #2
 800176e:	4641      	mov	r1, r8
 8001770:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001774:	4641      	mov	r1, r8
 8001776:	008a      	lsls	r2, r1, #2
 8001778:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800177c:	f7fe fd80 	bl	8000280 <__aeabi_uldivmod>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <UART_SetConfig+0x4e4>)
 8001786:	fba3 1302 	umull	r1, r3, r3, r2
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2164      	movs	r1, #100	; 0x64
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	3332      	adds	r3, #50	; 0x32
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <UART_SetConfig+0x4e4>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	f003 020f 	and.w	r2, r3, #15
 80017a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4422      	add	r2, r4
 80017ac:	609a      	str	r2, [r3, #8]
}
 80017ae:	bf00      	nop
 80017b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ba:	bf00      	nop
 80017bc:	51eb851f 	.word	0x51eb851f

080017c0 <__errno>:
 80017c0:	4b01      	ldr	r3, [pc, #4]	; (80017c8 <__errno+0x8>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2000000c 	.word	0x2000000c

080017cc <__libc_init_array>:
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	4d0d      	ldr	r5, [pc, #52]	; (8001804 <__libc_init_array+0x38>)
 80017d0:	4c0d      	ldr	r4, [pc, #52]	; (8001808 <__libc_init_array+0x3c>)
 80017d2:	1b64      	subs	r4, r4, r5
 80017d4:	10a4      	asrs	r4, r4, #2
 80017d6:	2600      	movs	r6, #0
 80017d8:	42a6      	cmp	r6, r4
 80017da:	d109      	bne.n	80017f0 <__libc_init_array+0x24>
 80017dc:	4d0b      	ldr	r5, [pc, #44]	; (800180c <__libc_init_array+0x40>)
 80017de:	4c0c      	ldr	r4, [pc, #48]	; (8001810 <__libc_init_array+0x44>)
 80017e0:	f000 ffae 	bl	8002740 <_init>
 80017e4:	1b64      	subs	r4, r4, r5
 80017e6:	10a4      	asrs	r4, r4, #2
 80017e8:	2600      	movs	r6, #0
 80017ea:	42a6      	cmp	r6, r4
 80017ec:	d105      	bne.n	80017fa <__libc_init_array+0x2e>
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f4:	4798      	blx	r3
 80017f6:	3601      	adds	r6, #1
 80017f8:	e7ee      	b.n	80017d8 <__libc_init_array+0xc>
 80017fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fe:	4798      	blx	r3
 8001800:	3601      	adds	r6, #1
 8001802:	e7f2      	b.n	80017ea <__libc_init_array+0x1e>
 8001804:	08002810 	.word	0x08002810
 8001808:	08002810 	.word	0x08002810
 800180c:	08002810 	.word	0x08002810
 8001810:	08002814 	.word	0x08002814

08001814 <memset>:
 8001814:	4402      	add	r2, r0
 8001816:	4603      	mov	r3, r0
 8001818:	4293      	cmp	r3, r2
 800181a:	d100      	bne.n	800181e <memset+0xa>
 800181c:	4770      	bx	lr
 800181e:	f803 1b01 	strb.w	r1, [r3], #1
 8001822:	e7f9      	b.n	8001818 <memset+0x4>

08001824 <iprintf>:
 8001824:	b40f      	push	{r0, r1, r2, r3}
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <iprintf+0x2c>)
 8001828:	b513      	push	{r0, r1, r4, lr}
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	b124      	cbz	r4, 8001838 <iprintf+0x14>
 800182e:	69a3      	ldr	r3, [r4, #24]
 8001830:	b913      	cbnz	r3, 8001838 <iprintf+0x14>
 8001832:	4620      	mov	r0, r4
 8001834:	f000 f866 	bl	8001904 <__sinit>
 8001838:	ab05      	add	r3, sp, #20
 800183a:	9a04      	ldr	r2, [sp, #16]
 800183c:	68a1      	ldr	r1, [r4, #8]
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	4620      	mov	r0, r4
 8001842:	f000 f9bd 	bl	8001bc0 <_vfiprintf_r>
 8001846:	b002      	add	sp, #8
 8001848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800184c:	b004      	add	sp, #16
 800184e:	4770      	bx	lr
 8001850:	2000000c 	.word	0x2000000c

08001854 <std>:
 8001854:	2300      	movs	r3, #0
 8001856:	b510      	push	{r4, lr}
 8001858:	4604      	mov	r4, r0
 800185a:	e9c0 3300 	strd	r3, r3, [r0]
 800185e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001862:	6083      	str	r3, [r0, #8]
 8001864:	8181      	strh	r1, [r0, #12]
 8001866:	6643      	str	r3, [r0, #100]	; 0x64
 8001868:	81c2      	strh	r2, [r0, #14]
 800186a:	6183      	str	r3, [r0, #24]
 800186c:	4619      	mov	r1, r3
 800186e:	2208      	movs	r2, #8
 8001870:	305c      	adds	r0, #92	; 0x5c
 8001872:	f7ff ffcf 	bl	8001814 <memset>
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <std+0x38>)
 8001878:	6263      	str	r3, [r4, #36]	; 0x24
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <std+0x3c>)
 800187c:	62a3      	str	r3, [r4, #40]	; 0x28
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <std+0x40>)
 8001880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <std+0x44>)
 8001884:	6224      	str	r4, [r4, #32]
 8001886:	6323      	str	r3, [r4, #48]	; 0x30
 8001888:	bd10      	pop	{r4, pc}
 800188a:	bf00      	nop
 800188c:	08002169 	.word	0x08002169
 8001890:	0800218b 	.word	0x0800218b
 8001894:	080021c3 	.word	0x080021c3
 8001898:	080021e7 	.word	0x080021e7

0800189c <_cleanup_r>:
 800189c:	4901      	ldr	r1, [pc, #4]	; (80018a4 <_cleanup_r+0x8>)
 800189e:	f000 b8af 	b.w	8001a00 <_fwalk_reent>
 80018a2:	bf00      	nop
 80018a4:	080024c1 	.word	0x080024c1

080018a8 <__sfmoreglue>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	2268      	movs	r2, #104	; 0x68
 80018ac:	1e4d      	subs	r5, r1, #1
 80018ae:	4355      	muls	r5, r2
 80018b0:	460e      	mov	r6, r1
 80018b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018b6:	f000 f8e5 	bl	8001a84 <_malloc_r>
 80018ba:	4604      	mov	r4, r0
 80018bc:	b140      	cbz	r0, 80018d0 <__sfmoreglue+0x28>
 80018be:	2100      	movs	r1, #0
 80018c0:	e9c0 1600 	strd	r1, r6, [r0]
 80018c4:	300c      	adds	r0, #12
 80018c6:	60a0      	str	r0, [r4, #8]
 80018c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018cc:	f7ff ffa2 	bl	8001814 <memset>
 80018d0:	4620      	mov	r0, r4
 80018d2:	bd70      	pop	{r4, r5, r6, pc}

080018d4 <__sfp_lock_acquire>:
 80018d4:	4801      	ldr	r0, [pc, #4]	; (80018dc <__sfp_lock_acquire+0x8>)
 80018d6:	f000 b8b3 	b.w	8001a40 <__retarget_lock_acquire_recursive>
 80018da:	bf00      	nop
 80018dc:	200000d9 	.word	0x200000d9

080018e0 <__sfp_lock_release>:
 80018e0:	4801      	ldr	r0, [pc, #4]	; (80018e8 <__sfp_lock_release+0x8>)
 80018e2:	f000 b8ae 	b.w	8001a42 <__retarget_lock_release_recursive>
 80018e6:	bf00      	nop
 80018e8:	200000d9 	.word	0x200000d9

080018ec <__sinit_lock_acquire>:
 80018ec:	4801      	ldr	r0, [pc, #4]	; (80018f4 <__sinit_lock_acquire+0x8>)
 80018ee:	f000 b8a7 	b.w	8001a40 <__retarget_lock_acquire_recursive>
 80018f2:	bf00      	nop
 80018f4:	200000da 	.word	0x200000da

080018f8 <__sinit_lock_release>:
 80018f8:	4801      	ldr	r0, [pc, #4]	; (8001900 <__sinit_lock_release+0x8>)
 80018fa:	f000 b8a2 	b.w	8001a42 <__retarget_lock_release_recursive>
 80018fe:	bf00      	nop
 8001900:	200000da 	.word	0x200000da

08001904 <__sinit>:
 8001904:	b510      	push	{r4, lr}
 8001906:	4604      	mov	r4, r0
 8001908:	f7ff fff0 	bl	80018ec <__sinit_lock_acquire>
 800190c:	69a3      	ldr	r3, [r4, #24]
 800190e:	b11b      	cbz	r3, 8001918 <__sinit+0x14>
 8001910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001914:	f7ff bff0 	b.w	80018f8 <__sinit_lock_release>
 8001918:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800191c:	6523      	str	r3, [r4, #80]	; 0x50
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <__sinit+0x68>)
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <__sinit+0x6c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	62a2      	str	r2, [r4, #40]	; 0x28
 8001926:	42a3      	cmp	r3, r4
 8001928:	bf04      	itt	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	61a3      	streq	r3, [r4, #24]
 800192e:	4620      	mov	r0, r4
 8001930:	f000 f820 	bl	8001974 <__sfp>
 8001934:	6060      	str	r0, [r4, #4]
 8001936:	4620      	mov	r0, r4
 8001938:	f000 f81c 	bl	8001974 <__sfp>
 800193c:	60a0      	str	r0, [r4, #8]
 800193e:	4620      	mov	r0, r4
 8001940:	f000 f818 	bl	8001974 <__sfp>
 8001944:	2200      	movs	r2, #0
 8001946:	60e0      	str	r0, [r4, #12]
 8001948:	2104      	movs	r1, #4
 800194a:	6860      	ldr	r0, [r4, #4]
 800194c:	f7ff ff82 	bl	8001854 <std>
 8001950:	68a0      	ldr	r0, [r4, #8]
 8001952:	2201      	movs	r2, #1
 8001954:	2109      	movs	r1, #9
 8001956:	f7ff ff7d 	bl	8001854 <std>
 800195a:	68e0      	ldr	r0, [r4, #12]
 800195c:	2202      	movs	r2, #2
 800195e:	2112      	movs	r1, #18
 8001960:	f7ff ff78 	bl	8001854 <std>
 8001964:	2301      	movs	r3, #1
 8001966:	61a3      	str	r3, [r4, #24]
 8001968:	e7d2      	b.n	8001910 <__sinit+0xc>
 800196a:	bf00      	nop
 800196c:	08002770 	.word	0x08002770
 8001970:	0800189d 	.word	0x0800189d

08001974 <__sfp>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	4607      	mov	r7, r0
 8001978:	f7ff ffac 	bl	80018d4 <__sfp_lock_acquire>
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <__sfp+0x84>)
 800197e:	681e      	ldr	r6, [r3, #0]
 8001980:	69b3      	ldr	r3, [r6, #24]
 8001982:	b913      	cbnz	r3, 800198a <__sfp+0x16>
 8001984:	4630      	mov	r0, r6
 8001986:	f7ff ffbd 	bl	8001904 <__sinit>
 800198a:	3648      	adds	r6, #72	; 0x48
 800198c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001990:	3b01      	subs	r3, #1
 8001992:	d503      	bpl.n	800199c <__sfp+0x28>
 8001994:	6833      	ldr	r3, [r6, #0]
 8001996:	b30b      	cbz	r3, 80019dc <__sfp+0x68>
 8001998:	6836      	ldr	r6, [r6, #0]
 800199a:	e7f7      	b.n	800198c <__sfp+0x18>
 800199c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80019a0:	b9d5      	cbnz	r5, 80019d8 <__sfp+0x64>
 80019a2:	4b16      	ldr	r3, [pc, #88]	; (80019fc <__sfp+0x88>)
 80019a4:	60e3      	str	r3, [r4, #12]
 80019a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80019aa:	6665      	str	r5, [r4, #100]	; 0x64
 80019ac:	f000 f847 	bl	8001a3e <__retarget_lock_init_recursive>
 80019b0:	f7ff ff96 	bl	80018e0 <__sfp_lock_release>
 80019b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80019b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80019bc:	6025      	str	r5, [r4, #0]
 80019be:	61a5      	str	r5, [r4, #24]
 80019c0:	2208      	movs	r2, #8
 80019c2:	4629      	mov	r1, r5
 80019c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019c8:	f7ff ff24 	bl	8001814 <memset>
 80019cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019d4:	4620      	mov	r0, r4
 80019d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d8:	3468      	adds	r4, #104	; 0x68
 80019da:	e7d9      	b.n	8001990 <__sfp+0x1c>
 80019dc:	2104      	movs	r1, #4
 80019de:	4638      	mov	r0, r7
 80019e0:	f7ff ff62 	bl	80018a8 <__sfmoreglue>
 80019e4:	4604      	mov	r4, r0
 80019e6:	6030      	str	r0, [r6, #0]
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d1d5      	bne.n	8001998 <__sfp+0x24>
 80019ec:	f7ff ff78 	bl	80018e0 <__sfp_lock_release>
 80019f0:	230c      	movs	r3, #12
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	e7ee      	b.n	80019d4 <__sfp+0x60>
 80019f6:	bf00      	nop
 80019f8:	08002770 	.word	0x08002770
 80019fc:	ffff0001 	.word	0xffff0001

08001a00 <_fwalk_reent>:
 8001a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a04:	4606      	mov	r6, r0
 8001a06:	4688      	mov	r8, r1
 8001a08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a0c:	2700      	movs	r7, #0
 8001a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a12:	f1b9 0901 	subs.w	r9, r9, #1
 8001a16:	d505      	bpl.n	8001a24 <_fwalk_reent+0x24>
 8001a18:	6824      	ldr	r4, [r4, #0]
 8001a1a:	2c00      	cmp	r4, #0
 8001a1c:	d1f7      	bne.n	8001a0e <_fwalk_reent+0xe>
 8001a1e:	4638      	mov	r0, r7
 8001a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a24:	89ab      	ldrh	r3, [r5, #12]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d907      	bls.n	8001a3a <_fwalk_reent+0x3a>
 8001a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	d003      	beq.n	8001a3a <_fwalk_reent+0x3a>
 8001a32:	4629      	mov	r1, r5
 8001a34:	4630      	mov	r0, r6
 8001a36:	47c0      	blx	r8
 8001a38:	4307      	orrs	r7, r0
 8001a3a:	3568      	adds	r5, #104	; 0x68
 8001a3c:	e7e9      	b.n	8001a12 <_fwalk_reent+0x12>

08001a3e <__retarget_lock_init_recursive>:
 8001a3e:	4770      	bx	lr

08001a40 <__retarget_lock_acquire_recursive>:
 8001a40:	4770      	bx	lr

08001a42 <__retarget_lock_release_recursive>:
 8001a42:	4770      	bx	lr

08001a44 <sbrk_aligned>:
 8001a44:	b570      	push	{r4, r5, r6, lr}
 8001a46:	4e0e      	ldr	r6, [pc, #56]	; (8001a80 <sbrk_aligned+0x3c>)
 8001a48:	460c      	mov	r4, r1
 8001a4a:	6831      	ldr	r1, [r6, #0]
 8001a4c:	4605      	mov	r5, r0
 8001a4e:	b911      	cbnz	r1, 8001a56 <sbrk_aligned+0x12>
 8001a50:	f000 fb7a 	bl	8002148 <_sbrk_r>
 8001a54:	6030      	str	r0, [r6, #0]
 8001a56:	4621      	mov	r1, r4
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f000 fb75 	bl	8002148 <_sbrk_r>
 8001a5e:	1c43      	adds	r3, r0, #1
 8001a60:	d00a      	beq.n	8001a78 <sbrk_aligned+0x34>
 8001a62:	1cc4      	adds	r4, r0, #3
 8001a64:	f024 0403 	bic.w	r4, r4, #3
 8001a68:	42a0      	cmp	r0, r4
 8001a6a:	d007      	beq.n	8001a7c <sbrk_aligned+0x38>
 8001a6c:	1a21      	subs	r1, r4, r0
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 fb6a 	bl	8002148 <_sbrk_r>
 8001a74:	3001      	adds	r0, #1
 8001a76:	d101      	bne.n	8001a7c <sbrk_aligned+0x38>
 8001a78:	f04f 34ff 	mov.w	r4, #4294967295
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	200000e0 	.word	0x200000e0

08001a84 <_malloc_r>:
 8001a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a88:	1ccd      	adds	r5, r1, #3
 8001a8a:	f025 0503 	bic.w	r5, r5, #3
 8001a8e:	3508      	adds	r5, #8
 8001a90:	2d0c      	cmp	r5, #12
 8001a92:	bf38      	it	cc
 8001a94:	250c      	movcc	r5, #12
 8001a96:	2d00      	cmp	r5, #0
 8001a98:	4607      	mov	r7, r0
 8001a9a:	db01      	blt.n	8001aa0 <_malloc_r+0x1c>
 8001a9c:	42a9      	cmp	r1, r5
 8001a9e:	d905      	bls.n	8001aac <_malloc_r+0x28>
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	2600      	movs	r6, #0
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aac:	4e2e      	ldr	r6, [pc, #184]	; (8001b68 <_malloc_r+0xe4>)
 8001aae:	f000 fdbb 	bl	8002628 <__malloc_lock>
 8001ab2:	6833      	ldr	r3, [r6, #0]
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	bb34      	cbnz	r4, 8001b06 <_malloc_r+0x82>
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4638      	mov	r0, r7
 8001abc:	f7ff ffc2 	bl	8001a44 <sbrk_aligned>
 8001ac0:	1c43      	adds	r3, r0, #1
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	d14d      	bne.n	8001b62 <_malloc_r+0xde>
 8001ac6:	6834      	ldr	r4, [r6, #0]
 8001ac8:	4626      	mov	r6, r4
 8001aca:	2e00      	cmp	r6, #0
 8001acc:	d140      	bne.n	8001b50 <_malloc_r+0xcc>
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	4631      	mov	r1, r6
 8001ad2:	4638      	mov	r0, r7
 8001ad4:	eb04 0803 	add.w	r8, r4, r3
 8001ad8:	f000 fb36 	bl	8002148 <_sbrk_r>
 8001adc:	4580      	cmp	r8, r0
 8001ade:	d13a      	bne.n	8001b56 <_malloc_r+0xd2>
 8001ae0:	6821      	ldr	r1, [r4, #0]
 8001ae2:	3503      	adds	r5, #3
 8001ae4:	1a6d      	subs	r5, r5, r1
 8001ae6:	f025 0503 	bic.w	r5, r5, #3
 8001aea:	3508      	adds	r5, #8
 8001aec:	2d0c      	cmp	r5, #12
 8001aee:	bf38      	it	cc
 8001af0:	250c      	movcc	r5, #12
 8001af2:	4629      	mov	r1, r5
 8001af4:	4638      	mov	r0, r7
 8001af6:	f7ff ffa5 	bl	8001a44 <sbrk_aligned>
 8001afa:	3001      	adds	r0, #1
 8001afc:	d02b      	beq.n	8001b56 <_malloc_r+0xd2>
 8001afe:	6823      	ldr	r3, [r4, #0]
 8001b00:	442b      	add	r3, r5
 8001b02:	6023      	str	r3, [r4, #0]
 8001b04:	e00e      	b.n	8001b24 <_malloc_r+0xa0>
 8001b06:	6822      	ldr	r2, [r4, #0]
 8001b08:	1b52      	subs	r2, r2, r5
 8001b0a:	d41e      	bmi.n	8001b4a <_malloc_r+0xc6>
 8001b0c:	2a0b      	cmp	r2, #11
 8001b0e:	d916      	bls.n	8001b3e <_malloc_r+0xba>
 8001b10:	1961      	adds	r1, r4, r5
 8001b12:	42a3      	cmp	r3, r4
 8001b14:	6025      	str	r5, [r4, #0]
 8001b16:	bf18      	it	ne
 8001b18:	6059      	strne	r1, [r3, #4]
 8001b1a:	6863      	ldr	r3, [r4, #4]
 8001b1c:	bf08      	it	eq
 8001b1e:	6031      	streq	r1, [r6, #0]
 8001b20:	5162      	str	r2, [r4, r5]
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	4638      	mov	r0, r7
 8001b26:	f104 060b 	add.w	r6, r4, #11
 8001b2a:	f000 fd83 	bl	8002634 <__malloc_unlock>
 8001b2e:	f026 0607 	bic.w	r6, r6, #7
 8001b32:	1d23      	adds	r3, r4, #4
 8001b34:	1af2      	subs	r2, r6, r3
 8001b36:	d0b6      	beq.n	8001aa6 <_malloc_r+0x22>
 8001b38:	1b9b      	subs	r3, r3, r6
 8001b3a:	50a3      	str	r3, [r4, r2]
 8001b3c:	e7b3      	b.n	8001aa6 <_malloc_r+0x22>
 8001b3e:	6862      	ldr	r2, [r4, #4]
 8001b40:	42a3      	cmp	r3, r4
 8001b42:	bf0c      	ite	eq
 8001b44:	6032      	streq	r2, [r6, #0]
 8001b46:	605a      	strne	r2, [r3, #4]
 8001b48:	e7ec      	b.n	8001b24 <_malloc_r+0xa0>
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	6864      	ldr	r4, [r4, #4]
 8001b4e:	e7b2      	b.n	8001ab6 <_malloc_r+0x32>
 8001b50:	4634      	mov	r4, r6
 8001b52:	6876      	ldr	r6, [r6, #4]
 8001b54:	e7b9      	b.n	8001aca <_malloc_r+0x46>
 8001b56:	230c      	movs	r3, #12
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f000 fd6a 	bl	8002634 <__malloc_unlock>
 8001b60:	e7a1      	b.n	8001aa6 <_malloc_r+0x22>
 8001b62:	6025      	str	r5, [r4, #0]
 8001b64:	e7de      	b.n	8001b24 <_malloc_r+0xa0>
 8001b66:	bf00      	nop
 8001b68:	200000dc 	.word	0x200000dc

08001b6c <__sfputc_r>:
 8001b6c:	6893      	ldr	r3, [r2, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	b410      	push	{r4}
 8001b74:	6093      	str	r3, [r2, #8]
 8001b76:	da08      	bge.n	8001b8a <__sfputc_r+0x1e>
 8001b78:	6994      	ldr	r4, [r2, #24]
 8001b7a:	42a3      	cmp	r3, r4
 8001b7c:	db01      	blt.n	8001b82 <__sfputc_r+0x16>
 8001b7e:	290a      	cmp	r1, #10
 8001b80:	d103      	bne.n	8001b8a <__sfputc_r+0x1e>
 8001b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b86:	f000 bb33 	b.w	80021f0 <__swbuf_r>
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	1c58      	adds	r0, r3, #1
 8001b8e:	6010      	str	r0, [r2, #0]
 8001b90:	7019      	strb	r1, [r3, #0]
 8001b92:	4608      	mov	r0, r1
 8001b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <__sfputs_r>:
 8001b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9c:	4606      	mov	r6, r0
 8001b9e:	460f      	mov	r7, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	18d5      	adds	r5, r2, r3
 8001ba4:	42ac      	cmp	r4, r5
 8001ba6:	d101      	bne.n	8001bac <__sfputs_r+0x12>
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e007      	b.n	8001bbc <__sfputs_r+0x22>
 8001bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bb0:	463a      	mov	r2, r7
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f7ff ffda 	bl	8001b6c <__sfputc_r>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d1f3      	bne.n	8001ba4 <__sfputs_r+0xa>
 8001bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001bc0 <_vfiprintf_r>:
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc4:	460d      	mov	r5, r1
 8001bc6:	b09d      	sub	sp, #116	; 0x74
 8001bc8:	4614      	mov	r4, r2
 8001bca:	4698      	mov	r8, r3
 8001bcc:	4606      	mov	r6, r0
 8001bce:	b118      	cbz	r0, 8001bd8 <_vfiprintf_r+0x18>
 8001bd0:	6983      	ldr	r3, [r0, #24]
 8001bd2:	b90b      	cbnz	r3, 8001bd8 <_vfiprintf_r+0x18>
 8001bd4:	f7ff fe96 	bl	8001904 <__sinit>
 8001bd8:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <_vfiprintf_r+0x240>)
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	d11b      	bne.n	8001c16 <_vfiprintf_r+0x56>
 8001bde:	6875      	ldr	r5, [r6, #4]
 8001be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001be2:	07d9      	lsls	r1, r3, #31
 8001be4:	d405      	bmi.n	8001bf2 <_vfiprintf_r+0x32>
 8001be6:	89ab      	ldrh	r3, [r5, #12]
 8001be8:	059a      	lsls	r2, r3, #22
 8001bea:	d402      	bmi.n	8001bf2 <_vfiprintf_r+0x32>
 8001bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bee:	f7ff ff27 	bl	8001a40 <__retarget_lock_acquire_recursive>
 8001bf2:	89ab      	ldrh	r3, [r5, #12]
 8001bf4:	071b      	lsls	r3, r3, #28
 8001bf6:	d501      	bpl.n	8001bfc <_vfiprintf_r+0x3c>
 8001bf8:	692b      	ldr	r3, [r5, #16]
 8001bfa:	b9eb      	cbnz	r3, 8001c38 <_vfiprintf_r+0x78>
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f000 fb5a 	bl	80022b8 <__swsetup_r>
 8001c04:	b1c0      	cbz	r0, 8001c38 <_vfiprintf_r+0x78>
 8001c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c08:	07dc      	lsls	r4, r3, #31
 8001c0a:	d50e      	bpl.n	8001c2a <_vfiprintf_r+0x6a>
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	b01d      	add	sp, #116	; 0x74
 8001c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <_vfiprintf_r+0x244>)
 8001c18:	429d      	cmp	r5, r3
 8001c1a:	d101      	bne.n	8001c20 <_vfiprintf_r+0x60>
 8001c1c:	68b5      	ldr	r5, [r6, #8]
 8001c1e:	e7df      	b.n	8001be0 <_vfiprintf_r+0x20>
 8001c20:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <_vfiprintf_r+0x248>)
 8001c22:	429d      	cmp	r5, r3
 8001c24:	bf08      	it	eq
 8001c26:	68f5      	ldreq	r5, [r6, #12]
 8001c28:	e7da      	b.n	8001be0 <_vfiprintf_r+0x20>
 8001c2a:	89ab      	ldrh	r3, [r5, #12]
 8001c2c:	0598      	lsls	r0, r3, #22
 8001c2e:	d4ed      	bmi.n	8001c0c <_vfiprintf_r+0x4c>
 8001c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c32:	f7ff ff06 	bl	8001a42 <__retarget_lock_release_recursive>
 8001c36:	e7e9      	b.n	8001c0c <_vfiprintf_r+0x4c>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9309      	str	r3, [sp, #36]	; 0x24
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c46:	2330      	movs	r3, #48	; 0x30
 8001c48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e0c <_vfiprintf_r+0x24c>
 8001c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c50:	f04f 0901 	mov.w	r9, #1
 8001c54:	4623      	mov	r3, r4
 8001c56:	469a      	mov	sl, r3
 8001c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c5c:	b10a      	cbz	r2, 8001c62 <_vfiprintf_r+0xa2>
 8001c5e:	2a25      	cmp	r2, #37	; 0x25
 8001c60:	d1f9      	bne.n	8001c56 <_vfiprintf_r+0x96>
 8001c62:	ebba 0b04 	subs.w	fp, sl, r4
 8001c66:	d00b      	beq.n	8001c80 <_vfiprintf_r+0xc0>
 8001c68:	465b      	mov	r3, fp
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	4630      	mov	r0, r6
 8001c70:	f7ff ff93 	bl	8001b9a <__sfputs_r>
 8001c74:	3001      	adds	r0, #1
 8001c76:	f000 80aa 	beq.w	8001dce <_vfiprintf_r+0x20e>
 8001c7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c7c:	445a      	add	r2, fp
 8001c7e:	9209      	str	r2, [sp, #36]	; 0x24
 8001c80:	f89a 3000 	ldrb.w	r3, [sl]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80a2 	beq.w	8001dce <_vfiprintf_r+0x20e>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c94:	f10a 0a01 	add.w	sl, sl, #1
 8001c98:	9304      	str	r3, [sp, #16]
 8001c9a:	9307      	str	r3, [sp, #28]
 8001c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8001ca2:	4654      	mov	r4, sl
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001caa:	4858      	ldr	r0, [pc, #352]	; (8001e0c <_vfiprintf_r+0x24c>)
 8001cac:	f7fe fa98 	bl	80001e0 <memchr>
 8001cb0:	9a04      	ldr	r2, [sp, #16]
 8001cb2:	b9d8      	cbnz	r0, 8001cec <_vfiprintf_r+0x12c>
 8001cb4:	06d1      	lsls	r1, r2, #27
 8001cb6:	bf44      	itt	mi
 8001cb8:	2320      	movmi	r3, #32
 8001cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cbe:	0713      	lsls	r3, r2, #28
 8001cc0:	bf44      	itt	mi
 8001cc2:	232b      	movmi	r3, #43	; 0x2b
 8001cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8001ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8001cce:	d015      	beq.n	8001cfc <_vfiprintf_r+0x13c>
 8001cd0:	9a07      	ldr	r2, [sp, #28]
 8001cd2:	4654      	mov	r4, sl
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f04f 0c0a 	mov.w	ip, #10
 8001cda:	4621      	mov	r1, r4
 8001cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ce0:	3b30      	subs	r3, #48	; 0x30
 8001ce2:	2b09      	cmp	r3, #9
 8001ce4:	d94e      	bls.n	8001d84 <_vfiprintf_r+0x1c4>
 8001ce6:	b1b0      	cbz	r0, 8001d16 <_vfiprintf_r+0x156>
 8001ce8:	9207      	str	r2, [sp, #28]
 8001cea:	e014      	b.n	8001d16 <_vfiprintf_r+0x156>
 8001cec:	eba0 0308 	sub.w	r3, r0, r8
 8001cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	9304      	str	r3, [sp, #16]
 8001cf8:	46a2      	mov	sl, r4
 8001cfa:	e7d2      	b.n	8001ca2 <_vfiprintf_r+0xe2>
 8001cfc:	9b03      	ldr	r3, [sp, #12]
 8001cfe:	1d19      	adds	r1, r3, #4
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	9103      	str	r1, [sp, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bfbb      	ittet	lt
 8001d08:	425b      	neglt	r3, r3
 8001d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8001d0e:	9307      	strge	r3, [sp, #28]
 8001d10:	9307      	strlt	r3, [sp, #28]
 8001d12:	bfb8      	it	lt
 8001d14:	9204      	strlt	r2, [sp, #16]
 8001d16:	7823      	ldrb	r3, [r4, #0]
 8001d18:	2b2e      	cmp	r3, #46	; 0x2e
 8001d1a:	d10c      	bne.n	8001d36 <_vfiprintf_r+0x176>
 8001d1c:	7863      	ldrb	r3, [r4, #1]
 8001d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d20:	d135      	bne.n	8001d8e <_vfiprintf_r+0x1ce>
 8001d22:	9b03      	ldr	r3, [sp, #12]
 8001d24:	1d1a      	adds	r2, r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	9203      	str	r2, [sp, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bfb8      	it	lt
 8001d2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d32:	3402      	adds	r4, #2
 8001d34:	9305      	str	r3, [sp, #20]
 8001d36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001e1c <_vfiprintf_r+0x25c>
 8001d3a:	7821      	ldrb	r1, [r4, #0]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	4650      	mov	r0, sl
 8001d40:	f7fe fa4e 	bl	80001e0 <memchr>
 8001d44:	b140      	cbz	r0, 8001d58 <_vfiprintf_r+0x198>
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	eba0 000a 	sub.w	r0, r0, sl
 8001d4c:	fa03 f000 	lsl.w	r0, r3, r0
 8001d50:	9b04      	ldr	r3, [sp, #16]
 8001d52:	4303      	orrs	r3, r0
 8001d54:	3401      	adds	r4, #1
 8001d56:	9304      	str	r3, [sp, #16]
 8001d58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d5c:	482c      	ldr	r0, [pc, #176]	; (8001e10 <_vfiprintf_r+0x250>)
 8001d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d62:	2206      	movs	r2, #6
 8001d64:	f7fe fa3c 	bl	80001e0 <memchr>
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	d03f      	beq.n	8001dec <_vfiprintf_r+0x22c>
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <_vfiprintf_r+0x254>)
 8001d6e:	bb1b      	cbnz	r3, 8001db8 <_vfiprintf_r+0x1f8>
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	3307      	adds	r3, #7
 8001d74:	f023 0307 	bic.w	r3, r3, #7
 8001d78:	3308      	adds	r3, #8
 8001d7a:	9303      	str	r3, [sp, #12]
 8001d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d7e:	443b      	add	r3, r7
 8001d80:	9309      	str	r3, [sp, #36]	; 0x24
 8001d82:	e767      	b.n	8001c54 <_vfiprintf_r+0x94>
 8001d84:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d88:	460c      	mov	r4, r1
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	e7a5      	b.n	8001cda <_vfiprintf_r+0x11a>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	3401      	adds	r4, #1
 8001d92:	9305      	str	r3, [sp, #20]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f04f 0c0a 	mov.w	ip, #10
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001da0:	3a30      	subs	r2, #48	; 0x30
 8001da2:	2a09      	cmp	r2, #9
 8001da4:	d903      	bls.n	8001dae <_vfiprintf_r+0x1ee>
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0c5      	beq.n	8001d36 <_vfiprintf_r+0x176>
 8001daa:	9105      	str	r1, [sp, #20]
 8001dac:	e7c3      	b.n	8001d36 <_vfiprintf_r+0x176>
 8001dae:	fb0c 2101 	mla	r1, ip, r1, r2
 8001db2:	4604      	mov	r4, r0
 8001db4:	2301      	movs	r3, #1
 8001db6:	e7f0      	b.n	8001d9a <_vfiprintf_r+0x1da>
 8001db8:	ab03      	add	r3, sp, #12
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <_vfiprintf_r+0x258>)
 8001dc0:	a904      	add	r1, sp, #16
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	4607      	mov	r7, r0
 8001dca:	1c78      	adds	r0, r7, #1
 8001dcc:	d1d6      	bne.n	8001d7c <_vfiprintf_r+0x1bc>
 8001dce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001dd0:	07d9      	lsls	r1, r3, #31
 8001dd2:	d405      	bmi.n	8001de0 <_vfiprintf_r+0x220>
 8001dd4:	89ab      	ldrh	r3, [r5, #12]
 8001dd6:	059a      	lsls	r2, r3, #22
 8001dd8:	d402      	bmi.n	8001de0 <_vfiprintf_r+0x220>
 8001dda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ddc:	f7ff fe31 	bl	8001a42 <__retarget_lock_release_recursive>
 8001de0:	89ab      	ldrh	r3, [r5, #12]
 8001de2:	065b      	lsls	r3, r3, #25
 8001de4:	f53f af12 	bmi.w	8001c0c <_vfiprintf_r+0x4c>
 8001de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dea:	e711      	b.n	8001c10 <_vfiprintf_r+0x50>
 8001dec:	ab03      	add	r3, sp, #12
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	462a      	mov	r2, r5
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <_vfiprintf_r+0x258>)
 8001df4:	a904      	add	r1, sp, #16
 8001df6:	4630      	mov	r0, r6
 8001df8:	f000 f880 	bl	8001efc <_printf_i>
 8001dfc:	e7e4      	b.n	8001dc8 <_vfiprintf_r+0x208>
 8001dfe:	bf00      	nop
 8001e00:	08002794 	.word	0x08002794
 8001e04:	080027b4 	.word	0x080027b4
 8001e08:	08002774 	.word	0x08002774
 8001e0c:	080027d4 	.word	0x080027d4
 8001e10:	080027de 	.word	0x080027de
 8001e14:	00000000 	.word	0x00000000
 8001e18:	08001b9b 	.word	0x08001b9b
 8001e1c:	080027da 	.word	0x080027da

08001e20 <_printf_common>:
 8001e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e24:	4616      	mov	r6, r2
 8001e26:	4699      	mov	r9, r3
 8001e28:	688a      	ldr	r2, [r1, #8]
 8001e2a:	690b      	ldr	r3, [r1, #16]
 8001e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e30:	4293      	cmp	r3, r2
 8001e32:	bfb8      	it	lt
 8001e34:	4613      	movlt	r3, r2
 8001e36:	6033      	str	r3, [r6, #0]
 8001e38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e3c:	4607      	mov	r7, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	b10a      	cbz	r2, 8001e46 <_printf_common+0x26>
 8001e42:	3301      	adds	r3, #1
 8001e44:	6033      	str	r3, [r6, #0]
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	0699      	lsls	r1, r3, #26
 8001e4a:	bf42      	ittt	mi
 8001e4c:	6833      	ldrmi	r3, [r6, #0]
 8001e4e:	3302      	addmi	r3, #2
 8001e50:	6033      	strmi	r3, [r6, #0]
 8001e52:	6825      	ldr	r5, [r4, #0]
 8001e54:	f015 0506 	ands.w	r5, r5, #6
 8001e58:	d106      	bne.n	8001e68 <_printf_common+0x48>
 8001e5a:	f104 0a19 	add.w	sl, r4, #25
 8001e5e:	68e3      	ldr	r3, [r4, #12]
 8001e60:	6832      	ldr	r2, [r6, #0]
 8001e62:	1a9b      	subs	r3, r3, r2
 8001e64:	42ab      	cmp	r3, r5
 8001e66:	dc26      	bgt.n	8001eb6 <_printf_common+0x96>
 8001e68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e6c:	1e13      	subs	r3, r2, #0
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	bf18      	it	ne
 8001e72:	2301      	movne	r3, #1
 8001e74:	0692      	lsls	r2, r2, #26
 8001e76:	d42b      	bmi.n	8001ed0 <_printf_common+0xb0>
 8001e78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	4638      	mov	r0, r7
 8001e80:	47c0      	blx	r8
 8001e82:	3001      	adds	r0, #1
 8001e84:	d01e      	beq.n	8001ec4 <_printf_common+0xa4>
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	68e5      	ldr	r5, [r4, #12]
 8001e8a:	6832      	ldr	r2, [r6, #0]
 8001e8c:	f003 0306 	and.w	r3, r3, #6
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	bf08      	it	eq
 8001e94:	1aad      	subeq	r5, r5, r2
 8001e96:	68a3      	ldr	r3, [r4, #8]
 8001e98:	6922      	ldr	r2, [r4, #16]
 8001e9a:	bf0c      	ite	eq
 8001e9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ea0:	2500      	movne	r5, #0
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	bfc4      	itt	gt
 8001ea6:	1a9b      	subgt	r3, r3, r2
 8001ea8:	18ed      	addgt	r5, r5, r3
 8001eaa:	2600      	movs	r6, #0
 8001eac:	341a      	adds	r4, #26
 8001eae:	42b5      	cmp	r5, r6
 8001eb0:	d11a      	bne.n	8001ee8 <_printf_common+0xc8>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	e008      	b.n	8001ec8 <_printf_common+0xa8>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4652      	mov	r2, sl
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4638      	mov	r0, r7
 8001ebe:	47c0      	blx	r8
 8001ec0:	3001      	adds	r0, #1
 8001ec2:	d103      	bne.n	8001ecc <_printf_common+0xac>
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ecc:	3501      	adds	r5, #1
 8001ece:	e7c6      	b.n	8001e5e <_printf_common+0x3e>
 8001ed0:	18e1      	adds	r1, r4, r3
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	2030      	movs	r0, #48	; 0x30
 8001ed6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001eda:	4422      	add	r2, r4
 8001edc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ee0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	e7c7      	b.n	8001e78 <_printf_common+0x58>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	4622      	mov	r2, r4
 8001eec:	4649      	mov	r1, r9
 8001eee:	4638      	mov	r0, r7
 8001ef0:	47c0      	blx	r8
 8001ef2:	3001      	adds	r0, #1
 8001ef4:	d0e6      	beq.n	8001ec4 <_printf_common+0xa4>
 8001ef6:	3601      	adds	r6, #1
 8001ef8:	e7d9      	b.n	8001eae <_printf_common+0x8e>
	...

08001efc <_printf_i>:
 8001efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f00:	7e0f      	ldrb	r7, [r1, #24]
 8001f02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f04:	2f78      	cmp	r7, #120	; 0x78
 8001f06:	4691      	mov	r9, r2
 8001f08:	4680      	mov	r8, r0
 8001f0a:	460c      	mov	r4, r1
 8001f0c:	469a      	mov	sl, r3
 8001f0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f12:	d807      	bhi.n	8001f24 <_printf_i+0x28>
 8001f14:	2f62      	cmp	r7, #98	; 0x62
 8001f16:	d80a      	bhi.n	8001f2e <_printf_i+0x32>
 8001f18:	2f00      	cmp	r7, #0
 8001f1a:	f000 80d8 	beq.w	80020ce <_printf_i+0x1d2>
 8001f1e:	2f58      	cmp	r7, #88	; 0x58
 8001f20:	f000 80a3 	beq.w	800206a <_printf_i+0x16e>
 8001f24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f2c:	e03a      	b.n	8001fa4 <_printf_i+0xa8>
 8001f2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f32:	2b15      	cmp	r3, #21
 8001f34:	d8f6      	bhi.n	8001f24 <_printf_i+0x28>
 8001f36:	a101      	add	r1, pc, #4	; (adr r1, 8001f3c <_printf_i+0x40>)
 8001f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f3c:	08001f95 	.word	0x08001f95
 8001f40:	08001fa9 	.word	0x08001fa9
 8001f44:	08001f25 	.word	0x08001f25
 8001f48:	08001f25 	.word	0x08001f25
 8001f4c:	08001f25 	.word	0x08001f25
 8001f50:	08001f25 	.word	0x08001f25
 8001f54:	08001fa9 	.word	0x08001fa9
 8001f58:	08001f25 	.word	0x08001f25
 8001f5c:	08001f25 	.word	0x08001f25
 8001f60:	08001f25 	.word	0x08001f25
 8001f64:	08001f25 	.word	0x08001f25
 8001f68:	080020b5 	.word	0x080020b5
 8001f6c:	08001fd9 	.word	0x08001fd9
 8001f70:	08002097 	.word	0x08002097
 8001f74:	08001f25 	.word	0x08001f25
 8001f78:	08001f25 	.word	0x08001f25
 8001f7c:	080020d7 	.word	0x080020d7
 8001f80:	08001f25 	.word	0x08001f25
 8001f84:	08001fd9 	.word	0x08001fd9
 8001f88:	08001f25 	.word	0x08001f25
 8001f8c:	08001f25 	.word	0x08001f25
 8001f90:	0800209f 	.word	0x0800209f
 8001f94:	682b      	ldr	r3, [r5, #0]
 8001f96:	1d1a      	adds	r2, r3, #4
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	602a      	str	r2, [r5, #0]
 8001f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0a3      	b.n	80020f0 <_printf_i+0x1f4>
 8001fa8:	6820      	ldr	r0, [r4, #0]
 8001faa:	6829      	ldr	r1, [r5, #0]
 8001fac:	0606      	lsls	r6, r0, #24
 8001fae:	f101 0304 	add.w	r3, r1, #4
 8001fb2:	d50a      	bpl.n	8001fca <_printf_i+0xce>
 8001fb4:	680e      	ldr	r6, [r1, #0]
 8001fb6:	602b      	str	r3, [r5, #0]
 8001fb8:	2e00      	cmp	r6, #0
 8001fba:	da03      	bge.n	8001fc4 <_printf_i+0xc8>
 8001fbc:	232d      	movs	r3, #45	; 0x2d
 8001fbe:	4276      	negs	r6, r6
 8001fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fc4:	485e      	ldr	r0, [pc, #376]	; (8002140 <_printf_i+0x244>)
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	e019      	b.n	8001ffe <_printf_i+0x102>
 8001fca:	680e      	ldr	r6, [r1, #0]
 8001fcc:	602b      	str	r3, [r5, #0]
 8001fce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001fd2:	bf18      	it	ne
 8001fd4:	b236      	sxthne	r6, r6
 8001fd6:	e7ef      	b.n	8001fb8 <_printf_i+0xbc>
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	6820      	ldr	r0, [r4, #0]
 8001fdc:	1d19      	adds	r1, r3, #4
 8001fde:	6029      	str	r1, [r5, #0]
 8001fe0:	0601      	lsls	r1, r0, #24
 8001fe2:	d501      	bpl.n	8001fe8 <_printf_i+0xec>
 8001fe4:	681e      	ldr	r6, [r3, #0]
 8001fe6:	e002      	b.n	8001fee <_printf_i+0xf2>
 8001fe8:	0646      	lsls	r6, r0, #25
 8001fea:	d5fb      	bpl.n	8001fe4 <_printf_i+0xe8>
 8001fec:	881e      	ldrh	r6, [r3, #0]
 8001fee:	4854      	ldr	r0, [pc, #336]	; (8002140 <_printf_i+0x244>)
 8001ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2308      	moveq	r3, #8
 8001ff6:	230a      	movne	r3, #10
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ffe:	6865      	ldr	r5, [r4, #4]
 8002000:	60a5      	str	r5, [r4, #8]
 8002002:	2d00      	cmp	r5, #0
 8002004:	bfa2      	ittt	ge
 8002006:	6821      	ldrge	r1, [r4, #0]
 8002008:	f021 0104 	bicge.w	r1, r1, #4
 800200c:	6021      	strge	r1, [r4, #0]
 800200e:	b90e      	cbnz	r6, 8002014 <_printf_i+0x118>
 8002010:	2d00      	cmp	r5, #0
 8002012:	d04d      	beq.n	80020b0 <_printf_i+0x1b4>
 8002014:	4615      	mov	r5, r2
 8002016:	fbb6 f1f3 	udiv	r1, r6, r3
 800201a:	fb03 6711 	mls	r7, r3, r1, r6
 800201e:	5dc7      	ldrb	r7, [r0, r7]
 8002020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002024:	4637      	mov	r7, r6
 8002026:	42bb      	cmp	r3, r7
 8002028:	460e      	mov	r6, r1
 800202a:	d9f4      	bls.n	8002016 <_printf_i+0x11a>
 800202c:	2b08      	cmp	r3, #8
 800202e:	d10b      	bne.n	8002048 <_printf_i+0x14c>
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	07de      	lsls	r6, r3, #31
 8002034:	d508      	bpl.n	8002048 <_printf_i+0x14c>
 8002036:	6923      	ldr	r3, [r4, #16]
 8002038:	6861      	ldr	r1, [r4, #4]
 800203a:	4299      	cmp	r1, r3
 800203c:	bfde      	ittt	le
 800203e:	2330      	movle	r3, #48	; 0x30
 8002040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002048:	1b52      	subs	r2, r2, r5
 800204a:	6122      	str	r2, [r4, #16]
 800204c:	f8cd a000 	str.w	sl, [sp]
 8002050:	464b      	mov	r3, r9
 8002052:	aa03      	add	r2, sp, #12
 8002054:	4621      	mov	r1, r4
 8002056:	4640      	mov	r0, r8
 8002058:	f7ff fee2 	bl	8001e20 <_printf_common>
 800205c:	3001      	adds	r0, #1
 800205e:	d14c      	bne.n	80020fa <_printf_i+0x1fe>
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	b004      	add	sp, #16
 8002066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206a:	4835      	ldr	r0, [pc, #212]	; (8002140 <_printf_i+0x244>)
 800206c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002070:	6829      	ldr	r1, [r5, #0]
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	f851 6b04 	ldr.w	r6, [r1], #4
 8002078:	6029      	str	r1, [r5, #0]
 800207a:	061d      	lsls	r5, r3, #24
 800207c:	d514      	bpl.n	80020a8 <_printf_i+0x1ac>
 800207e:	07df      	lsls	r7, r3, #31
 8002080:	bf44      	itt	mi
 8002082:	f043 0320 	orrmi.w	r3, r3, #32
 8002086:	6023      	strmi	r3, [r4, #0]
 8002088:	b91e      	cbnz	r6, 8002092 <_printf_i+0x196>
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	f023 0320 	bic.w	r3, r3, #32
 8002090:	6023      	str	r3, [r4, #0]
 8002092:	2310      	movs	r3, #16
 8002094:	e7b0      	b.n	8001ff8 <_printf_i+0xfc>
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	f043 0320 	orr.w	r3, r3, #32
 800209c:	6023      	str	r3, [r4, #0]
 800209e:	2378      	movs	r3, #120	; 0x78
 80020a0:	4828      	ldr	r0, [pc, #160]	; (8002144 <_printf_i+0x248>)
 80020a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020a6:	e7e3      	b.n	8002070 <_printf_i+0x174>
 80020a8:	0659      	lsls	r1, r3, #25
 80020aa:	bf48      	it	mi
 80020ac:	b2b6      	uxthmi	r6, r6
 80020ae:	e7e6      	b.n	800207e <_printf_i+0x182>
 80020b0:	4615      	mov	r5, r2
 80020b2:	e7bb      	b.n	800202c <_printf_i+0x130>
 80020b4:	682b      	ldr	r3, [r5, #0]
 80020b6:	6826      	ldr	r6, [r4, #0]
 80020b8:	6961      	ldr	r1, [r4, #20]
 80020ba:	1d18      	adds	r0, r3, #4
 80020bc:	6028      	str	r0, [r5, #0]
 80020be:	0635      	lsls	r5, r6, #24
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	d501      	bpl.n	80020c8 <_printf_i+0x1cc>
 80020c4:	6019      	str	r1, [r3, #0]
 80020c6:	e002      	b.n	80020ce <_printf_i+0x1d2>
 80020c8:	0670      	lsls	r0, r6, #25
 80020ca:	d5fb      	bpl.n	80020c4 <_printf_i+0x1c8>
 80020cc:	8019      	strh	r1, [r3, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	4615      	mov	r5, r2
 80020d4:	e7ba      	b.n	800204c <_printf_i+0x150>
 80020d6:	682b      	ldr	r3, [r5, #0]
 80020d8:	1d1a      	adds	r2, r3, #4
 80020da:	602a      	str	r2, [r5, #0]
 80020dc:	681d      	ldr	r5, [r3, #0]
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	2100      	movs	r1, #0
 80020e2:	4628      	mov	r0, r5
 80020e4:	f7fe f87c 	bl	80001e0 <memchr>
 80020e8:	b108      	cbz	r0, 80020ee <_printf_i+0x1f2>
 80020ea:	1b40      	subs	r0, r0, r5
 80020ec:	6060      	str	r0, [r4, #4]
 80020ee:	6863      	ldr	r3, [r4, #4]
 80020f0:	6123      	str	r3, [r4, #16]
 80020f2:	2300      	movs	r3, #0
 80020f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f8:	e7a8      	b.n	800204c <_printf_i+0x150>
 80020fa:	6923      	ldr	r3, [r4, #16]
 80020fc:	462a      	mov	r2, r5
 80020fe:	4649      	mov	r1, r9
 8002100:	4640      	mov	r0, r8
 8002102:	47d0      	blx	sl
 8002104:	3001      	adds	r0, #1
 8002106:	d0ab      	beq.n	8002060 <_printf_i+0x164>
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	079b      	lsls	r3, r3, #30
 800210c:	d413      	bmi.n	8002136 <_printf_i+0x23a>
 800210e:	68e0      	ldr	r0, [r4, #12]
 8002110:	9b03      	ldr	r3, [sp, #12]
 8002112:	4298      	cmp	r0, r3
 8002114:	bfb8      	it	lt
 8002116:	4618      	movlt	r0, r3
 8002118:	e7a4      	b.n	8002064 <_printf_i+0x168>
 800211a:	2301      	movs	r3, #1
 800211c:	4632      	mov	r2, r6
 800211e:	4649      	mov	r1, r9
 8002120:	4640      	mov	r0, r8
 8002122:	47d0      	blx	sl
 8002124:	3001      	adds	r0, #1
 8002126:	d09b      	beq.n	8002060 <_printf_i+0x164>
 8002128:	3501      	adds	r5, #1
 800212a:	68e3      	ldr	r3, [r4, #12]
 800212c:	9903      	ldr	r1, [sp, #12]
 800212e:	1a5b      	subs	r3, r3, r1
 8002130:	42ab      	cmp	r3, r5
 8002132:	dcf2      	bgt.n	800211a <_printf_i+0x21e>
 8002134:	e7eb      	b.n	800210e <_printf_i+0x212>
 8002136:	2500      	movs	r5, #0
 8002138:	f104 0619 	add.w	r6, r4, #25
 800213c:	e7f5      	b.n	800212a <_printf_i+0x22e>
 800213e:	bf00      	nop
 8002140:	080027e5 	.word	0x080027e5
 8002144:	080027f6 	.word	0x080027f6

08002148 <_sbrk_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4d06      	ldr	r5, [pc, #24]	; (8002164 <_sbrk_r+0x1c>)
 800214c:	2300      	movs	r3, #0
 800214e:	4604      	mov	r4, r0
 8002150:	4608      	mov	r0, r1
 8002152:	602b      	str	r3, [r5, #0]
 8002154:	f7fe fbb4 	bl	80008c0 <_sbrk>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	d102      	bne.n	8002162 <_sbrk_r+0x1a>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	b103      	cbz	r3, 8002162 <_sbrk_r+0x1a>
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	200000e4 	.word	0x200000e4

08002168 <__sread>:
 8002168:	b510      	push	{r4, lr}
 800216a:	460c      	mov	r4, r1
 800216c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002170:	f000 fab2 	bl	80026d8 <_read_r>
 8002174:	2800      	cmp	r0, #0
 8002176:	bfab      	itete	ge
 8002178:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800217a:	89a3      	ldrhlt	r3, [r4, #12]
 800217c:	181b      	addge	r3, r3, r0
 800217e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002182:	bfac      	ite	ge
 8002184:	6563      	strge	r3, [r4, #84]	; 0x54
 8002186:	81a3      	strhlt	r3, [r4, #12]
 8002188:	bd10      	pop	{r4, pc}

0800218a <__swrite>:
 800218a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800218e:	461f      	mov	r7, r3
 8002190:	898b      	ldrh	r3, [r1, #12]
 8002192:	05db      	lsls	r3, r3, #23
 8002194:	4605      	mov	r5, r0
 8002196:	460c      	mov	r4, r1
 8002198:	4616      	mov	r6, r2
 800219a:	d505      	bpl.n	80021a8 <__swrite+0x1e>
 800219c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a0:	2302      	movs	r3, #2
 80021a2:	2200      	movs	r2, #0
 80021a4:	f000 f9c8 	bl	8002538 <_lseek_r>
 80021a8:	89a3      	ldrh	r3, [r4, #12]
 80021aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b2:	81a3      	strh	r3, [r4, #12]
 80021b4:	4632      	mov	r2, r6
 80021b6:	463b      	mov	r3, r7
 80021b8:	4628      	mov	r0, r5
 80021ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021be:	f000 b869 	b.w	8002294 <_write_r>

080021c2 <__sseek>:
 80021c2:	b510      	push	{r4, lr}
 80021c4:	460c      	mov	r4, r1
 80021c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ca:	f000 f9b5 	bl	8002538 <_lseek_r>
 80021ce:	1c43      	adds	r3, r0, #1
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	bf15      	itete	ne
 80021d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80021d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021de:	81a3      	strheq	r3, [r4, #12]
 80021e0:	bf18      	it	ne
 80021e2:	81a3      	strhne	r3, [r4, #12]
 80021e4:	bd10      	pop	{r4, pc}

080021e6 <__sclose>:
 80021e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021ea:	f000 b8d3 	b.w	8002394 <_close_r>
	...

080021f0 <__swbuf_r>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	460e      	mov	r6, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	4605      	mov	r5, r0
 80021f8:	b118      	cbz	r0, 8002202 <__swbuf_r+0x12>
 80021fa:	6983      	ldr	r3, [r0, #24]
 80021fc:	b90b      	cbnz	r3, 8002202 <__swbuf_r+0x12>
 80021fe:	f7ff fb81 	bl	8001904 <__sinit>
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <__swbuf_r+0x98>)
 8002204:	429c      	cmp	r4, r3
 8002206:	d12b      	bne.n	8002260 <__swbuf_r+0x70>
 8002208:	686c      	ldr	r4, [r5, #4]
 800220a:	69a3      	ldr	r3, [r4, #24]
 800220c:	60a3      	str	r3, [r4, #8]
 800220e:	89a3      	ldrh	r3, [r4, #12]
 8002210:	071a      	lsls	r2, r3, #28
 8002212:	d52f      	bpl.n	8002274 <__swbuf_r+0x84>
 8002214:	6923      	ldr	r3, [r4, #16]
 8002216:	b36b      	cbz	r3, 8002274 <__swbuf_r+0x84>
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	6820      	ldr	r0, [r4, #0]
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	6963      	ldr	r3, [r4, #20]
 8002220:	b2f6      	uxtb	r6, r6
 8002222:	4283      	cmp	r3, r0
 8002224:	4637      	mov	r7, r6
 8002226:	dc04      	bgt.n	8002232 <__swbuf_r+0x42>
 8002228:	4621      	mov	r1, r4
 800222a:	4628      	mov	r0, r5
 800222c:	f000 f948 	bl	80024c0 <_fflush_r>
 8002230:	bb30      	cbnz	r0, 8002280 <__swbuf_r+0x90>
 8002232:	68a3      	ldr	r3, [r4, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60a3      	str	r3, [r4, #8]
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	6022      	str	r2, [r4, #0]
 800223e:	701e      	strb	r6, [r3, #0]
 8002240:	6963      	ldr	r3, [r4, #20]
 8002242:	3001      	adds	r0, #1
 8002244:	4283      	cmp	r3, r0
 8002246:	d004      	beq.n	8002252 <__swbuf_r+0x62>
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	07db      	lsls	r3, r3, #31
 800224c:	d506      	bpl.n	800225c <__swbuf_r+0x6c>
 800224e:	2e0a      	cmp	r6, #10
 8002250:	d104      	bne.n	800225c <__swbuf_r+0x6c>
 8002252:	4621      	mov	r1, r4
 8002254:	4628      	mov	r0, r5
 8002256:	f000 f933 	bl	80024c0 <_fflush_r>
 800225a:	b988      	cbnz	r0, 8002280 <__swbuf_r+0x90>
 800225c:	4638      	mov	r0, r7
 800225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <__swbuf_r+0x9c>)
 8002262:	429c      	cmp	r4, r3
 8002264:	d101      	bne.n	800226a <__swbuf_r+0x7a>
 8002266:	68ac      	ldr	r4, [r5, #8]
 8002268:	e7cf      	b.n	800220a <__swbuf_r+0x1a>
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <__swbuf_r+0xa0>)
 800226c:	429c      	cmp	r4, r3
 800226e:	bf08      	it	eq
 8002270:	68ec      	ldreq	r4, [r5, #12]
 8002272:	e7ca      	b.n	800220a <__swbuf_r+0x1a>
 8002274:	4621      	mov	r1, r4
 8002276:	4628      	mov	r0, r5
 8002278:	f000 f81e 	bl	80022b8 <__swsetup_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	d0cb      	beq.n	8002218 <__swbuf_r+0x28>
 8002280:	f04f 37ff 	mov.w	r7, #4294967295
 8002284:	e7ea      	b.n	800225c <__swbuf_r+0x6c>
 8002286:	bf00      	nop
 8002288:	08002794 	.word	0x08002794
 800228c:	080027b4 	.word	0x080027b4
 8002290:	08002774 	.word	0x08002774

08002294 <_write_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4d07      	ldr	r5, [pc, #28]	; (80022b4 <_write_r+0x20>)
 8002298:	4604      	mov	r4, r0
 800229a:	4608      	mov	r0, r1
 800229c:	4611      	mov	r1, r2
 800229e:	2200      	movs	r2, #0
 80022a0:	602a      	str	r2, [r5, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f7fe f9f4 	bl	8000690 <_write>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_write_r+0x1e>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_write_r+0x1e>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	200000e4 	.word	0x200000e4

080022b8 <__swsetup_r>:
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <__swsetup_r+0xcc>)
 80022ba:	b570      	push	{r4, r5, r6, lr}
 80022bc:	681d      	ldr	r5, [r3, #0]
 80022be:	4606      	mov	r6, r0
 80022c0:	460c      	mov	r4, r1
 80022c2:	b125      	cbz	r5, 80022ce <__swsetup_r+0x16>
 80022c4:	69ab      	ldr	r3, [r5, #24]
 80022c6:	b913      	cbnz	r3, 80022ce <__swsetup_r+0x16>
 80022c8:	4628      	mov	r0, r5
 80022ca:	f7ff fb1b 	bl	8001904 <__sinit>
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <__swsetup_r+0xd0>)
 80022d0:	429c      	cmp	r4, r3
 80022d2:	d10f      	bne.n	80022f4 <__swsetup_r+0x3c>
 80022d4:	686c      	ldr	r4, [r5, #4]
 80022d6:	89a3      	ldrh	r3, [r4, #12]
 80022d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022dc:	0719      	lsls	r1, r3, #28
 80022de:	d42c      	bmi.n	800233a <__swsetup_r+0x82>
 80022e0:	06dd      	lsls	r5, r3, #27
 80022e2:	d411      	bmi.n	8002308 <__swsetup_r+0x50>
 80022e4:	2309      	movs	r3, #9
 80022e6:	6033      	str	r3, [r6, #0]
 80022e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022ec:	81a3      	strh	r3, [r4, #12]
 80022ee:	f04f 30ff 	mov.w	r0, #4294967295
 80022f2:	e03e      	b.n	8002372 <__swsetup_r+0xba>
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <__swsetup_r+0xd4>)
 80022f6:	429c      	cmp	r4, r3
 80022f8:	d101      	bne.n	80022fe <__swsetup_r+0x46>
 80022fa:	68ac      	ldr	r4, [r5, #8]
 80022fc:	e7eb      	b.n	80022d6 <__swsetup_r+0x1e>
 80022fe:	4b24      	ldr	r3, [pc, #144]	; (8002390 <__swsetup_r+0xd8>)
 8002300:	429c      	cmp	r4, r3
 8002302:	bf08      	it	eq
 8002304:	68ec      	ldreq	r4, [r5, #12]
 8002306:	e7e6      	b.n	80022d6 <__swsetup_r+0x1e>
 8002308:	0758      	lsls	r0, r3, #29
 800230a:	d512      	bpl.n	8002332 <__swsetup_r+0x7a>
 800230c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800230e:	b141      	cbz	r1, 8002322 <__swsetup_r+0x6a>
 8002310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002314:	4299      	cmp	r1, r3
 8002316:	d002      	beq.n	800231e <__swsetup_r+0x66>
 8002318:	4630      	mov	r0, r6
 800231a:	f000 f991 	bl	8002640 <_free_r>
 800231e:	2300      	movs	r3, #0
 8002320:	6363      	str	r3, [r4, #52]	; 0x34
 8002322:	89a3      	ldrh	r3, [r4, #12]
 8002324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002328:	81a3      	strh	r3, [r4, #12]
 800232a:	2300      	movs	r3, #0
 800232c:	6063      	str	r3, [r4, #4]
 800232e:	6923      	ldr	r3, [r4, #16]
 8002330:	6023      	str	r3, [r4, #0]
 8002332:	89a3      	ldrh	r3, [r4, #12]
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	81a3      	strh	r3, [r4, #12]
 800233a:	6923      	ldr	r3, [r4, #16]
 800233c:	b94b      	cbnz	r3, 8002352 <__swsetup_r+0x9a>
 800233e:	89a3      	ldrh	r3, [r4, #12]
 8002340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002348:	d003      	beq.n	8002352 <__swsetup_r+0x9a>
 800234a:	4621      	mov	r1, r4
 800234c:	4630      	mov	r0, r6
 800234e:	f000 f92b 	bl	80025a8 <__smakebuf_r>
 8002352:	89a0      	ldrh	r0, [r4, #12]
 8002354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002358:	f010 0301 	ands.w	r3, r0, #1
 800235c:	d00a      	beq.n	8002374 <__swsetup_r+0xbc>
 800235e:	2300      	movs	r3, #0
 8002360:	60a3      	str	r3, [r4, #8]
 8002362:	6963      	ldr	r3, [r4, #20]
 8002364:	425b      	negs	r3, r3
 8002366:	61a3      	str	r3, [r4, #24]
 8002368:	6923      	ldr	r3, [r4, #16]
 800236a:	b943      	cbnz	r3, 800237e <__swsetup_r+0xc6>
 800236c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002370:	d1ba      	bne.n	80022e8 <__swsetup_r+0x30>
 8002372:	bd70      	pop	{r4, r5, r6, pc}
 8002374:	0781      	lsls	r1, r0, #30
 8002376:	bf58      	it	pl
 8002378:	6963      	ldrpl	r3, [r4, #20]
 800237a:	60a3      	str	r3, [r4, #8]
 800237c:	e7f4      	b.n	8002368 <__swsetup_r+0xb0>
 800237e:	2000      	movs	r0, #0
 8002380:	e7f7      	b.n	8002372 <__swsetup_r+0xba>
 8002382:	bf00      	nop
 8002384:	2000000c 	.word	0x2000000c
 8002388:	08002794 	.word	0x08002794
 800238c:	080027b4 	.word	0x080027b4
 8002390:	08002774 	.word	0x08002774

08002394 <_close_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4d06      	ldr	r5, [pc, #24]	; (80023b0 <_close_r+0x1c>)
 8002398:	2300      	movs	r3, #0
 800239a:	4604      	mov	r4, r0
 800239c:	4608      	mov	r0, r1
 800239e:	602b      	str	r3, [r5, #0]
 80023a0:	f7fe fa59 	bl	8000856 <_close>
 80023a4:	1c43      	adds	r3, r0, #1
 80023a6:	d102      	bne.n	80023ae <_close_r+0x1a>
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	b103      	cbz	r3, 80023ae <_close_r+0x1a>
 80023ac:	6023      	str	r3, [r4, #0]
 80023ae:	bd38      	pop	{r3, r4, r5, pc}
 80023b0:	200000e4 	.word	0x200000e4

080023b4 <__sflush_r>:
 80023b4:	898a      	ldrh	r2, [r1, #12]
 80023b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ba:	4605      	mov	r5, r0
 80023bc:	0710      	lsls	r0, r2, #28
 80023be:	460c      	mov	r4, r1
 80023c0:	d458      	bmi.n	8002474 <__sflush_r+0xc0>
 80023c2:	684b      	ldr	r3, [r1, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	dc05      	bgt.n	80023d4 <__sflush_r+0x20>
 80023c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dc02      	bgt.n	80023d4 <__sflush_r+0x20>
 80023ce:	2000      	movs	r0, #0
 80023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023d6:	2e00      	cmp	r6, #0
 80023d8:	d0f9      	beq.n	80023ce <__sflush_r+0x1a>
 80023da:	2300      	movs	r3, #0
 80023dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80023e0:	682f      	ldr	r7, [r5, #0]
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	d032      	beq.n	800244c <__sflush_r+0x98>
 80023e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80023e8:	89a3      	ldrh	r3, [r4, #12]
 80023ea:	075a      	lsls	r2, r3, #29
 80023ec:	d505      	bpl.n	80023fa <__sflush_r+0x46>
 80023ee:	6863      	ldr	r3, [r4, #4]
 80023f0:	1ac0      	subs	r0, r0, r3
 80023f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023f4:	b10b      	cbz	r3, 80023fa <__sflush_r+0x46>
 80023f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023f8:	1ac0      	subs	r0, r0, r3
 80023fa:	2300      	movs	r3, #0
 80023fc:	4602      	mov	r2, r0
 80023fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002400:	6a21      	ldr	r1, [r4, #32]
 8002402:	4628      	mov	r0, r5
 8002404:	47b0      	blx	r6
 8002406:	1c43      	adds	r3, r0, #1
 8002408:	89a3      	ldrh	r3, [r4, #12]
 800240a:	d106      	bne.n	800241a <__sflush_r+0x66>
 800240c:	6829      	ldr	r1, [r5, #0]
 800240e:	291d      	cmp	r1, #29
 8002410:	d82c      	bhi.n	800246c <__sflush_r+0xb8>
 8002412:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <__sflush_r+0x108>)
 8002414:	40ca      	lsrs	r2, r1
 8002416:	07d6      	lsls	r6, r2, #31
 8002418:	d528      	bpl.n	800246c <__sflush_r+0xb8>
 800241a:	2200      	movs	r2, #0
 800241c:	6062      	str	r2, [r4, #4]
 800241e:	04d9      	lsls	r1, r3, #19
 8002420:	6922      	ldr	r2, [r4, #16]
 8002422:	6022      	str	r2, [r4, #0]
 8002424:	d504      	bpl.n	8002430 <__sflush_r+0x7c>
 8002426:	1c42      	adds	r2, r0, #1
 8002428:	d101      	bne.n	800242e <__sflush_r+0x7a>
 800242a:	682b      	ldr	r3, [r5, #0]
 800242c:	b903      	cbnz	r3, 8002430 <__sflush_r+0x7c>
 800242e:	6560      	str	r0, [r4, #84]	; 0x54
 8002430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002432:	602f      	str	r7, [r5, #0]
 8002434:	2900      	cmp	r1, #0
 8002436:	d0ca      	beq.n	80023ce <__sflush_r+0x1a>
 8002438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800243c:	4299      	cmp	r1, r3
 800243e:	d002      	beq.n	8002446 <__sflush_r+0x92>
 8002440:	4628      	mov	r0, r5
 8002442:	f000 f8fd 	bl	8002640 <_free_r>
 8002446:	2000      	movs	r0, #0
 8002448:	6360      	str	r0, [r4, #52]	; 0x34
 800244a:	e7c1      	b.n	80023d0 <__sflush_r+0x1c>
 800244c:	6a21      	ldr	r1, [r4, #32]
 800244e:	2301      	movs	r3, #1
 8002450:	4628      	mov	r0, r5
 8002452:	47b0      	blx	r6
 8002454:	1c41      	adds	r1, r0, #1
 8002456:	d1c7      	bne.n	80023e8 <__sflush_r+0x34>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0c4      	beq.n	80023e8 <__sflush_r+0x34>
 800245e:	2b1d      	cmp	r3, #29
 8002460:	d001      	beq.n	8002466 <__sflush_r+0xb2>
 8002462:	2b16      	cmp	r3, #22
 8002464:	d101      	bne.n	800246a <__sflush_r+0xb6>
 8002466:	602f      	str	r7, [r5, #0]
 8002468:	e7b1      	b.n	80023ce <__sflush_r+0x1a>
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002470:	81a3      	strh	r3, [r4, #12]
 8002472:	e7ad      	b.n	80023d0 <__sflush_r+0x1c>
 8002474:	690f      	ldr	r7, [r1, #16]
 8002476:	2f00      	cmp	r7, #0
 8002478:	d0a9      	beq.n	80023ce <__sflush_r+0x1a>
 800247a:	0793      	lsls	r3, r2, #30
 800247c:	680e      	ldr	r6, [r1, #0]
 800247e:	bf08      	it	eq
 8002480:	694b      	ldreq	r3, [r1, #20]
 8002482:	600f      	str	r7, [r1, #0]
 8002484:	bf18      	it	ne
 8002486:	2300      	movne	r3, #0
 8002488:	eba6 0807 	sub.w	r8, r6, r7
 800248c:	608b      	str	r3, [r1, #8]
 800248e:	f1b8 0f00 	cmp.w	r8, #0
 8002492:	dd9c      	ble.n	80023ce <__sflush_r+0x1a>
 8002494:	6a21      	ldr	r1, [r4, #32]
 8002496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002498:	4643      	mov	r3, r8
 800249a:	463a      	mov	r2, r7
 800249c:	4628      	mov	r0, r5
 800249e:	47b0      	blx	r6
 80024a0:	2800      	cmp	r0, #0
 80024a2:	dc06      	bgt.n	80024b2 <__sflush_r+0xfe>
 80024a4:	89a3      	ldrh	r3, [r4, #12]
 80024a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024aa:	81a3      	strh	r3, [r4, #12]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	e78e      	b.n	80023d0 <__sflush_r+0x1c>
 80024b2:	4407      	add	r7, r0
 80024b4:	eba8 0800 	sub.w	r8, r8, r0
 80024b8:	e7e9      	b.n	800248e <__sflush_r+0xda>
 80024ba:	bf00      	nop
 80024bc:	20400001 	.word	0x20400001

080024c0 <_fflush_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	690b      	ldr	r3, [r1, #16]
 80024c4:	4605      	mov	r5, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	b913      	cbnz	r3, 80024d0 <_fflush_r+0x10>
 80024ca:	2500      	movs	r5, #0
 80024cc:	4628      	mov	r0, r5
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	b118      	cbz	r0, 80024da <_fflush_r+0x1a>
 80024d2:	6983      	ldr	r3, [r0, #24]
 80024d4:	b90b      	cbnz	r3, 80024da <_fflush_r+0x1a>
 80024d6:	f7ff fa15 	bl	8001904 <__sinit>
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <_fflush_r+0x6c>)
 80024dc:	429c      	cmp	r4, r3
 80024de:	d11b      	bne.n	8002518 <_fflush_r+0x58>
 80024e0:	686c      	ldr	r4, [r5, #4]
 80024e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ef      	beq.n	80024ca <_fflush_r+0xa>
 80024ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80024ec:	07d0      	lsls	r0, r2, #31
 80024ee:	d404      	bmi.n	80024fa <_fflush_r+0x3a>
 80024f0:	0599      	lsls	r1, r3, #22
 80024f2:	d402      	bmi.n	80024fa <_fflush_r+0x3a>
 80024f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024f6:	f7ff faa3 	bl	8001a40 <__retarget_lock_acquire_recursive>
 80024fa:	4628      	mov	r0, r5
 80024fc:	4621      	mov	r1, r4
 80024fe:	f7ff ff59 	bl	80023b4 <__sflush_r>
 8002502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002504:	07da      	lsls	r2, r3, #31
 8002506:	4605      	mov	r5, r0
 8002508:	d4e0      	bmi.n	80024cc <_fflush_r+0xc>
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	059b      	lsls	r3, r3, #22
 800250e:	d4dd      	bmi.n	80024cc <_fflush_r+0xc>
 8002510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002512:	f7ff fa96 	bl	8001a42 <__retarget_lock_release_recursive>
 8002516:	e7d9      	b.n	80024cc <_fflush_r+0xc>
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <_fflush_r+0x70>)
 800251a:	429c      	cmp	r4, r3
 800251c:	d101      	bne.n	8002522 <_fflush_r+0x62>
 800251e:	68ac      	ldr	r4, [r5, #8]
 8002520:	e7df      	b.n	80024e2 <_fflush_r+0x22>
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <_fflush_r+0x74>)
 8002524:	429c      	cmp	r4, r3
 8002526:	bf08      	it	eq
 8002528:	68ec      	ldreq	r4, [r5, #12]
 800252a:	e7da      	b.n	80024e2 <_fflush_r+0x22>
 800252c:	08002794 	.word	0x08002794
 8002530:	080027b4 	.word	0x080027b4
 8002534:	08002774 	.word	0x08002774

08002538 <_lseek_r>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	4d07      	ldr	r5, [pc, #28]	; (8002558 <_lseek_r+0x20>)
 800253c:	4604      	mov	r4, r0
 800253e:	4608      	mov	r0, r1
 8002540:	4611      	mov	r1, r2
 8002542:	2200      	movs	r2, #0
 8002544:	602a      	str	r2, [r5, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	f7fe f9ac 	bl	80008a4 <_lseek>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d102      	bne.n	8002556 <_lseek_r+0x1e>
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	b103      	cbz	r3, 8002556 <_lseek_r+0x1e>
 8002554:	6023      	str	r3, [r4, #0]
 8002556:	bd38      	pop	{r3, r4, r5, pc}
 8002558:	200000e4 	.word	0x200000e4

0800255c <__swhatbuf_r>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	460e      	mov	r6, r1
 8002560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002564:	2900      	cmp	r1, #0
 8002566:	b096      	sub	sp, #88	; 0x58
 8002568:	4614      	mov	r4, r2
 800256a:	461d      	mov	r5, r3
 800256c:	da08      	bge.n	8002580 <__swhatbuf_r+0x24>
 800256e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	602a      	str	r2, [r5, #0]
 8002576:	061a      	lsls	r2, r3, #24
 8002578:	d410      	bmi.n	800259c <__swhatbuf_r+0x40>
 800257a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257e:	e00e      	b.n	800259e <__swhatbuf_r+0x42>
 8002580:	466a      	mov	r2, sp
 8002582:	f000 f8bb 	bl	80026fc <_fstat_r>
 8002586:	2800      	cmp	r0, #0
 8002588:	dbf1      	blt.n	800256e <__swhatbuf_r+0x12>
 800258a:	9a01      	ldr	r2, [sp, #4]
 800258c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002590:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002594:	425a      	negs	r2, r3
 8002596:	415a      	adcs	r2, r3
 8002598:	602a      	str	r2, [r5, #0]
 800259a:	e7ee      	b.n	800257a <__swhatbuf_r+0x1e>
 800259c:	2340      	movs	r3, #64	; 0x40
 800259e:	2000      	movs	r0, #0
 80025a0:	6023      	str	r3, [r4, #0]
 80025a2:	b016      	add	sp, #88	; 0x58
 80025a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080025a8 <__smakebuf_r>:
 80025a8:	898b      	ldrh	r3, [r1, #12]
 80025aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025ac:	079d      	lsls	r5, r3, #30
 80025ae:	4606      	mov	r6, r0
 80025b0:	460c      	mov	r4, r1
 80025b2:	d507      	bpl.n	80025c4 <__smakebuf_r+0x1c>
 80025b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	6123      	str	r3, [r4, #16]
 80025bc:	2301      	movs	r3, #1
 80025be:	6163      	str	r3, [r4, #20]
 80025c0:	b002      	add	sp, #8
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	ab01      	add	r3, sp, #4
 80025c6:	466a      	mov	r2, sp
 80025c8:	f7ff ffc8 	bl	800255c <__swhatbuf_r>
 80025cc:	9900      	ldr	r1, [sp, #0]
 80025ce:	4605      	mov	r5, r0
 80025d0:	4630      	mov	r0, r6
 80025d2:	f7ff fa57 	bl	8001a84 <_malloc_r>
 80025d6:	b948      	cbnz	r0, 80025ec <__smakebuf_r+0x44>
 80025d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025dc:	059a      	lsls	r2, r3, #22
 80025de:	d4ef      	bmi.n	80025c0 <__smakebuf_r+0x18>
 80025e0:	f023 0303 	bic.w	r3, r3, #3
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	81a3      	strh	r3, [r4, #12]
 80025ea:	e7e3      	b.n	80025b4 <__smakebuf_r+0xc>
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <__smakebuf_r+0x7c>)
 80025ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80025f0:	89a3      	ldrh	r3, [r4, #12]
 80025f2:	6020      	str	r0, [r4, #0]
 80025f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f8:	81a3      	strh	r3, [r4, #12]
 80025fa:	9b00      	ldr	r3, [sp, #0]
 80025fc:	6163      	str	r3, [r4, #20]
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	6120      	str	r0, [r4, #16]
 8002602:	b15b      	cbz	r3, 800261c <__smakebuf_r+0x74>
 8002604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002608:	4630      	mov	r0, r6
 800260a:	f000 f889 	bl	8002720 <_isatty_r>
 800260e:	b128      	cbz	r0, 800261c <__smakebuf_r+0x74>
 8002610:	89a3      	ldrh	r3, [r4, #12]
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	81a3      	strh	r3, [r4, #12]
 800261c:	89a0      	ldrh	r0, [r4, #12]
 800261e:	4305      	orrs	r5, r0
 8002620:	81a5      	strh	r5, [r4, #12]
 8002622:	e7cd      	b.n	80025c0 <__smakebuf_r+0x18>
 8002624:	0800189d 	.word	0x0800189d

08002628 <__malloc_lock>:
 8002628:	4801      	ldr	r0, [pc, #4]	; (8002630 <__malloc_lock+0x8>)
 800262a:	f7ff ba09 	b.w	8001a40 <__retarget_lock_acquire_recursive>
 800262e:	bf00      	nop
 8002630:	200000d8 	.word	0x200000d8

08002634 <__malloc_unlock>:
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <__malloc_unlock+0x8>)
 8002636:	f7ff ba04 	b.w	8001a42 <__retarget_lock_release_recursive>
 800263a:	bf00      	nop
 800263c:	200000d8 	.word	0x200000d8

08002640 <_free_r>:
 8002640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002642:	2900      	cmp	r1, #0
 8002644:	d044      	beq.n	80026d0 <_free_r+0x90>
 8002646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800264a:	9001      	str	r0, [sp, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	f1a1 0404 	sub.w	r4, r1, #4
 8002652:	bfb8      	it	lt
 8002654:	18e4      	addlt	r4, r4, r3
 8002656:	f7ff ffe7 	bl	8002628 <__malloc_lock>
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <_free_r+0x94>)
 800265c:	9801      	ldr	r0, [sp, #4]
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	b933      	cbnz	r3, 8002670 <_free_r+0x30>
 8002662:	6063      	str	r3, [r4, #4]
 8002664:	6014      	str	r4, [r2, #0]
 8002666:	b003      	add	sp, #12
 8002668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800266c:	f7ff bfe2 	b.w	8002634 <__malloc_unlock>
 8002670:	42a3      	cmp	r3, r4
 8002672:	d908      	bls.n	8002686 <_free_r+0x46>
 8002674:	6825      	ldr	r5, [r4, #0]
 8002676:	1961      	adds	r1, r4, r5
 8002678:	428b      	cmp	r3, r1
 800267a:	bf01      	itttt	eq
 800267c:	6819      	ldreq	r1, [r3, #0]
 800267e:	685b      	ldreq	r3, [r3, #4]
 8002680:	1949      	addeq	r1, r1, r5
 8002682:	6021      	streq	r1, [r4, #0]
 8002684:	e7ed      	b.n	8002662 <_free_r+0x22>
 8002686:	461a      	mov	r2, r3
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	b10b      	cbz	r3, 8002690 <_free_r+0x50>
 800268c:	42a3      	cmp	r3, r4
 800268e:	d9fa      	bls.n	8002686 <_free_r+0x46>
 8002690:	6811      	ldr	r1, [r2, #0]
 8002692:	1855      	adds	r5, r2, r1
 8002694:	42a5      	cmp	r5, r4
 8002696:	d10b      	bne.n	80026b0 <_free_r+0x70>
 8002698:	6824      	ldr	r4, [r4, #0]
 800269a:	4421      	add	r1, r4
 800269c:	1854      	adds	r4, r2, r1
 800269e:	42a3      	cmp	r3, r4
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	d1e0      	bne.n	8002666 <_free_r+0x26>
 80026a4:	681c      	ldr	r4, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	6053      	str	r3, [r2, #4]
 80026aa:	4421      	add	r1, r4
 80026ac:	6011      	str	r1, [r2, #0]
 80026ae:	e7da      	b.n	8002666 <_free_r+0x26>
 80026b0:	d902      	bls.n	80026b8 <_free_r+0x78>
 80026b2:	230c      	movs	r3, #12
 80026b4:	6003      	str	r3, [r0, #0]
 80026b6:	e7d6      	b.n	8002666 <_free_r+0x26>
 80026b8:	6825      	ldr	r5, [r4, #0]
 80026ba:	1961      	adds	r1, r4, r5
 80026bc:	428b      	cmp	r3, r1
 80026be:	bf04      	itt	eq
 80026c0:	6819      	ldreq	r1, [r3, #0]
 80026c2:	685b      	ldreq	r3, [r3, #4]
 80026c4:	6063      	str	r3, [r4, #4]
 80026c6:	bf04      	itt	eq
 80026c8:	1949      	addeq	r1, r1, r5
 80026ca:	6021      	streq	r1, [r4, #0]
 80026cc:	6054      	str	r4, [r2, #4]
 80026ce:	e7ca      	b.n	8002666 <_free_r+0x26>
 80026d0:	b003      	add	sp, #12
 80026d2:	bd30      	pop	{r4, r5, pc}
 80026d4:	200000dc 	.word	0x200000dc

080026d8 <_read_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4d07      	ldr	r5, [pc, #28]	; (80026f8 <_read_r+0x20>)
 80026dc:	4604      	mov	r4, r0
 80026de:	4608      	mov	r0, r1
 80026e0:	4611      	mov	r1, r2
 80026e2:	2200      	movs	r2, #0
 80026e4:	602a      	str	r2, [r5, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7fe f898 	bl	800081c <_read>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_read_r+0x1e>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_read_r+0x1e>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	200000e4 	.word	0x200000e4

080026fc <_fstat_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d07      	ldr	r5, [pc, #28]	; (800271c <_fstat_r+0x20>)
 8002700:	2300      	movs	r3, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	602b      	str	r3, [r5, #0]
 800270a:	f7fe f8b0 	bl	800086e <_fstat>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	d102      	bne.n	8002718 <_fstat_r+0x1c>
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	b103      	cbz	r3, 8002718 <_fstat_r+0x1c>
 8002716:	6023      	str	r3, [r4, #0]
 8002718:	bd38      	pop	{r3, r4, r5, pc}
 800271a:	bf00      	nop
 800271c:	200000e4 	.word	0x200000e4

08002720 <_isatty_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4d06      	ldr	r5, [pc, #24]	; (800273c <_isatty_r+0x1c>)
 8002724:	2300      	movs	r3, #0
 8002726:	4604      	mov	r4, r0
 8002728:	4608      	mov	r0, r1
 800272a:	602b      	str	r3, [r5, #0]
 800272c:	f7fe f8af 	bl	800088e <_isatty>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d102      	bne.n	800273a <_isatty_r+0x1a>
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	b103      	cbz	r3, 800273a <_isatty_r+0x1a>
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	200000e4 	.word	0x200000e4

08002740 <_init>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr

0800274c <_fini>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr
