
1_GPIOInputOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003264  08003264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003314  08003314  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003314  08003314  00013314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800331c  0800331c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800331c  0800331c  0001331c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08003394  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003394  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec96  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f4  00000000  00000000  0002ed36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00030f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00031cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004221  00000000  00000000  00032958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010711  00000000  00000000  00036b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b58d  00000000  00000000  0004728a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fb0  00000000  00000000  000e2868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800324c 	.word	0x0800324c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800324c 	.word	0x0800324c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <pa0_adc_single_conversion_read>:
#include "stm32f4xx_hal.h"
#include "../Inc/adc.h"

extern ADC_HandleTypeDef hadc2;

uint32_t pa0_adc_single_conversion_read(void){
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	return HAL_ADC_GetValue(&hadc2);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <pa0_adc_single_conversion_read+0x10>)
 800058a:	f000 fcb8 	bl	8000efe <HAL_ADC_GetValue>
 800058e:	4603      	mov	r3, r0
};
 8000590:	4618      	mov	r0, r3
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000118 	.word	0x20000118

08000598 <adc_continuous_conv_init>:

static void adc_continuous_conv_init(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	; 0x30
 800059c:	af00      	add	r7, sp, #0
	//configure pc0 as analog pin
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <adc_continuous_conv_init+0xdc>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	4a2b      	ldr	r2, [pc, #172]	; (8000674 <adc_continuous_conv_init+0xdc>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	6313      	str	r3, [r2, #48]	; 0x30
 80005cc:	4b29      	ldr	r3, [pc, #164]	; (8000674 <adc_continuous_conv_init+0xdc>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	f003 0301 	and.w	r3, r3, #1
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005d8:	2301      	movs	r3, #1
 80005da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005dc:	2303      	movs	r3, #3
 80005de:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4619      	mov	r1, r3
 80005ea:	4823      	ldr	r0, [pc, #140]	; (8000678 <adc_continuous_conv_init+0xe0>)
 80005ec:	f000 ff98 	bl	8001520 <HAL_GPIO_Init>

	//configure ADC module for continuous conversion
	__HAL_RCC_ADC1_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <adc_continuous_conv_init+0xdc>)
 80005f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <adc_continuous_conv_init+0xdc>)
 80005fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005fe:	6453      	str	r3, [r2, #68]	; 0x44
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <adc_continuous_conv_init+0xdc>)
 8000602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

	hadc2.Instance = ADC1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <adc_continuous_conv_init+0xe4>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <adc_continuous_conv_init+0xe8>)
 8000610:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <adc_continuous_conv_init+0xe4>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	hadc2.Init.ContinuousConvMode = DISABLE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <adc_continuous_conv_init+0xe4>)
 800062e:	2200      	movs	r2, #0
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <adc_continuous_conv_init+0xec>)
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.NbrOfConversion = 1;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <adc_continuous_conv_init+0xe4>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b0d      	ldr	r3, [pc, #52]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&hadc2);
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <adc_continuous_conv_init+0xe4>)
 800064e:	f000 fac9 	bl	8000be4 <HAL_ADC_Init>

	sConfig.Channel = ADC_CHANNEL_0;
 8000652:	2300      	movs	r3, #0
 8000654:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800065a:	2307      	movs	r3, #7
 800065c:	617b      	str	r3, [r7, #20]

	HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <adc_continuous_conv_init+0xe4>)
 8000666:	f000 fc57 	bl	8000f18 <HAL_ADC_ConfigChannel>
}
 800066a:	bf00      	nop
 800066c:	3730      	adds	r7, #48	; 0x30
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40020000 	.word	0x40020000
 800067c:	20000118 	.word	0x20000118
 8000680:	40012000 	.word	0x40012000
 8000684:	0f000001 	.word	0x0f000001

08000688 <adc_single_conversion_init_start>:

void adc_single_conversion_init_start(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	adc_continuous_conv_init();
 800068c:	f7ff ff84 	bl	8000598 <adc_continuous_conv_init>
	HAL_ADC_Start(&hadc2);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <adc_single_conversion_init_start+0x14>)
 8000692:	f000 faf5 	bl	8000c80 <HAL_ADC_Start>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000118 	.word	0x20000118

080006a0 <HAL_GPIO_EXTI_Callback>:

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){

	};
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BTN_PIN);
 80006ba:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006be:	f001 f8b3 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <TIM3_IRQHandler>:
	HAL_NVIC_EnableIRQ(TIMx_IRQn);

	HAL_TIM_Base_Start_IT(&TimHandle);
}

void TIMx_IRQHandler(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <TIM3_IRQHandler+0x10>)
 80006ce:	f001 f8f7 	bl	80018c0 <HAL_TIM_IRQHandler>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	//Do something when timer interrupt called
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <uart_init>:
#include <stdint.h>
#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

void uart_init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60bb      	str	r3, [r7, #8]
 800070a:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <uart_init+0xb0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a24      	ldr	r2, [pc, #144]	; (80007a0 <uart_init+0xb0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <uart_init+0xb0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <uart_init+0xb0>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a1d      	ldr	r2, [pc, #116]	; (80007a0 <uart_init+0xb0>)
 800072c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <uart_init+0xb0>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800073e:	230c      	movs	r3, #12
 8000740:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000746:	2307      	movs	r3, #7
 8000748:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	4812      	ldr	r0, [pc, #72]	; (80007a4 <uart_init+0xb4>)
 800075a:	f000 fee1 	bl	8001520 <HAL_GPIO_Init>

	huart2.Instance = USART2;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <uart_init+0xb8>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <uart_init+0xbc>)
 8000762:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <uart_init+0xb8>)
 8000766:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076a:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <uart_init+0xb8>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000772:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <uart_init+0xb8>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <uart_init+0xb8>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <uart_init+0xb8>)
 8000780:	220c      	movs	r2, #12
 8000782:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <uart_init+0xb8>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <uart_init+0xb8>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <uart_init+0xb8>)
 8000792:	f001 f9d9 	bl	8001b48 <HAL_UART_Init>
}
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020000 	.word	0x40020000
 80007a8:	200000d4 	.word	0x200000d4
 80007ac:	40004400 	.word	0x40004400

080007b0 <uart_putchar>:

int uart_putchar(int ch) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007b8:	1d39      	adds	r1, r7, #4
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	2201      	movs	r2, #1
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <uart_putchar+0x20>)
 80007c2:	f001 fa0e 	bl	8001be2 <HAL_UART_Transmit>
    return ch;
 80007c6:	687b      	ldr	r3, [r7, #4]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000d4 	.word	0x200000d4

080007d4 <_write>:

int _write(int file, char* ptr, int len) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e009      	b.n	80007fa <_write+0x26>
        uart_putchar(*ptr++);
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	60ba      	str	r2, [r7, #8]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ffde 	bl	80007b0 <uart_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbf1      	blt.n	80007e6 <_write+0x12>
    }

    return len;
 8000802:	687b      	ldr	r3, [r7, #4]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <main>:
#include "../Peripherals/Inc/adc_single_conversion.h"

ADC_HandleTypeDef hadc2;
uint32_t sensor_value;

int main(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

	HAL_Init();
 8000812:	f000 f975 	bl	8000b00 <HAL_Init>
	uart_init();
 8000816:	f7ff ff6b 	bl	80006f0 <uart_init>
//	tim_timebase_init();
	adc_single_conversion_init_start();
 800081a:	f7ff ff35 	bl	8000688 <adc_single_conversion_init_start>

	uint32_t value;

    while (1)
    {
    	HAL_ADC_Start(&hadc2);
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <main+0x30>)
 8000820:	f000 fa2e 	bl	8000c80 <HAL_ADC_Start>
    	HAL_ADC_PollForConversion(&hadc2, 1);
 8000824:	2101      	movs	r1, #1
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <main+0x30>)
 8000828:	f000 fade 	bl	8000de8 <HAL_ADC_PollForConversion>
    	value = pa0_adc_single_conversion_read();
 800082c:	f7ff feaa 	bl	8000584 <pa0_adc_single_conversion_read>
 8000830:	6078      	str	r0, [r7, #4]
    	printf("%" PRIu32 ": number \n", value);
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <main+0x34>)
 8000836:	f001 fd7b 	bl	8002330 <iprintf>
    	HAL_ADC_Start(&hadc2);
 800083a:	e7f0      	b.n	800081e <main+0x12>
 800083c:	20000118 	.word	0x20000118
 8000840:	08003264 	.word	0x08003264

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 fe18 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12b      	bne.n	800090e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_UART_MspInit+0x88>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_UART_MspInit+0x88>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008ee:	230c      	movs	r3, #12
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008fe:	2307      	movs	r3, #7
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_UART_MspInit+0x8c>)
 800090a:	f000 fe09 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004400 	.word	0x40004400
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f918 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	e00a      	b.n	80009a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098a:	f3af 8000 	nop.w
 800098e:	4601      	mov	r1, r0
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	3301      	adds	r3, #1
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbf0      	blt.n	800098a <_read+0x12>
  }

  return len;
 80009a8:	687b      	ldr	r3, [r7, #4]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009da:	605a      	str	r2, [r3, #4]
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_isatty>:

int _isatty(int file)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f001 fc3e 	bl	80022cc <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20018000 	.word	0x20018000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	20000160 	.word	0x20000160
 8000a84:	20000178 	.word	0x20000178

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f001 fbfd 	bl	80022d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fe95 	bl	800080c <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af0:	08003324 	.word	0x08003324
  ldr r2, =_sbss
 8000af4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000af8:	20000178 	.word	0x20000178

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 fcc5 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fe86 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fccf 	bl	8001506 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 fca5 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x20>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_IncTick+0x24>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000164 	.word	0x20000164

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <HAL_GetTick+0x14>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000164 	.word	0x20000164

08000be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e033      	b.n	8000c62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d109      	bne.n	8000c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f831 	bl	8000c6a <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d118      	bne.n	8000c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c2a:	f023 0302 	bic.w	r3, r3, #2
 8000c2e:	f043 0202 	orr.w	r2, r3, #2
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 fa90 	bl	800115c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f023 0303 	bic.w	r3, r3, #3
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
 8000c52:	e001      	b.n	8000c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d101      	bne.n	8000c9a <HAL_ADC_Start+0x1a>
 8000c96:	2302      	movs	r3, #2
 8000c98:	e097      	b.n	8000dca <HAL_ADC_Start+0x14a>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d018      	beq.n	8000ce2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0201 	orr.w	r2, r2, #1
 8000cbe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cc0:	4b45      	ldr	r3, [pc, #276]	; (8000dd8 <HAL_ADC_Start+0x158>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a45      	ldr	r2, [pc, #276]	; (8000ddc <HAL_ADC_Start+0x15c>)
 8000cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cca:	0c9a      	lsrs	r2, r3, #18
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cd4:	e002      	b.n	8000cdc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f9      	bne.n	8000cd6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d15f      	bne.n	8000db0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cf8:	f023 0301 	bic.w	r3, r3, #1
 8000cfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d2e:	d106      	bne.n	8000d3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f023 0206 	bic.w	r2, r3, #6
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	645a      	str	r2, [r3, #68]	; 0x44
 8000d3c:	e002      	b.n	8000d44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <HAL_ADC_Start+0x160>)
 8000d4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d58:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 031f 	and.w	r3, r3, #31
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10f      	bne.n	8000d86 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d129      	bne.n	8000dc8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	e020      	b.n	8000dc8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a16      	ldr	r2, [pc, #88]	; (8000de4 <HAL_ADC_Start+0x164>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d11b      	bne.n	8000dc8 <HAL_ADC_Start+0x148>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d114      	bne.n	8000dc8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	e00b      	b.n	8000dc8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f043 0210 	orr.w	r2, r3, #16
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f043 0201 	orr.w	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	431bde83 	.word	0x431bde83
 8000de0:	40012300 	.word	0x40012300
 8000de4:	40012000 	.word	0x40012000

08000de8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e04:	d113      	bne.n	8000e2e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e14:	d10b      	bne.n	8000e2e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f043 0220 	orr.w	r2, r3, #32
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e063      	b.n	8000ef6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e2e:	f7ff fecd 	bl	8000bcc <HAL_GetTick>
 8000e32:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e34:	e021      	b.n	8000e7a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d01d      	beq.n	8000e7a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_ADC_PollForConversion+0x6c>
 8000e44:	f7ff fec2 	bl	8000bcc <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d212      	bcs.n	8000e7a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d00b      	beq.n	8000e7a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f043 0204 	orr.w	r2, r3, #4
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e03d      	b.n	8000ef6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d1d6      	bne.n	8000e36 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f06f 0212 	mvn.w	r2, #18
 8000e90:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d123      	bne.n	8000ef4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d11f      	bne.n	8000ef4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d111      	bne.n	8000ef4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d105      	bne.n	8000ef4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d101      	bne.n	8000f34 <HAL_ADC_ConfigChannel+0x1c>
 8000f30:	2302      	movs	r3, #2
 8000f32:	e105      	b.n	8001140 <HAL_ADC_ConfigChannel+0x228>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b09      	cmp	r3, #9
 8000f42:	d925      	bls.n	8000f90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68d9      	ldr	r1, [r3, #12]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	3b1e      	subs	r3, #30
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43da      	mvns	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	400a      	ands	r2, r1
 8000f68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68d9      	ldr	r1, [r3, #12]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4403      	add	r3, r0
 8000f82:	3b1e      	subs	r3, #30
 8000f84:	409a      	lsls	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	e022      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6919      	ldr	r1, [r3, #16]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6919      	ldr	r1, [r3, #16]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4403      	add	r3, r0
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d824      	bhi.n	8001028 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	3b05      	subs	r3, #5
 8000ff0:	221f      	movs	r2, #31
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	3b05      	subs	r3, #5
 800101a:	fa00 f203 	lsl.w	r2, r0, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
 8001026:	e04c      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d824      	bhi.n	800107a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685a      	ldr	r2, [r3, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3b23      	subs	r3, #35	; 0x23
 8001042:	221f      	movs	r2, #31
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43da      	mvns	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	400a      	ands	r2, r1
 8001050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	3b23      	subs	r3, #35	; 0x23
 800106c:	fa00 f203 	lsl.w	r2, r0, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	430a      	orrs	r2, r1
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
 8001078:	e023      	b.n	80010c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	3b41      	subs	r3, #65	; 0x41
 800108c:	221f      	movs	r2, #31
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	400a      	ands	r2, r1
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	3b41      	subs	r3, #65	; 0x41
 80010b6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_ADC_ConfigChannel+0x234>)
 80010c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <HAL_ADC_ConfigChannel+0x238>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d109      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1cc>
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b12      	cmp	r3, #18
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a19      	ldr	r2, [pc, #100]	; (8001150 <HAL_ADC_ConfigChannel+0x238>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d123      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x21e>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d003      	beq.n	80010fe <HAL_ADC_ConfigChannel+0x1e6>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b11      	cmp	r3, #17
 80010fc:	d11b      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	605a      	str	r2, [r3, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b10      	cmp	r3, #16
 8001110:	d111      	bne.n	8001136 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_ADC_ConfigChannel+0x23c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_ADC_ConfigChannel+0x240>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9a      	lsrs	r2, r3, #18
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001128:	e002      	b.n	8001130 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	3b01      	subs	r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f9      	bne.n	800112a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40012300 	.word	0x40012300
 8001150:	40012000 	.word	0x40012000
 8001154:	20000000 	.word	0x20000000
 8001158:	431bde83 	.word	0x431bde83

0800115c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001164:	4b79      	ldr	r3, [pc, #484]	; (800134c <ADC_Init+0x1f0>)
 8001166:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	431a      	orrs	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	021a      	lsls	r2, r3, #8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6899      	ldr	r1, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ee:	4a58      	ldr	r2, [pc, #352]	; (8001350 <ADC_Init+0x1f4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d022      	beq.n	800123a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001202:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6899      	ldr	r1, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	430a      	orrs	r2, r1
 8001214:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6899      	ldr	r1, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e00f      	b.n	800125a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001248:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001258:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0202 	bic.w	r2, r2, #2
 8001268:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6899      	ldr	r1, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e1b      	ldrb	r3, [r3, #24]
 8001274:	005a      	lsls	r2, r3, #1
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	609a      	str	r2, [r3, #8]

  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d01b      	beq.n	80012c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001296:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6859      	ldr	r1, [r3, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	3b01      	subs	r3, #1
 80012b4:	035a      	lsls	r2, r3, #13
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	e007      	b.n	80012d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	051a      	lsls	r2, r3, #20
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001304:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6899      	ldr	r1, [r3, #8]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001312:	025a      	lsls	r2, r3, #9
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800132a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6899      	ldr	r1, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	029a      	lsls	r2, r3, #10
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	609a      	str	r2, [r3, #8]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	40012300 	.word	0x40012300
 8001350:	0f000001 	.word	0x0f000001

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	; (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	; (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	; 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	; 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff47 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff5c 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffb0 	bl	8001474 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e159      	b.n	80017f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 8148 	bne.w	80017ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d005      	beq.n	8001572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	2b02      	cmp	r3, #2
 8001570:	d130      	bne.n	80015d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 0201 	and.w	r2, r3, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d017      	beq.n	8001610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d123      	bne.n	8001664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0203 	and.w	r2, r3, #3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80a2 	beq.w	80017ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b57      	ldr	r3, [pc, #348]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a56      	ldr	r2, [pc, #344]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b54      	ldr	r3, [pc, #336]	; (8001808 <HAL_GPIO_Init+0x2e8>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c2:	4a52      	ldr	r2, [pc, #328]	; (800180c <HAL_GPIO_Init+0x2ec>)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a49      	ldr	r2, [pc, #292]	; (8001810 <HAL_GPIO_Init+0x2f0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d019      	beq.n	8001722 <HAL_GPIO_Init+0x202>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a48      	ldr	r2, [pc, #288]	; (8001814 <HAL_GPIO_Init+0x2f4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0x1fe>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a47      	ldr	r2, [pc, #284]	; (8001818 <HAL_GPIO_Init+0x2f8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00d      	beq.n	800171a <HAL_GPIO_Init+0x1fa>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a46      	ldr	r2, [pc, #280]	; (800181c <HAL_GPIO_Init+0x2fc>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x1f6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a45      	ldr	r2, [pc, #276]	; (8001820 <HAL_GPIO_Init+0x300>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d101      	bne.n	8001712 <HAL_GPIO_Init+0x1f2>
 800170e:	2304      	movs	r3, #4
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x204>
 8001712:	2307      	movs	r3, #7
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x204>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x204>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x204>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x204>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <HAL_GPIO_Init+0x2ec>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_GPIO_Init+0x304>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <HAL_GPIO_Init+0x304>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_GPIO_Init+0x304>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_GPIO_Init+0x304>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_GPIO_Init+0x304>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_GPIO_Init+0x304>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f aea2 	bls.w	800153c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40013c00 	.word	0x40013c00

08001828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe ff2a 	bl	80006a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013c00 	.word	0x40013c00

08001858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCC_GetHCLKFreq+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001874:	f7ff fff0 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	0a9b      	lsrs	r3, r3, #10
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	4903      	ldr	r1, [pc, #12]	; (8001894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	08003274 	.word	0x08003274

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800189c:	f7ff ffdc 	bl	8001858 <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0b5b      	lsrs	r3, r3, #13
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4903      	ldr	r1, [pc, #12]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	08003274 	.word	0x08003274

080018c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d122      	bne.n	800191c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d11b      	bne.n	800191c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f06f 0202 	mvn.w	r2, #2
 80018ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f8ee 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 8001908:	e005      	b.n	8001916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f8e0 	bl	8001ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f8f1 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b04      	cmp	r3, #4
 8001928:	d122      	bne.n	8001970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b04      	cmp	r3, #4
 8001936:	d11b      	bne.n	8001970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f06f 0204 	mvn.w	r2, #4
 8001940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2202      	movs	r2, #2
 8001946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8c4 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 800195c:	e005      	b.n	800196a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8b6 	bl	8001ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f8c7 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b08      	cmp	r3, #8
 800197c:	d122      	bne.n	80019c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b08      	cmp	r3, #8
 800198a:	d11b      	bne.n	80019c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0208 	mvn.w	r2, #8
 8001994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2204      	movs	r2, #4
 800199a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f89a 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 80019b0:	e005      	b.n	80019be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f88c 	bl	8001ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f89d 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	f003 0310 	and.w	r3, r3, #16
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d122      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b10      	cmp	r3, #16
 80019de:	d11b      	bne.n	8001a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0210 	mvn.w	r2, #16
 80019e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2208      	movs	r2, #8
 80019ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f870 	bl	8001ae4 <HAL_TIM_IC_CaptureCallback>
 8001a04:	e005      	b.n	8001a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f862 	bl	8001ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f873 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d10e      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d107      	bne.n	8001a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0201 	mvn.w	r2, #1
 8001a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fe4c 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d10e      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b80      	cmp	r3, #128	; 0x80
 8001a5e:	d107      	bne.n	8001a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f862 	bl	8001b34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b40      	cmp	r3, #64	; 0x40
 8001a7c:	d10e      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a88:	2b40      	cmp	r3, #64	; 0x40
 8001a8a:	d107      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f838 	bl	8001b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d107      	bne.n	8001ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0220 	mvn.w	r2, #32
 8001ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f82c 	bl	8001b20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e03f      	b.n	8001bda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7fe fe90 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2224      	movs	r2, #36	; 0x24
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f929 	bl	8001de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b08a      	sub	sp, #40	; 0x28
 8001be6:	af02      	add	r7, sp, #8
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d17c      	bne.n	8001cfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_UART_Transmit+0x2c>
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e075      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <HAL_UART_Transmit+0x3e>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e06e      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2221      	movs	r2, #33	; 0x21
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c36:	f7fe ffc9 	bl	8000bcc <HAL_GetTick>
 8001c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c50:	d108      	bne.n	8001c64 <HAL_UART_Transmit+0x82>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d104      	bne.n	8001c64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	e003      	b.n	8001c6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c74:	e02a      	b.n	8001ccc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2180      	movs	r1, #128	; 0x80
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f840 	bl	8001d06 <UART_WaitOnFlagUntilTimeout>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e036      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	3302      	adds	r3, #2
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	e007      	b.n	8001cbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	781a      	ldrb	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1cf      	bne.n	8001c76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2140      	movs	r1, #64	; 0x40
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 f810 	bl	8001d06 <UART_WaitOnFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e006      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b090      	sub	sp, #64	; 0x40
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4613      	mov	r3, r2
 8001d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d16:	e050      	b.n	8001dba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1e:	d04c      	beq.n	8001dba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d26:	f7fe ff51 	bl	8000bcc <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d241      	bcs.n	8001dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	e853 3f00 	ldrex	r3, [r3]
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	330c      	adds	r3, #12
 8001d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d56:	637a      	str	r2, [r7, #52]	; 0x34
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5e:	e841 2300 	strex	r3, r2, [r1]
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1e5      	bne.n	8001d36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	3314      	adds	r3, #20
 8001d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	e853 3f00 	ldrex	r3, [r3]
 8001d78:	613b      	str	r3, [r7, #16]
   return(result);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	3314      	adds	r3, #20
 8001d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d8a:	623a      	str	r2, [r7, #32]
 8001d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8e:	69f9      	ldr	r1, [r7, #28]
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	e841 2300 	strex	r3, r2, [r1]
 8001d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1e5      	bne.n	8001d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00f      	b.n	8001dda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d09f      	beq.n	8001d18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3740      	adds	r7, #64	; 0x40
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de8:	b0c0      	sub	sp, #256	; 0x100
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	ea40 0301 	orr.w	r3, r0, r1
 8001e0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e3c:	f021 010c 	bic.w	r1, r1, #12
 8001e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5e:	6999      	ldr	r1, [r3, #24]
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	ea40 0301 	orr.w	r3, r0, r1
 8001e6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <UART_SetConfig+0x2cc>)
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d005      	beq.n	8001e84 <UART_SetConfig+0xa0>
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4b8d      	ldr	r3, [pc, #564]	; (80020b4 <UART_SetConfig+0x2d0>)
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d104      	bne.n	8001e8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e84:	f7ff fd08 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8001e88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e8c:	e003      	b.n	8001e96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e8e:	f7ff fcef 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 8001e92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea0:	f040 810c 	bne.w	80020bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	1891      	adds	r1, r2, r2
 8001ebc:	65b9      	str	r1, [r7, #88]	; 0x58
 8001ebe:	415b      	adcs	r3, r3
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ec6:	4621      	mov	r1, r4
 8001ec8:	eb12 0801 	adds.w	r8, r2, r1
 8001ecc:	4629      	mov	r1, r5
 8001ece:	eb43 0901 	adc.w	r9, r3, r1
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee6:	4690      	mov	r8, r2
 8001ee8:	4699      	mov	r9, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	eb18 0303 	adds.w	r3, r8, r3
 8001ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	eb49 0303 	adc.w	r3, r9, r3
 8001efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f12:	460b      	mov	r3, r1
 8001f14:	18db      	adds	r3, r3, r3
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
 8001f18:	4613      	mov	r3, r2
 8001f1a:	eb42 0303 	adc.w	r3, r2, r3
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001f20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f28:	f7fe f9aa 	bl	8000280 <__aeabi_uldivmod>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001f32:	fba3 2302 	umull	r2, r3, r3, r2
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	011c      	lsls	r4, r3, #4
 8001f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	464b      	mov	r3, r9
 8001f50:	1891      	adds	r1, r2, r2
 8001f52:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f54:	415b      	adcs	r3, r3
 8001f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f5c:	4641      	mov	r1, r8
 8001f5e:	eb12 0a01 	adds.w	sl, r2, r1
 8001f62:	4649      	mov	r1, r9
 8001f64:	eb43 0b01 	adc.w	fp, r3, r1
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	469b      	mov	fp, r3
 8001f80:	4643      	mov	r3, r8
 8001f82:	eb1a 0303 	adds.w	r3, sl, r3
 8001f86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001f90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fa0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	18db      	adds	r3, r3, r3
 8001fac:	643b      	str	r3, [r7, #64]	; 0x40
 8001fae:	4613      	mov	r3, r2
 8001fb0:	eb42 0303 	adc.w	r3, r2, r3
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001fbe:	f7fe f95f 	bl	8000280 <__aeabi_uldivmod>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fca:	fba3 2301 	umull	r2, r3, r3, r1
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2264      	movs	r2, #100	; 0x64
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	1acb      	subs	r3, r1, r3
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <UART_SetConfig+0x2d4>)
 8001fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fec:	441c      	add	r4, r3
 8001fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ffc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002000:	4642      	mov	r2, r8
 8002002:	464b      	mov	r3, r9
 8002004:	1891      	adds	r1, r2, r2
 8002006:	63b9      	str	r1, [r7, #56]	; 0x38
 8002008:	415b      	adcs	r3, r3
 800200a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800200c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002010:	4641      	mov	r1, r8
 8002012:	1851      	adds	r1, r2, r1
 8002014:	6339      	str	r1, [r7, #48]	; 0x30
 8002016:	4649      	mov	r1, r9
 8002018:	414b      	adcs	r3, r1
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002028:	4659      	mov	r1, fp
 800202a:	00cb      	lsls	r3, r1, #3
 800202c:	4651      	mov	r1, sl
 800202e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002032:	4651      	mov	r1, sl
 8002034:	00ca      	lsls	r2, r1, #3
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	4603      	mov	r3, r0
 800203c:	4642      	mov	r2, r8
 800203e:	189b      	adds	r3, r3, r2
 8002040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002044:	464b      	mov	r3, r9
 8002046:	460a      	mov	r2, r1
 8002048:	eb42 0303 	adc.w	r3, r2, r3
 800204c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800205c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002060:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002064:	460b      	mov	r3, r1
 8002066:	18db      	adds	r3, r3, r3
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
 800206a:	4613      	mov	r3, r2
 800206c:	eb42 0303 	adc.w	r3, r2, r3
 8002070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002076:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800207a:	f7fe f901 	bl	8000280 <__aeabi_uldivmod>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002084:	fba3 1302 	umull	r1, r3, r3, r2
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	2164      	movs	r1, #100	; 0x64
 800208c:	fb01 f303 	mul.w	r3, r1, r3
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	3332      	adds	r3, #50	; 0x32
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <UART_SetConfig+0x2d4>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	f003 0207 	and.w	r2, r3, #7
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4422      	add	r2, r4
 80020aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020ac:	e105      	b.n	80022ba <UART_SetConfig+0x4d6>
 80020ae:	bf00      	nop
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020c0:	2200      	movs	r2, #0
 80020c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80020c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80020ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80020ce:	4642      	mov	r2, r8
 80020d0:	464b      	mov	r3, r9
 80020d2:	1891      	adds	r1, r2, r2
 80020d4:	6239      	str	r1, [r7, #32]
 80020d6:	415b      	adcs	r3, r3
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020de:	4641      	mov	r1, r8
 80020e0:	1854      	adds	r4, r2, r1
 80020e2:	4649      	mov	r1, r9
 80020e4:	eb43 0501 	adc.w	r5, r3, r1
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	00eb      	lsls	r3, r5, #3
 80020f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020f6:	00e2      	lsls	r2, r4, #3
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	4643      	mov	r3, r8
 80020fe:	18e3      	adds	r3, r4, r3
 8002100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002104:	464b      	mov	r3, r9
 8002106:	eb45 0303 	adc.w	r3, r5, r3
 800210a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800210e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800211a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800212a:	4629      	mov	r1, r5
 800212c:	008b      	lsls	r3, r1, #2
 800212e:	4621      	mov	r1, r4
 8002130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002134:	4621      	mov	r1, r4
 8002136:	008a      	lsls	r2, r1, #2
 8002138:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800213c:	f7fe f8a0 	bl	8000280 <__aeabi_uldivmod>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <UART_SetConfig+0x4e4>)
 8002146:	fba3 2302 	umull	r2, r3, r3, r2
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	011c      	lsls	r4, r3, #4
 800214e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002152:	2200      	movs	r2, #0
 8002154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800215c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002160:	4642      	mov	r2, r8
 8002162:	464b      	mov	r3, r9
 8002164:	1891      	adds	r1, r2, r2
 8002166:	61b9      	str	r1, [r7, #24]
 8002168:	415b      	adcs	r3, r3
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002170:	4641      	mov	r1, r8
 8002172:	1851      	adds	r1, r2, r1
 8002174:	6139      	str	r1, [r7, #16]
 8002176:	4649      	mov	r1, r9
 8002178:	414b      	adcs	r3, r1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002188:	4659      	mov	r1, fp
 800218a:	00cb      	lsls	r3, r1, #3
 800218c:	4651      	mov	r1, sl
 800218e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002192:	4651      	mov	r1, sl
 8002194:	00ca      	lsls	r2, r1, #3
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	4603      	mov	r3, r0
 800219c:	4642      	mov	r2, r8
 800219e:	189b      	adds	r3, r3, r2
 80021a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021a4:	464b      	mov	r3, r9
 80021a6:	460a      	mov	r2, r1
 80021a8:	eb42 0303 	adc.w	r3, r2, r3
 80021ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80021c8:	4649      	mov	r1, r9
 80021ca:	008b      	lsls	r3, r1, #2
 80021cc:	4641      	mov	r1, r8
 80021ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d2:	4641      	mov	r1, r8
 80021d4:	008a      	lsls	r2, r1, #2
 80021d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80021da:	f7fe f851 	bl	8000280 <__aeabi_uldivmod>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <UART_SetConfig+0x4e4>)
 80021e4:	fba3 1302 	umull	r1, r3, r3, r2
 80021e8:	095b      	lsrs	r3, r3, #5
 80021ea:	2164      	movs	r1, #100	; 0x64
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	3332      	adds	r3, #50	; 0x32
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <UART_SetConfig+0x4e4>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002202:	441c      	add	r4, r3
 8002204:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002208:	2200      	movs	r2, #0
 800220a:	673b      	str	r3, [r7, #112]	; 0x70
 800220c:	677a      	str	r2, [r7, #116]	; 0x74
 800220e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002212:	4642      	mov	r2, r8
 8002214:	464b      	mov	r3, r9
 8002216:	1891      	adds	r1, r2, r2
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	415b      	adcs	r3, r3
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002222:	4641      	mov	r1, r8
 8002224:	1851      	adds	r1, r2, r1
 8002226:	6039      	str	r1, [r7, #0]
 8002228:	4649      	mov	r1, r9
 800222a:	414b      	adcs	r3, r1
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800223a:	4659      	mov	r1, fp
 800223c:	00cb      	lsls	r3, r1, #3
 800223e:	4651      	mov	r1, sl
 8002240:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002244:	4651      	mov	r1, sl
 8002246:	00ca      	lsls	r2, r1, #3
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	4603      	mov	r3, r0
 800224e:	4642      	mov	r2, r8
 8002250:	189b      	adds	r3, r3, r2
 8002252:	66bb      	str	r3, [r7, #104]	; 0x68
 8002254:	464b      	mov	r3, r9
 8002256:	460a      	mov	r2, r1
 8002258:	eb42 0303 	adc.w	r3, r2, r3
 800225c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	663b      	str	r3, [r7, #96]	; 0x60
 8002268:	667a      	str	r2, [r7, #100]	; 0x64
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002276:	4649      	mov	r1, r9
 8002278:	008b      	lsls	r3, r1, #2
 800227a:	4641      	mov	r1, r8
 800227c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002280:	4641      	mov	r1, r8
 8002282:	008a      	lsls	r2, r1, #2
 8002284:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002288:	f7fd fffa 	bl	8000280 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <UART_SetConfig+0x4e4>)
 8002292:	fba3 1302 	umull	r1, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2164      	movs	r1, #100	; 0x64
 800229a:	fb01 f303 	mul.w	r3, r1, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	; 0x32
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <UART_SetConfig+0x4e4>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4422      	add	r2, r4
 80022b8:	609a      	str	r2, [r3, #8]
}
 80022ba:	bf00      	nop
 80022bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	51eb851f 	.word	0x51eb851f

080022cc <__errno>:
 80022cc:	4b01      	ldr	r3, [pc, #4]	; (80022d4 <__errno+0x8>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	2000000c 	.word	0x2000000c

080022d8 <__libc_init_array>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	4d0d      	ldr	r5, [pc, #52]	; (8002310 <__libc_init_array+0x38>)
 80022dc:	4c0d      	ldr	r4, [pc, #52]	; (8002314 <__libc_init_array+0x3c>)
 80022de:	1b64      	subs	r4, r4, r5
 80022e0:	10a4      	asrs	r4, r4, #2
 80022e2:	2600      	movs	r6, #0
 80022e4:	42a6      	cmp	r6, r4
 80022e6:	d109      	bne.n	80022fc <__libc_init_array+0x24>
 80022e8:	4d0b      	ldr	r5, [pc, #44]	; (8002318 <__libc_init_array+0x40>)
 80022ea:	4c0c      	ldr	r4, [pc, #48]	; (800231c <__libc_init_array+0x44>)
 80022ec:	f000 ffae 	bl	800324c <_init>
 80022f0:	1b64      	subs	r4, r4, r5
 80022f2:	10a4      	asrs	r4, r4, #2
 80022f4:	2600      	movs	r6, #0
 80022f6:	42a6      	cmp	r6, r4
 80022f8:	d105      	bne.n	8002306 <__libc_init_array+0x2e>
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
 80022fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002300:	4798      	blx	r3
 8002302:	3601      	adds	r6, #1
 8002304:	e7ee      	b.n	80022e4 <__libc_init_array+0xc>
 8002306:	f855 3b04 	ldr.w	r3, [r5], #4
 800230a:	4798      	blx	r3
 800230c:	3601      	adds	r6, #1
 800230e:	e7f2      	b.n	80022f6 <__libc_init_array+0x1e>
 8002310:	0800331c 	.word	0x0800331c
 8002314:	0800331c 	.word	0x0800331c
 8002318:	0800331c 	.word	0x0800331c
 800231c:	08003320 	.word	0x08003320

08002320 <memset>:
 8002320:	4402      	add	r2, r0
 8002322:	4603      	mov	r3, r0
 8002324:	4293      	cmp	r3, r2
 8002326:	d100      	bne.n	800232a <memset+0xa>
 8002328:	4770      	bx	lr
 800232a:	f803 1b01 	strb.w	r1, [r3], #1
 800232e:	e7f9      	b.n	8002324 <memset+0x4>

08002330 <iprintf>:
 8002330:	b40f      	push	{r0, r1, r2, r3}
 8002332:	4b0a      	ldr	r3, [pc, #40]	; (800235c <iprintf+0x2c>)
 8002334:	b513      	push	{r0, r1, r4, lr}
 8002336:	681c      	ldr	r4, [r3, #0]
 8002338:	b124      	cbz	r4, 8002344 <iprintf+0x14>
 800233a:	69a3      	ldr	r3, [r4, #24]
 800233c:	b913      	cbnz	r3, 8002344 <iprintf+0x14>
 800233e:	4620      	mov	r0, r4
 8002340:	f000 f866 	bl	8002410 <__sinit>
 8002344:	ab05      	add	r3, sp, #20
 8002346:	9a04      	ldr	r2, [sp, #16]
 8002348:	68a1      	ldr	r1, [r4, #8]
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	4620      	mov	r0, r4
 800234e:	f000 f9bd 	bl	80026cc <_vfiprintf_r>
 8002352:	b002      	add	sp, #8
 8002354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002358:	b004      	add	sp, #16
 800235a:	4770      	bx	lr
 800235c:	2000000c 	.word	0x2000000c

08002360 <std>:
 8002360:	2300      	movs	r3, #0
 8002362:	b510      	push	{r4, lr}
 8002364:	4604      	mov	r4, r0
 8002366:	e9c0 3300 	strd	r3, r3, [r0]
 800236a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800236e:	6083      	str	r3, [r0, #8]
 8002370:	8181      	strh	r1, [r0, #12]
 8002372:	6643      	str	r3, [r0, #100]	; 0x64
 8002374:	81c2      	strh	r2, [r0, #14]
 8002376:	6183      	str	r3, [r0, #24]
 8002378:	4619      	mov	r1, r3
 800237a:	2208      	movs	r2, #8
 800237c:	305c      	adds	r0, #92	; 0x5c
 800237e:	f7ff ffcf 	bl	8002320 <memset>
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <std+0x38>)
 8002384:	6263      	str	r3, [r4, #36]	; 0x24
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <std+0x3c>)
 8002388:	62a3      	str	r3, [r4, #40]	; 0x28
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <std+0x40>)
 800238c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <std+0x44>)
 8002390:	6224      	str	r4, [r4, #32]
 8002392:	6323      	str	r3, [r4, #48]	; 0x30
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop
 8002398:	08002c75 	.word	0x08002c75
 800239c:	08002c97 	.word	0x08002c97
 80023a0:	08002ccf 	.word	0x08002ccf
 80023a4:	08002cf3 	.word	0x08002cf3

080023a8 <_cleanup_r>:
 80023a8:	4901      	ldr	r1, [pc, #4]	; (80023b0 <_cleanup_r+0x8>)
 80023aa:	f000 b8af 	b.w	800250c <_fwalk_reent>
 80023ae:	bf00      	nop
 80023b0:	08002fcd 	.word	0x08002fcd

080023b4 <__sfmoreglue>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	2268      	movs	r2, #104	; 0x68
 80023b8:	1e4d      	subs	r5, r1, #1
 80023ba:	4355      	muls	r5, r2
 80023bc:	460e      	mov	r6, r1
 80023be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80023c2:	f000 f8e5 	bl	8002590 <_malloc_r>
 80023c6:	4604      	mov	r4, r0
 80023c8:	b140      	cbz	r0, 80023dc <__sfmoreglue+0x28>
 80023ca:	2100      	movs	r1, #0
 80023cc:	e9c0 1600 	strd	r1, r6, [r0]
 80023d0:	300c      	adds	r0, #12
 80023d2:	60a0      	str	r0, [r4, #8]
 80023d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023d8:	f7ff ffa2 	bl	8002320 <memset>
 80023dc:	4620      	mov	r0, r4
 80023de:	bd70      	pop	{r4, r5, r6, pc}

080023e0 <__sfp_lock_acquire>:
 80023e0:	4801      	ldr	r0, [pc, #4]	; (80023e8 <__sfp_lock_acquire+0x8>)
 80023e2:	f000 b8b3 	b.w	800254c <__retarget_lock_acquire_recursive>
 80023e6:	bf00      	nop
 80023e8:	20000169 	.word	0x20000169

080023ec <__sfp_lock_release>:
 80023ec:	4801      	ldr	r0, [pc, #4]	; (80023f4 <__sfp_lock_release+0x8>)
 80023ee:	f000 b8ae 	b.w	800254e <__retarget_lock_release_recursive>
 80023f2:	bf00      	nop
 80023f4:	20000169 	.word	0x20000169

080023f8 <__sinit_lock_acquire>:
 80023f8:	4801      	ldr	r0, [pc, #4]	; (8002400 <__sinit_lock_acquire+0x8>)
 80023fa:	f000 b8a7 	b.w	800254c <__retarget_lock_acquire_recursive>
 80023fe:	bf00      	nop
 8002400:	2000016a 	.word	0x2000016a

08002404 <__sinit_lock_release>:
 8002404:	4801      	ldr	r0, [pc, #4]	; (800240c <__sinit_lock_release+0x8>)
 8002406:	f000 b8a2 	b.w	800254e <__retarget_lock_release_recursive>
 800240a:	bf00      	nop
 800240c:	2000016a 	.word	0x2000016a

08002410 <__sinit>:
 8002410:	b510      	push	{r4, lr}
 8002412:	4604      	mov	r4, r0
 8002414:	f7ff fff0 	bl	80023f8 <__sinit_lock_acquire>
 8002418:	69a3      	ldr	r3, [r4, #24]
 800241a:	b11b      	cbz	r3, 8002424 <__sinit+0x14>
 800241c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002420:	f7ff bff0 	b.w	8002404 <__sinit_lock_release>
 8002424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002428:	6523      	str	r3, [r4, #80]	; 0x50
 800242a:	4b13      	ldr	r3, [pc, #76]	; (8002478 <__sinit+0x68>)
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <__sinit+0x6c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	62a2      	str	r2, [r4, #40]	; 0x28
 8002432:	42a3      	cmp	r3, r4
 8002434:	bf04      	itt	eq
 8002436:	2301      	moveq	r3, #1
 8002438:	61a3      	streq	r3, [r4, #24]
 800243a:	4620      	mov	r0, r4
 800243c:	f000 f820 	bl	8002480 <__sfp>
 8002440:	6060      	str	r0, [r4, #4]
 8002442:	4620      	mov	r0, r4
 8002444:	f000 f81c 	bl	8002480 <__sfp>
 8002448:	60a0      	str	r0, [r4, #8]
 800244a:	4620      	mov	r0, r4
 800244c:	f000 f818 	bl	8002480 <__sfp>
 8002450:	2200      	movs	r2, #0
 8002452:	60e0      	str	r0, [r4, #12]
 8002454:	2104      	movs	r1, #4
 8002456:	6860      	ldr	r0, [r4, #4]
 8002458:	f7ff ff82 	bl	8002360 <std>
 800245c:	68a0      	ldr	r0, [r4, #8]
 800245e:	2201      	movs	r2, #1
 8002460:	2109      	movs	r1, #9
 8002462:	f7ff ff7d 	bl	8002360 <std>
 8002466:	68e0      	ldr	r0, [r4, #12]
 8002468:	2202      	movs	r2, #2
 800246a:	2112      	movs	r1, #18
 800246c:	f7ff ff78 	bl	8002360 <std>
 8002470:	2301      	movs	r3, #1
 8002472:	61a3      	str	r3, [r4, #24]
 8002474:	e7d2      	b.n	800241c <__sinit+0xc>
 8002476:	bf00      	nop
 8002478:	0800327c 	.word	0x0800327c
 800247c:	080023a9 	.word	0x080023a9

08002480 <__sfp>:
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	4607      	mov	r7, r0
 8002484:	f7ff ffac 	bl	80023e0 <__sfp_lock_acquire>
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <__sfp+0x84>)
 800248a:	681e      	ldr	r6, [r3, #0]
 800248c:	69b3      	ldr	r3, [r6, #24]
 800248e:	b913      	cbnz	r3, 8002496 <__sfp+0x16>
 8002490:	4630      	mov	r0, r6
 8002492:	f7ff ffbd 	bl	8002410 <__sinit>
 8002496:	3648      	adds	r6, #72	; 0x48
 8002498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800249c:	3b01      	subs	r3, #1
 800249e:	d503      	bpl.n	80024a8 <__sfp+0x28>
 80024a0:	6833      	ldr	r3, [r6, #0]
 80024a2:	b30b      	cbz	r3, 80024e8 <__sfp+0x68>
 80024a4:	6836      	ldr	r6, [r6, #0]
 80024a6:	e7f7      	b.n	8002498 <__sfp+0x18>
 80024a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024ac:	b9d5      	cbnz	r5, 80024e4 <__sfp+0x64>
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <__sfp+0x88>)
 80024b0:	60e3      	str	r3, [r4, #12]
 80024b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80024b6:	6665      	str	r5, [r4, #100]	; 0x64
 80024b8:	f000 f847 	bl	800254a <__retarget_lock_init_recursive>
 80024bc:	f7ff ff96 	bl	80023ec <__sfp_lock_release>
 80024c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80024c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80024c8:	6025      	str	r5, [r4, #0]
 80024ca:	61a5      	str	r5, [r4, #24]
 80024cc:	2208      	movs	r2, #8
 80024ce:	4629      	mov	r1, r5
 80024d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80024d4:	f7ff ff24 	bl	8002320 <memset>
 80024d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80024dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80024e0:	4620      	mov	r0, r4
 80024e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024e4:	3468      	adds	r4, #104	; 0x68
 80024e6:	e7d9      	b.n	800249c <__sfp+0x1c>
 80024e8:	2104      	movs	r1, #4
 80024ea:	4638      	mov	r0, r7
 80024ec:	f7ff ff62 	bl	80023b4 <__sfmoreglue>
 80024f0:	4604      	mov	r4, r0
 80024f2:	6030      	str	r0, [r6, #0]
 80024f4:	2800      	cmp	r0, #0
 80024f6:	d1d5      	bne.n	80024a4 <__sfp+0x24>
 80024f8:	f7ff ff78 	bl	80023ec <__sfp_lock_release>
 80024fc:	230c      	movs	r3, #12
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	e7ee      	b.n	80024e0 <__sfp+0x60>
 8002502:	bf00      	nop
 8002504:	0800327c 	.word	0x0800327c
 8002508:	ffff0001 	.word	0xffff0001

0800250c <_fwalk_reent>:
 800250c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002510:	4606      	mov	r6, r0
 8002512:	4688      	mov	r8, r1
 8002514:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002518:	2700      	movs	r7, #0
 800251a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800251e:	f1b9 0901 	subs.w	r9, r9, #1
 8002522:	d505      	bpl.n	8002530 <_fwalk_reent+0x24>
 8002524:	6824      	ldr	r4, [r4, #0]
 8002526:	2c00      	cmp	r4, #0
 8002528:	d1f7      	bne.n	800251a <_fwalk_reent+0xe>
 800252a:	4638      	mov	r0, r7
 800252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002530:	89ab      	ldrh	r3, [r5, #12]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d907      	bls.n	8002546 <_fwalk_reent+0x3a>
 8002536:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800253a:	3301      	adds	r3, #1
 800253c:	d003      	beq.n	8002546 <_fwalk_reent+0x3a>
 800253e:	4629      	mov	r1, r5
 8002540:	4630      	mov	r0, r6
 8002542:	47c0      	blx	r8
 8002544:	4307      	orrs	r7, r0
 8002546:	3568      	adds	r5, #104	; 0x68
 8002548:	e7e9      	b.n	800251e <_fwalk_reent+0x12>

0800254a <__retarget_lock_init_recursive>:
 800254a:	4770      	bx	lr

0800254c <__retarget_lock_acquire_recursive>:
 800254c:	4770      	bx	lr

0800254e <__retarget_lock_release_recursive>:
 800254e:	4770      	bx	lr

08002550 <sbrk_aligned>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4e0e      	ldr	r6, [pc, #56]	; (800258c <sbrk_aligned+0x3c>)
 8002554:	460c      	mov	r4, r1
 8002556:	6831      	ldr	r1, [r6, #0]
 8002558:	4605      	mov	r5, r0
 800255a:	b911      	cbnz	r1, 8002562 <sbrk_aligned+0x12>
 800255c:	f000 fb7a 	bl	8002c54 <_sbrk_r>
 8002560:	6030      	str	r0, [r6, #0]
 8002562:	4621      	mov	r1, r4
 8002564:	4628      	mov	r0, r5
 8002566:	f000 fb75 	bl	8002c54 <_sbrk_r>
 800256a:	1c43      	adds	r3, r0, #1
 800256c:	d00a      	beq.n	8002584 <sbrk_aligned+0x34>
 800256e:	1cc4      	adds	r4, r0, #3
 8002570:	f024 0403 	bic.w	r4, r4, #3
 8002574:	42a0      	cmp	r0, r4
 8002576:	d007      	beq.n	8002588 <sbrk_aligned+0x38>
 8002578:	1a21      	subs	r1, r4, r0
 800257a:	4628      	mov	r0, r5
 800257c:	f000 fb6a 	bl	8002c54 <_sbrk_r>
 8002580:	3001      	adds	r0, #1
 8002582:	d101      	bne.n	8002588 <sbrk_aligned+0x38>
 8002584:	f04f 34ff 	mov.w	r4, #4294967295
 8002588:	4620      	mov	r0, r4
 800258a:	bd70      	pop	{r4, r5, r6, pc}
 800258c:	20000170 	.word	0x20000170

08002590 <_malloc_r>:
 8002590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002594:	1ccd      	adds	r5, r1, #3
 8002596:	f025 0503 	bic.w	r5, r5, #3
 800259a:	3508      	adds	r5, #8
 800259c:	2d0c      	cmp	r5, #12
 800259e:	bf38      	it	cc
 80025a0:	250c      	movcc	r5, #12
 80025a2:	2d00      	cmp	r5, #0
 80025a4:	4607      	mov	r7, r0
 80025a6:	db01      	blt.n	80025ac <_malloc_r+0x1c>
 80025a8:	42a9      	cmp	r1, r5
 80025aa:	d905      	bls.n	80025b8 <_malloc_r+0x28>
 80025ac:	230c      	movs	r3, #12
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	2600      	movs	r6, #0
 80025b2:	4630      	mov	r0, r6
 80025b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025b8:	4e2e      	ldr	r6, [pc, #184]	; (8002674 <_malloc_r+0xe4>)
 80025ba:	f000 fdbb 	bl	8003134 <__malloc_lock>
 80025be:	6833      	ldr	r3, [r6, #0]
 80025c0:	461c      	mov	r4, r3
 80025c2:	bb34      	cbnz	r4, 8002612 <_malloc_r+0x82>
 80025c4:	4629      	mov	r1, r5
 80025c6:	4638      	mov	r0, r7
 80025c8:	f7ff ffc2 	bl	8002550 <sbrk_aligned>
 80025cc:	1c43      	adds	r3, r0, #1
 80025ce:	4604      	mov	r4, r0
 80025d0:	d14d      	bne.n	800266e <_malloc_r+0xde>
 80025d2:	6834      	ldr	r4, [r6, #0]
 80025d4:	4626      	mov	r6, r4
 80025d6:	2e00      	cmp	r6, #0
 80025d8:	d140      	bne.n	800265c <_malloc_r+0xcc>
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	4631      	mov	r1, r6
 80025de:	4638      	mov	r0, r7
 80025e0:	eb04 0803 	add.w	r8, r4, r3
 80025e4:	f000 fb36 	bl	8002c54 <_sbrk_r>
 80025e8:	4580      	cmp	r8, r0
 80025ea:	d13a      	bne.n	8002662 <_malloc_r+0xd2>
 80025ec:	6821      	ldr	r1, [r4, #0]
 80025ee:	3503      	adds	r5, #3
 80025f0:	1a6d      	subs	r5, r5, r1
 80025f2:	f025 0503 	bic.w	r5, r5, #3
 80025f6:	3508      	adds	r5, #8
 80025f8:	2d0c      	cmp	r5, #12
 80025fa:	bf38      	it	cc
 80025fc:	250c      	movcc	r5, #12
 80025fe:	4629      	mov	r1, r5
 8002600:	4638      	mov	r0, r7
 8002602:	f7ff ffa5 	bl	8002550 <sbrk_aligned>
 8002606:	3001      	adds	r0, #1
 8002608:	d02b      	beq.n	8002662 <_malloc_r+0xd2>
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	442b      	add	r3, r5
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	e00e      	b.n	8002630 <_malloc_r+0xa0>
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	1b52      	subs	r2, r2, r5
 8002616:	d41e      	bmi.n	8002656 <_malloc_r+0xc6>
 8002618:	2a0b      	cmp	r2, #11
 800261a:	d916      	bls.n	800264a <_malloc_r+0xba>
 800261c:	1961      	adds	r1, r4, r5
 800261e:	42a3      	cmp	r3, r4
 8002620:	6025      	str	r5, [r4, #0]
 8002622:	bf18      	it	ne
 8002624:	6059      	strne	r1, [r3, #4]
 8002626:	6863      	ldr	r3, [r4, #4]
 8002628:	bf08      	it	eq
 800262a:	6031      	streq	r1, [r6, #0]
 800262c:	5162      	str	r2, [r4, r5]
 800262e:	604b      	str	r3, [r1, #4]
 8002630:	4638      	mov	r0, r7
 8002632:	f104 060b 	add.w	r6, r4, #11
 8002636:	f000 fd83 	bl	8003140 <__malloc_unlock>
 800263a:	f026 0607 	bic.w	r6, r6, #7
 800263e:	1d23      	adds	r3, r4, #4
 8002640:	1af2      	subs	r2, r6, r3
 8002642:	d0b6      	beq.n	80025b2 <_malloc_r+0x22>
 8002644:	1b9b      	subs	r3, r3, r6
 8002646:	50a3      	str	r3, [r4, r2]
 8002648:	e7b3      	b.n	80025b2 <_malloc_r+0x22>
 800264a:	6862      	ldr	r2, [r4, #4]
 800264c:	42a3      	cmp	r3, r4
 800264e:	bf0c      	ite	eq
 8002650:	6032      	streq	r2, [r6, #0]
 8002652:	605a      	strne	r2, [r3, #4]
 8002654:	e7ec      	b.n	8002630 <_malloc_r+0xa0>
 8002656:	4623      	mov	r3, r4
 8002658:	6864      	ldr	r4, [r4, #4]
 800265a:	e7b2      	b.n	80025c2 <_malloc_r+0x32>
 800265c:	4634      	mov	r4, r6
 800265e:	6876      	ldr	r6, [r6, #4]
 8002660:	e7b9      	b.n	80025d6 <_malloc_r+0x46>
 8002662:	230c      	movs	r3, #12
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	4638      	mov	r0, r7
 8002668:	f000 fd6a 	bl	8003140 <__malloc_unlock>
 800266c:	e7a1      	b.n	80025b2 <_malloc_r+0x22>
 800266e:	6025      	str	r5, [r4, #0]
 8002670:	e7de      	b.n	8002630 <_malloc_r+0xa0>
 8002672:	bf00      	nop
 8002674:	2000016c 	.word	0x2000016c

08002678 <__sfputc_r>:
 8002678:	6893      	ldr	r3, [r2, #8]
 800267a:	3b01      	subs	r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	b410      	push	{r4}
 8002680:	6093      	str	r3, [r2, #8]
 8002682:	da08      	bge.n	8002696 <__sfputc_r+0x1e>
 8002684:	6994      	ldr	r4, [r2, #24]
 8002686:	42a3      	cmp	r3, r4
 8002688:	db01      	blt.n	800268e <__sfputc_r+0x16>
 800268a:	290a      	cmp	r1, #10
 800268c:	d103      	bne.n	8002696 <__sfputc_r+0x1e>
 800268e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002692:	f000 bb33 	b.w	8002cfc <__swbuf_r>
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	1c58      	adds	r0, r3, #1
 800269a:	6010      	str	r0, [r2, #0]
 800269c:	7019      	strb	r1, [r3, #0]
 800269e:	4608      	mov	r0, r1
 80026a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <__sfputs_r>:
 80026a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a8:	4606      	mov	r6, r0
 80026aa:	460f      	mov	r7, r1
 80026ac:	4614      	mov	r4, r2
 80026ae:	18d5      	adds	r5, r2, r3
 80026b0:	42ac      	cmp	r4, r5
 80026b2:	d101      	bne.n	80026b8 <__sfputs_r+0x12>
 80026b4:	2000      	movs	r0, #0
 80026b6:	e007      	b.n	80026c8 <__sfputs_r+0x22>
 80026b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026bc:	463a      	mov	r2, r7
 80026be:	4630      	mov	r0, r6
 80026c0:	f7ff ffda 	bl	8002678 <__sfputc_r>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d1f3      	bne.n	80026b0 <__sfputs_r+0xa>
 80026c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080026cc <_vfiprintf_r>:
 80026cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	460d      	mov	r5, r1
 80026d2:	b09d      	sub	sp, #116	; 0x74
 80026d4:	4614      	mov	r4, r2
 80026d6:	4698      	mov	r8, r3
 80026d8:	4606      	mov	r6, r0
 80026da:	b118      	cbz	r0, 80026e4 <_vfiprintf_r+0x18>
 80026dc:	6983      	ldr	r3, [r0, #24]
 80026de:	b90b      	cbnz	r3, 80026e4 <_vfiprintf_r+0x18>
 80026e0:	f7ff fe96 	bl	8002410 <__sinit>
 80026e4:	4b89      	ldr	r3, [pc, #548]	; (800290c <_vfiprintf_r+0x240>)
 80026e6:	429d      	cmp	r5, r3
 80026e8:	d11b      	bne.n	8002722 <_vfiprintf_r+0x56>
 80026ea:	6875      	ldr	r5, [r6, #4]
 80026ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026ee:	07d9      	lsls	r1, r3, #31
 80026f0:	d405      	bmi.n	80026fe <_vfiprintf_r+0x32>
 80026f2:	89ab      	ldrh	r3, [r5, #12]
 80026f4:	059a      	lsls	r2, r3, #22
 80026f6:	d402      	bmi.n	80026fe <_vfiprintf_r+0x32>
 80026f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026fa:	f7ff ff27 	bl	800254c <__retarget_lock_acquire_recursive>
 80026fe:	89ab      	ldrh	r3, [r5, #12]
 8002700:	071b      	lsls	r3, r3, #28
 8002702:	d501      	bpl.n	8002708 <_vfiprintf_r+0x3c>
 8002704:	692b      	ldr	r3, [r5, #16]
 8002706:	b9eb      	cbnz	r3, 8002744 <_vfiprintf_r+0x78>
 8002708:	4629      	mov	r1, r5
 800270a:	4630      	mov	r0, r6
 800270c:	f000 fb5a 	bl	8002dc4 <__swsetup_r>
 8002710:	b1c0      	cbz	r0, 8002744 <_vfiprintf_r+0x78>
 8002712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002714:	07dc      	lsls	r4, r3, #31
 8002716:	d50e      	bpl.n	8002736 <_vfiprintf_r+0x6a>
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	b01d      	add	sp, #116	; 0x74
 800271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002722:	4b7b      	ldr	r3, [pc, #492]	; (8002910 <_vfiprintf_r+0x244>)
 8002724:	429d      	cmp	r5, r3
 8002726:	d101      	bne.n	800272c <_vfiprintf_r+0x60>
 8002728:	68b5      	ldr	r5, [r6, #8]
 800272a:	e7df      	b.n	80026ec <_vfiprintf_r+0x20>
 800272c:	4b79      	ldr	r3, [pc, #484]	; (8002914 <_vfiprintf_r+0x248>)
 800272e:	429d      	cmp	r5, r3
 8002730:	bf08      	it	eq
 8002732:	68f5      	ldreq	r5, [r6, #12]
 8002734:	e7da      	b.n	80026ec <_vfiprintf_r+0x20>
 8002736:	89ab      	ldrh	r3, [r5, #12]
 8002738:	0598      	lsls	r0, r3, #22
 800273a:	d4ed      	bmi.n	8002718 <_vfiprintf_r+0x4c>
 800273c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800273e:	f7ff ff06 	bl	800254e <__retarget_lock_release_recursive>
 8002742:	e7e9      	b.n	8002718 <_vfiprintf_r+0x4c>
 8002744:	2300      	movs	r3, #0
 8002746:	9309      	str	r3, [sp, #36]	; 0x24
 8002748:	2320      	movs	r3, #32
 800274a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800274e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002752:	2330      	movs	r3, #48	; 0x30
 8002754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002918 <_vfiprintf_r+0x24c>
 8002758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800275c:	f04f 0901 	mov.w	r9, #1
 8002760:	4623      	mov	r3, r4
 8002762:	469a      	mov	sl, r3
 8002764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002768:	b10a      	cbz	r2, 800276e <_vfiprintf_r+0xa2>
 800276a:	2a25      	cmp	r2, #37	; 0x25
 800276c:	d1f9      	bne.n	8002762 <_vfiprintf_r+0x96>
 800276e:	ebba 0b04 	subs.w	fp, sl, r4
 8002772:	d00b      	beq.n	800278c <_vfiprintf_r+0xc0>
 8002774:	465b      	mov	r3, fp
 8002776:	4622      	mov	r2, r4
 8002778:	4629      	mov	r1, r5
 800277a:	4630      	mov	r0, r6
 800277c:	f7ff ff93 	bl	80026a6 <__sfputs_r>
 8002780:	3001      	adds	r0, #1
 8002782:	f000 80aa 	beq.w	80028da <_vfiprintf_r+0x20e>
 8002786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002788:	445a      	add	r2, fp
 800278a:	9209      	str	r2, [sp, #36]	; 0x24
 800278c:	f89a 3000 	ldrb.w	r3, [sl]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a2 	beq.w	80028da <_vfiprintf_r+0x20e>
 8002796:	2300      	movs	r3, #0
 8002798:	f04f 32ff 	mov.w	r2, #4294967295
 800279c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027a0:	f10a 0a01 	add.w	sl, sl, #1
 80027a4:	9304      	str	r3, [sp, #16]
 80027a6:	9307      	str	r3, [sp, #28]
 80027a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027ac:	931a      	str	r3, [sp, #104]	; 0x68
 80027ae:	4654      	mov	r4, sl
 80027b0:	2205      	movs	r2, #5
 80027b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027b6:	4858      	ldr	r0, [pc, #352]	; (8002918 <_vfiprintf_r+0x24c>)
 80027b8:	f7fd fd12 	bl	80001e0 <memchr>
 80027bc:	9a04      	ldr	r2, [sp, #16]
 80027be:	b9d8      	cbnz	r0, 80027f8 <_vfiprintf_r+0x12c>
 80027c0:	06d1      	lsls	r1, r2, #27
 80027c2:	bf44      	itt	mi
 80027c4:	2320      	movmi	r3, #32
 80027c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027ca:	0713      	lsls	r3, r2, #28
 80027cc:	bf44      	itt	mi
 80027ce:	232b      	movmi	r3, #43	; 0x2b
 80027d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80027d4:	f89a 3000 	ldrb.w	r3, [sl]
 80027d8:	2b2a      	cmp	r3, #42	; 0x2a
 80027da:	d015      	beq.n	8002808 <_vfiprintf_r+0x13c>
 80027dc:	9a07      	ldr	r2, [sp, #28]
 80027de:	4654      	mov	r4, sl
 80027e0:	2000      	movs	r0, #0
 80027e2:	f04f 0c0a 	mov.w	ip, #10
 80027e6:	4621      	mov	r1, r4
 80027e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027ec:	3b30      	subs	r3, #48	; 0x30
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	d94e      	bls.n	8002890 <_vfiprintf_r+0x1c4>
 80027f2:	b1b0      	cbz	r0, 8002822 <_vfiprintf_r+0x156>
 80027f4:	9207      	str	r2, [sp, #28]
 80027f6:	e014      	b.n	8002822 <_vfiprintf_r+0x156>
 80027f8:	eba0 0308 	sub.w	r3, r0, r8
 80027fc:	fa09 f303 	lsl.w	r3, r9, r3
 8002800:	4313      	orrs	r3, r2
 8002802:	9304      	str	r3, [sp, #16]
 8002804:	46a2      	mov	sl, r4
 8002806:	e7d2      	b.n	80027ae <_vfiprintf_r+0xe2>
 8002808:	9b03      	ldr	r3, [sp, #12]
 800280a:	1d19      	adds	r1, r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	9103      	str	r1, [sp, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	bfbb      	ittet	lt
 8002814:	425b      	neglt	r3, r3
 8002816:	f042 0202 	orrlt.w	r2, r2, #2
 800281a:	9307      	strge	r3, [sp, #28]
 800281c:	9307      	strlt	r3, [sp, #28]
 800281e:	bfb8      	it	lt
 8002820:	9204      	strlt	r2, [sp, #16]
 8002822:	7823      	ldrb	r3, [r4, #0]
 8002824:	2b2e      	cmp	r3, #46	; 0x2e
 8002826:	d10c      	bne.n	8002842 <_vfiprintf_r+0x176>
 8002828:	7863      	ldrb	r3, [r4, #1]
 800282a:	2b2a      	cmp	r3, #42	; 0x2a
 800282c:	d135      	bne.n	800289a <_vfiprintf_r+0x1ce>
 800282e:	9b03      	ldr	r3, [sp, #12]
 8002830:	1d1a      	adds	r2, r3, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	9203      	str	r2, [sp, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	bfb8      	it	lt
 800283a:	f04f 33ff 	movlt.w	r3, #4294967295
 800283e:	3402      	adds	r4, #2
 8002840:	9305      	str	r3, [sp, #20]
 8002842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002928 <_vfiprintf_r+0x25c>
 8002846:	7821      	ldrb	r1, [r4, #0]
 8002848:	2203      	movs	r2, #3
 800284a:	4650      	mov	r0, sl
 800284c:	f7fd fcc8 	bl	80001e0 <memchr>
 8002850:	b140      	cbz	r0, 8002864 <_vfiprintf_r+0x198>
 8002852:	2340      	movs	r3, #64	; 0x40
 8002854:	eba0 000a 	sub.w	r0, r0, sl
 8002858:	fa03 f000 	lsl.w	r0, r3, r0
 800285c:	9b04      	ldr	r3, [sp, #16]
 800285e:	4303      	orrs	r3, r0
 8002860:	3401      	adds	r4, #1
 8002862:	9304      	str	r3, [sp, #16]
 8002864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002868:	482c      	ldr	r0, [pc, #176]	; (800291c <_vfiprintf_r+0x250>)
 800286a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800286e:	2206      	movs	r2, #6
 8002870:	f7fd fcb6 	bl	80001e0 <memchr>
 8002874:	2800      	cmp	r0, #0
 8002876:	d03f      	beq.n	80028f8 <_vfiprintf_r+0x22c>
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <_vfiprintf_r+0x254>)
 800287a:	bb1b      	cbnz	r3, 80028c4 <_vfiprintf_r+0x1f8>
 800287c:	9b03      	ldr	r3, [sp, #12]
 800287e:	3307      	adds	r3, #7
 8002880:	f023 0307 	bic.w	r3, r3, #7
 8002884:	3308      	adds	r3, #8
 8002886:	9303      	str	r3, [sp, #12]
 8002888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800288a:	443b      	add	r3, r7
 800288c:	9309      	str	r3, [sp, #36]	; 0x24
 800288e:	e767      	b.n	8002760 <_vfiprintf_r+0x94>
 8002890:	fb0c 3202 	mla	r2, ip, r2, r3
 8002894:	460c      	mov	r4, r1
 8002896:	2001      	movs	r0, #1
 8002898:	e7a5      	b.n	80027e6 <_vfiprintf_r+0x11a>
 800289a:	2300      	movs	r3, #0
 800289c:	3401      	adds	r4, #1
 800289e:	9305      	str	r3, [sp, #20]
 80028a0:	4619      	mov	r1, r3
 80028a2:	f04f 0c0a 	mov.w	ip, #10
 80028a6:	4620      	mov	r0, r4
 80028a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028ac:	3a30      	subs	r2, #48	; 0x30
 80028ae:	2a09      	cmp	r2, #9
 80028b0:	d903      	bls.n	80028ba <_vfiprintf_r+0x1ee>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0c5      	beq.n	8002842 <_vfiprintf_r+0x176>
 80028b6:	9105      	str	r1, [sp, #20]
 80028b8:	e7c3      	b.n	8002842 <_vfiprintf_r+0x176>
 80028ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80028be:	4604      	mov	r4, r0
 80028c0:	2301      	movs	r3, #1
 80028c2:	e7f0      	b.n	80028a6 <_vfiprintf_r+0x1da>
 80028c4:	ab03      	add	r3, sp, #12
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	462a      	mov	r2, r5
 80028ca:	4b16      	ldr	r3, [pc, #88]	; (8002924 <_vfiprintf_r+0x258>)
 80028cc:	a904      	add	r1, sp, #16
 80028ce:	4630      	mov	r0, r6
 80028d0:	f3af 8000 	nop.w
 80028d4:	4607      	mov	r7, r0
 80028d6:	1c78      	adds	r0, r7, #1
 80028d8:	d1d6      	bne.n	8002888 <_vfiprintf_r+0x1bc>
 80028da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028dc:	07d9      	lsls	r1, r3, #31
 80028de:	d405      	bmi.n	80028ec <_vfiprintf_r+0x220>
 80028e0:	89ab      	ldrh	r3, [r5, #12]
 80028e2:	059a      	lsls	r2, r3, #22
 80028e4:	d402      	bmi.n	80028ec <_vfiprintf_r+0x220>
 80028e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028e8:	f7ff fe31 	bl	800254e <__retarget_lock_release_recursive>
 80028ec:	89ab      	ldrh	r3, [r5, #12]
 80028ee:	065b      	lsls	r3, r3, #25
 80028f0:	f53f af12 	bmi.w	8002718 <_vfiprintf_r+0x4c>
 80028f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028f6:	e711      	b.n	800271c <_vfiprintf_r+0x50>
 80028f8:	ab03      	add	r3, sp, #12
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	462a      	mov	r2, r5
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <_vfiprintf_r+0x258>)
 8002900:	a904      	add	r1, sp, #16
 8002902:	4630      	mov	r0, r6
 8002904:	f000 f880 	bl	8002a08 <_printf_i>
 8002908:	e7e4      	b.n	80028d4 <_vfiprintf_r+0x208>
 800290a:	bf00      	nop
 800290c:	080032a0 	.word	0x080032a0
 8002910:	080032c0 	.word	0x080032c0
 8002914:	08003280 	.word	0x08003280
 8002918:	080032e0 	.word	0x080032e0
 800291c:	080032ea 	.word	0x080032ea
 8002920:	00000000 	.word	0x00000000
 8002924:	080026a7 	.word	0x080026a7
 8002928:	080032e6 	.word	0x080032e6

0800292c <_printf_common>:
 800292c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002930:	4616      	mov	r6, r2
 8002932:	4699      	mov	r9, r3
 8002934:	688a      	ldr	r2, [r1, #8]
 8002936:	690b      	ldr	r3, [r1, #16]
 8002938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800293c:	4293      	cmp	r3, r2
 800293e:	bfb8      	it	lt
 8002940:	4613      	movlt	r3, r2
 8002942:	6033      	str	r3, [r6, #0]
 8002944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002948:	4607      	mov	r7, r0
 800294a:	460c      	mov	r4, r1
 800294c:	b10a      	cbz	r2, 8002952 <_printf_common+0x26>
 800294e:	3301      	adds	r3, #1
 8002950:	6033      	str	r3, [r6, #0]
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	0699      	lsls	r1, r3, #26
 8002956:	bf42      	ittt	mi
 8002958:	6833      	ldrmi	r3, [r6, #0]
 800295a:	3302      	addmi	r3, #2
 800295c:	6033      	strmi	r3, [r6, #0]
 800295e:	6825      	ldr	r5, [r4, #0]
 8002960:	f015 0506 	ands.w	r5, r5, #6
 8002964:	d106      	bne.n	8002974 <_printf_common+0x48>
 8002966:	f104 0a19 	add.w	sl, r4, #25
 800296a:	68e3      	ldr	r3, [r4, #12]
 800296c:	6832      	ldr	r2, [r6, #0]
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	42ab      	cmp	r3, r5
 8002972:	dc26      	bgt.n	80029c2 <_printf_common+0x96>
 8002974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002978:	1e13      	subs	r3, r2, #0
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	bf18      	it	ne
 800297e:	2301      	movne	r3, #1
 8002980:	0692      	lsls	r2, r2, #26
 8002982:	d42b      	bmi.n	80029dc <_printf_common+0xb0>
 8002984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002988:	4649      	mov	r1, r9
 800298a:	4638      	mov	r0, r7
 800298c:	47c0      	blx	r8
 800298e:	3001      	adds	r0, #1
 8002990:	d01e      	beq.n	80029d0 <_printf_common+0xa4>
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	68e5      	ldr	r5, [r4, #12]
 8002996:	6832      	ldr	r2, [r6, #0]
 8002998:	f003 0306 	and.w	r3, r3, #6
 800299c:	2b04      	cmp	r3, #4
 800299e:	bf08      	it	eq
 80029a0:	1aad      	subeq	r5, r5, r2
 80029a2:	68a3      	ldr	r3, [r4, #8]
 80029a4:	6922      	ldr	r2, [r4, #16]
 80029a6:	bf0c      	ite	eq
 80029a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029ac:	2500      	movne	r5, #0
 80029ae:	4293      	cmp	r3, r2
 80029b0:	bfc4      	itt	gt
 80029b2:	1a9b      	subgt	r3, r3, r2
 80029b4:	18ed      	addgt	r5, r5, r3
 80029b6:	2600      	movs	r6, #0
 80029b8:	341a      	adds	r4, #26
 80029ba:	42b5      	cmp	r5, r6
 80029bc:	d11a      	bne.n	80029f4 <_printf_common+0xc8>
 80029be:	2000      	movs	r0, #0
 80029c0:	e008      	b.n	80029d4 <_printf_common+0xa8>
 80029c2:	2301      	movs	r3, #1
 80029c4:	4652      	mov	r2, sl
 80029c6:	4649      	mov	r1, r9
 80029c8:	4638      	mov	r0, r7
 80029ca:	47c0      	blx	r8
 80029cc:	3001      	adds	r0, #1
 80029ce:	d103      	bne.n	80029d8 <_printf_common+0xac>
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d8:	3501      	adds	r5, #1
 80029da:	e7c6      	b.n	800296a <_printf_common+0x3e>
 80029dc:	18e1      	adds	r1, r4, r3
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	2030      	movs	r0, #48	; 0x30
 80029e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029e6:	4422      	add	r2, r4
 80029e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029f0:	3302      	adds	r3, #2
 80029f2:	e7c7      	b.n	8002984 <_printf_common+0x58>
 80029f4:	2301      	movs	r3, #1
 80029f6:	4622      	mov	r2, r4
 80029f8:	4649      	mov	r1, r9
 80029fa:	4638      	mov	r0, r7
 80029fc:	47c0      	blx	r8
 80029fe:	3001      	adds	r0, #1
 8002a00:	d0e6      	beq.n	80029d0 <_printf_common+0xa4>
 8002a02:	3601      	adds	r6, #1
 8002a04:	e7d9      	b.n	80029ba <_printf_common+0x8e>
	...

08002a08 <_printf_i>:
 8002a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a0c:	7e0f      	ldrb	r7, [r1, #24]
 8002a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002a10:	2f78      	cmp	r7, #120	; 0x78
 8002a12:	4691      	mov	r9, r2
 8002a14:	4680      	mov	r8, r0
 8002a16:	460c      	mov	r4, r1
 8002a18:	469a      	mov	sl, r3
 8002a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002a1e:	d807      	bhi.n	8002a30 <_printf_i+0x28>
 8002a20:	2f62      	cmp	r7, #98	; 0x62
 8002a22:	d80a      	bhi.n	8002a3a <_printf_i+0x32>
 8002a24:	2f00      	cmp	r7, #0
 8002a26:	f000 80d8 	beq.w	8002bda <_printf_i+0x1d2>
 8002a2a:	2f58      	cmp	r7, #88	; 0x58
 8002a2c:	f000 80a3 	beq.w	8002b76 <_printf_i+0x16e>
 8002a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a38:	e03a      	b.n	8002ab0 <_printf_i+0xa8>
 8002a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a3e:	2b15      	cmp	r3, #21
 8002a40:	d8f6      	bhi.n	8002a30 <_printf_i+0x28>
 8002a42:	a101      	add	r1, pc, #4	; (adr r1, 8002a48 <_printf_i+0x40>)
 8002a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a48:	08002aa1 	.word	0x08002aa1
 8002a4c:	08002ab5 	.word	0x08002ab5
 8002a50:	08002a31 	.word	0x08002a31
 8002a54:	08002a31 	.word	0x08002a31
 8002a58:	08002a31 	.word	0x08002a31
 8002a5c:	08002a31 	.word	0x08002a31
 8002a60:	08002ab5 	.word	0x08002ab5
 8002a64:	08002a31 	.word	0x08002a31
 8002a68:	08002a31 	.word	0x08002a31
 8002a6c:	08002a31 	.word	0x08002a31
 8002a70:	08002a31 	.word	0x08002a31
 8002a74:	08002bc1 	.word	0x08002bc1
 8002a78:	08002ae5 	.word	0x08002ae5
 8002a7c:	08002ba3 	.word	0x08002ba3
 8002a80:	08002a31 	.word	0x08002a31
 8002a84:	08002a31 	.word	0x08002a31
 8002a88:	08002be3 	.word	0x08002be3
 8002a8c:	08002a31 	.word	0x08002a31
 8002a90:	08002ae5 	.word	0x08002ae5
 8002a94:	08002a31 	.word	0x08002a31
 8002a98:	08002a31 	.word	0x08002a31
 8002a9c:	08002bab 	.word	0x08002bab
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	1d1a      	adds	r2, r3, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	602a      	str	r2, [r5, #0]
 8002aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0a3      	b.n	8002bfc <_printf_i+0x1f4>
 8002ab4:	6820      	ldr	r0, [r4, #0]
 8002ab6:	6829      	ldr	r1, [r5, #0]
 8002ab8:	0606      	lsls	r6, r0, #24
 8002aba:	f101 0304 	add.w	r3, r1, #4
 8002abe:	d50a      	bpl.n	8002ad6 <_printf_i+0xce>
 8002ac0:	680e      	ldr	r6, [r1, #0]
 8002ac2:	602b      	str	r3, [r5, #0]
 8002ac4:	2e00      	cmp	r6, #0
 8002ac6:	da03      	bge.n	8002ad0 <_printf_i+0xc8>
 8002ac8:	232d      	movs	r3, #45	; 0x2d
 8002aca:	4276      	negs	r6, r6
 8002acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ad0:	485e      	ldr	r0, [pc, #376]	; (8002c4c <_printf_i+0x244>)
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	e019      	b.n	8002b0a <_printf_i+0x102>
 8002ad6:	680e      	ldr	r6, [r1, #0]
 8002ad8:	602b      	str	r3, [r5, #0]
 8002ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ade:	bf18      	it	ne
 8002ae0:	b236      	sxthne	r6, r6
 8002ae2:	e7ef      	b.n	8002ac4 <_printf_i+0xbc>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	6820      	ldr	r0, [r4, #0]
 8002ae8:	1d19      	adds	r1, r3, #4
 8002aea:	6029      	str	r1, [r5, #0]
 8002aec:	0601      	lsls	r1, r0, #24
 8002aee:	d501      	bpl.n	8002af4 <_printf_i+0xec>
 8002af0:	681e      	ldr	r6, [r3, #0]
 8002af2:	e002      	b.n	8002afa <_printf_i+0xf2>
 8002af4:	0646      	lsls	r6, r0, #25
 8002af6:	d5fb      	bpl.n	8002af0 <_printf_i+0xe8>
 8002af8:	881e      	ldrh	r6, [r3, #0]
 8002afa:	4854      	ldr	r0, [pc, #336]	; (8002c4c <_printf_i+0x244>)
 8002afc:	2f6f      	cmp	r7, #111	; 0x6f
 8002afe:	bf0c      	ite	eq
 8002b00:	2308      	moveq	r3, #8
 8002b02:	230a      	movne	r3, #10
 8002b04:	2100      	movs	r1, #0
 8002b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b0a:	6865      	ldr	r5, [r4, #4]
 8002b0c:	60a5      	str	r5, [r4, #8]
 8002b0e:	2d00      	cmp	r5, #0
 8002b10:	bfa2      	ittt	ge
 8002b12:	6821      	ldrge	r1, [r4, #0]
 8002b14:	f021 0104 	bicge.w	r1, r1, #4
 8002b18:	6021      	strge	r1, [r4, #0]
 8002b1a:	b90e      	cbnz	r6, 8002b20 <_printf_i+0x118>
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d04d      	beq.n	8002bbc <_printf_i+0x1b4>
 8002b20:	4615      	mov	r5, r2
 8002b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8002b26:	fb03 6711 	mls	r7, r3, r1, r6
 8002b2a:	5dc7      	ldrb	r7, [r0, r7]
 8002b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002b30:	4637      	mov	r7, r6
 8002b32:	42bb      	cmp	r3, r7
 8002b34:	460e      	mov	r6, r1
 8002b36:	d9f4      	bls.n	8002b22 <_printf_i+0x11a>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d10b      	bne.n	8002b54 <_printf_i+0x14c>
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	07de      	lsls	r6, r3, #31
 8002b40:	d508      	bpl.n	8002b54 <_printf_i+0x14c>
 8002b42:	6923      	ldr	r3, [r4, #16]
 8002b44:	6861      	ldr	r1, [r4, #4]
 8002b46:	4299      	cmp	r1, r3
 8002b48:	bfde      	ittt	le
 8002b4a:	2330      	movle	r3, #48	; 0x30
 8002b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b54:	1b52      	subs	r2, r2, r5
 8002b56:	6122      	str	r2, [r4, #16]
 8002b58:	f8cd a000 	str.w	sl, [sp]
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	aa03      	add	r2, sp, #12
 8002b60:	4621      	mov	r1, r4
 8002b62:	4640      	mov	r0, r8
 8002b64:	f7ff fee2 	bl	800292c <_printf_common>
 8002b68:	3001      	adds	r0, #1
 8002b6a:	d14c      	bne.n	8002c06 <_printf_i+0x1fe>
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	b004      	add	sp, #16
 8002b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b76:	4835      	ldr	r0, [pc, #212]	; (8002c4c <_printf_i+0x244>)
 8002b78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002b7c:	6829      	ldr	r1, [r5, #0]
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8002b84:	6029      	str	r1, [r5, #0]
 8002b86:	061d      	lsls	r5, r3, #24
 8002b88:	d514      	bpl.n	8002bb4 <_printf_i+0x1ac>
 8002b8a:	07df      	lsls	r7, r3, #31
 8002b8c:	bf44      	itt	mi
 8002b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8002b92:	6023      	strmi	r3, [r4, #0]
 8002b94:	b91e      	cbnz	r6, 8002b9e <_printf_i+0x196>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	f023 0320 	bic.w	r3, r3, #32
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	2310      	movs	r3, #16
 8002ba0:	e7b0      	b.n	8002b04 <_printf_i+0xfc>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	f043 0320 	orr.w	r3, r3, #32
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	2378      	movs	r3, #120	; 0x78
 8002bac:	4828      	ldr	r0, [pc, #160]	; (8002c50 <_printf_i+0x248>)
 8002bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bb2:	e7e3      	b.n	8002b7c <_printf_i+0x174>
 8002bb4:	0659      	lsls	r1, r3, #25
 8002bb6:	bf48      	it	mi
 8002bb8:	b2b6      	uxthmi	r6, r6
 8002bba:	e7e6      	b.n	8002b8a <_printf_i+0x182>
 8002bbc:	4615      	mov	r5, r2
 8002bbe:	e7bb      	b.n	8002b38 <_printf_i+0x130>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	6826      	ldr	r6, [r4, #0]
 8002bc4:	6961      	ldr	r1, [r4, #20]
 8002bc6:	1d18      	adds	r0, r3, #4
 8002bc8:	6028      	str	r0, [r5, #0]
 8002bca:	0635      	lsls	r5, r6, #24
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	d501      	bpl.n	8002bd4 <_printf_i+0x1cc>
 8002bd0:	6019      	str	r1, [r3, #0]
 8002bd2:	e002      	b.n	8002bda <_printf_i+0x1d2>
 8002bd4:	0670      	lsls	r0, r6, #25
 8002bd6:	d5fb      	bpl.n	8002bd0 <_printf_i+0x1c8>
 8002bd8:	8019      	strh	r1, [r3, #0]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	6123      	str	r3, [r4, #16]
 8002bde:	4615      	mov	r5, r2
 8002be0:	e7ba      	b.n	8002b58 <_printf_i+0x150>
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	1d1a      	adds	r2, r3, #4
 8002be6:	602a      	str	r2, [r5, #0]
 8002be8:	681d      	ldr	r5, [r3, #0]
 8002bea:	6862      	ldr	r2, [r4, #4]
 8002bec:	2100      	movs	r1, #0
 8002bee:	4628      	mov	r0, r5
 8002bf0:	f7fd faf6 	bl	80001e0 <memchr>
 8002bf4:	b108      	cbz	r0, 8002bfa <_printf_i+0x1f2>
 8002bf6:	1b40      	subs	r0, r0, r5
 8002bf8:	6060      	str	r0, [r4, #4]
 8002bfa:	6863      	ldr	r3, [r4, #4]
 8002bfc:	6123      	str	r3, [r4, #16]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c04:	e7a8      	b.n	8002b58 <_printf_i+0x150>
 8002c06:	6923      	ldr	r3, [r4, #16]
 8002c08:	462a      	mov	r2, r5
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	4640      	mov	r0, r8
 8002c0e:	47d0      	blx	sl
 8002c10:	3001      	adds	r0, #1
 8002c12:	d0ab      	beq.n	8002b6c <_printf_i+0x164>
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	079b      	lsls	r3, r3, #30
 8002c18:	d413      	bmi.n	8002c42 <_printf_i+0x23a>
 8002c1a:	68e0      	ldr	r0, [r4, #12]
 8002c1c:	9b03      	ldr	r3, [sp, #12]
 8002c1e:	4298      	cmp	r0, r3
 8002c20:	bfb8      	it	lt
 8002c22:	4618      	movlt	r0, r3
 8002c24:	e7a4      	b.n	8002b70 <_printf_i+0x168>
 8002c26:	2301      	movs	r3, #1
 8002c28:	4632      	mov	r2, r6
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	4640      	mov	r0, r8
 8002c2e:	47d0      	blx	sl
 8002c30:	3001      	adds	r0, #1
 8002c32:	d09b      	beq.n	8002b6c <_printf_i+0x164>
 8002c34:	3501      	adds	r5, #1
 8002c36:	68e3      	ldr	r3, [r4, #12]
 8002c38:	9903      	ldr	r1, [sp, #12]
 8002c3a:	1a5b      	subs	r3, r3, r1
 8002c3c:	42ab      	cmp	r3, r5
 8002c3e:	dcf2      	bgt.n	8002c26 <_printf_i+0x21e>
 8002c40:	e7eb      	b.n	8002c1a <_printf_i+0x212>
 8002c42:	2500      	movs	r5, #0
 8002c44:	f104 0619 	add.w	r6, r4, #25
 8002c48:	e7f5      	b.n	8002c36 <_printf_i+0x22e>
 8002c4a:	bf00      	nop
 8002c4c:	080032f1 	.word	0x080032f1
 8002c50:	08003302 	.word	0x08003302

08002c54 <_sbrk_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4d06      	ldr	r5, [pc, #24]	; (8002c70 <_sbrk_r+0x1c>)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	602b      	str	r3, [r5, #0]
 8002c60:	f7fd fedc 	bl	8000a1c <_sbrk>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_sbrk_r+0x1a>
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_sbrk_r+0x1a>
 8002c6c:	6023      	str	r3, [r4, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	20000174 	.word	0x20000174

08002c74 <__sread>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	460c      	mov	r4, r1
 8002c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c7c:	f000 fab2 	bl	80031e4 <_read_r>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	bfab      	itete	ge
 8002c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c86:	89a3      	ldrhlt	r3, [r4, #12]
 8002c88:	181b      	addge	r3, r3, r0
 8002c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c8e:	bfac      	ite	ge
 8002c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c92:	81a3      	strhlt	r3, [r4, #12]
 8002c94:	bd10      	pop	{r4, pc}

08002c96 <__swrite>:
 8002c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9a:	461f      	mov	r7, r3
 8002c9c:	898b      	ldrh	r3, [r1, #12]
 8002c9e:	05db      	lsls	r3, r3, #23
 8002ca0:	4605      	mov	r5, r0
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	4616      	mov	r6, r2
 8002ca6:	d505      	bpl.n	8002cb4 <__swrite+0x1e>
 8002ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cac:	2302      	movs	r3, #2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f000 f9c8 	bl	8003044 <_lseek_r>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	4632      	mov	r2, r6
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cca:	f000 b869 	b.w	8002da0 <_write_r>

08002cce <__sseek>:
 8002cce:	b510      	push	{r4, lr}
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd6:	f000 f9b5 	bl	8003044 <_lseek_r>
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	89a3      	ldrh	r3, [r4, #12]
 8002cde:	bf15      	itete	ne
 8002ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cea:	81a3      	strheq	r3, [r4, #12]
 8002cec:	bf18      	it	ne
 8002cee:	81a3      	strhne	r3, [r4, #12]
 8002cf0:	bd10      	pop	{r4, pc}

08002cf2 <__sclose>:
 8002cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf6:	f000 b8d3 	b.w	8002ea0 <_close_r>
	...

08002cfc <__swbuf_r>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	460e      	mov	r6, r1
 8002d00:	4614      	mov	r4, r2
 8002d02:	4605      	mov	r5, r0
 8002d04:	b118      	cbz	r0, 8002d0e <__swbuf_r+0x12>
 8002d06:	6983      	ldr	r3, [r0, #24]
 8002d08:	b90b      	cbnz	r3, 8002d0e <__swbuf_r+0x12>
 8002d0a:	f7ff fb81 	bl	8002410 <__sinit>
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <__swbuf_r+0x98>)
 8002d10:	429c      	cmp	r4, r3
 8002d12:	d12b      	bne.n	8002d6c <__swbuf_r+0x70>
 8002d14:	686c      	ldr	r4, [r5, #4]
 8002d16:	69a3      	ldr	r3, [r4, #24]
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	071a      	lsls	r2, r3, #28
 8002d1e:	d52f      	bpl.n	8002d80 <__swbuf_r+0x84>
 8002d20:	6923      	ldr	r3, [r4, #16]
 8002d22:	b36b      	cbz	r3, 8002d80 <__swbuf_r+0x84>
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	6820      	ldr	r0, [r4, #0]
 8002d28:	1ac0      	subs	r0, r0, r3
 8002d2a:	6963      	ldr	r3, [r4, #20]
 8002d2c:	b2f6      	uxtb	r6, r6
 8002d2e:	4283      	cmp	r3, r0
 8002d30:	4637      	mov	r7, r6
 8002d32:	dc04      	bgt.n	8002d3e <__swbuf_r+0x42>
 8002d34:	4621      	mov	r1, r4
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 f948 	bl	8002fcc <_fflush_r>
 8002d3c:	bb30      	cbnz	r0, 8002d8c <__swbuf_r+0x90>
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	3b01      	subs	r3, #1
 8002d42:	60a3      	str	r3, [r4, #8]
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	6022      	str	r2, [r4, #0]
 8002d4a:	701e      	strb	r6, [r3, #0]
 8002d4c:	6963      	ldr	r3, [r4, #20]
 8002d4e:	3001      	adds	r0, #1
 8002d50:	4283      	cmp	r3, r0
 8002d52:	d004      	beq.n	8002d5e <__swbuf_r+0x62>
 8002d54:	89a3      	ldrh	r3, [r4, #12]
 8002d56:	07db      	lsls	r3, r3, #31
 8002d58:	d506      	bpl.n	8002d68 <__swbuf_r+0x6c>
 8002d5a:	2e0a      	cmp	r6, #10
 8002d5c:	d104      	bne.n	8002d68 <__swbuf_r+0x6c>
 8002d5e:	4621      	mov	r1, r4
 8002d60:	4628      	mov	r0, r5
 8002d62:	f000 f933 	bl	8002fcc <_fflush_r>
 8002d66:	b988      	cbnz	r0, 8002d8c <__swbuf_r+0x90>
 8002d68:	4638      	mov	r0, r7
 8002d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <__swbuf_r+0x9c>)
 8002d6e:	429c      	cmp	r4, r3
 8002d70:	d101      	bne.n	8002d76 <__swbuf_r+0x7a>
 8002d72:	68ac      	ldr	r4, [r5, #8]
 8002d74:	e7cf      	b.n	8002d16 <__swbuf_r+0x1a>
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <__swbuf_r+0xa0>)
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	bf08      	it	eq
 8002d7c:	68ec      	ldreq	r4, [r5, #12]
 8002d7e:	e7ca      	b.n	8002d16 <__swbuf_r+0x1a>
 8002d80:	4621      	mov	r1, r4
 8002d82:	4628      	mov	r0, r5
 8002d84:	f000 f81e 	bl	8002dc4 <__swsetup_r>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d0cb      	beq.n	8002d24 <__swbuf_r+0x28>
 8002d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8002d90:	e7ea      	b.n	8002d68 <__swbuf_r+0x6c>
 8002d92:	bf00      	nop
 8002d94:	080032a0 	.word	0x080032a0
 8002d98:	080032c0 	.word	0x080032c0
 8002d9c:	08003280 	.word	0x08003280

08002da0 <_write_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4d07      	ldr	r5, [pc, #28]	; (8002dc0 <_write_r+0x20>)
 8002da4:	4604      	mov	r4, r0
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	2200      	movs	r2, #0
 8002dac:	602a      	str	r2, [r5, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f7fd fd10 	bl	80007d4 <_write>
 8002db4:	1c43      	adds	r3, r0, #1
 8002db6:	d102      	bne.n	8002dbe <_write_r+0x1e>
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	b103      	cbz	r3, 8002dbe <_write_r+0x1e>
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}
 8002dc0:	20000174 	.word	0x20000174

08002dc4 <__swsetup_r>:
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <__swsetup_r+0xcc>)
 8002dc6:	b570      	push	{r4, r5, r6, lr}
 8002dc8:	681d      	ldr	r5, [r3, #0]
 8002dca:	4606      	mov	r6, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	b125      	cbz	r5, 8002dda <__swsetup_r+0x16>
 8002dd0:	69ab      	ldr	r3, [r5, #24]
 8002dd2:	b913      	cbnz	r3, 8002dda <__swsetup_r+0x16>
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	f7ff fb1b 	bl	8002410 <__sinit>
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <__swsetup_r+0xd0>)
 8002ddc:	429c      	cmp	r4, r3
 8002dde:	d10f      	bne.n	8002e00 <__swsetup_r+0x3c>
 8002de0:	686c      	ldr	r4, [r5, #4]
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002de8:	0719      	lsls	r1, r3, #28
 8002dea:	d42c      	bmi.n	8002e46 <__swsetup_r+0x82>
 8002dec:	06dd      	lsls	r5, r3, #27
 8002dee:	d411      	bmi.n	8002e14 <__swsetup_r+0x50>
 8002df0:	2309      	movs	r3, #9
 8002df2:	6033      	str	r3, [r6, #0]
 8002df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002df8:	81a3      	strh	r3, [r4, #12]
 8002dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfe:	e03e      	b.n	8002e7e <__swsetup_r+0xba>
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <__swsetup_r+0xd4>)
 8002e02:	429c      	cmp	r4, r3
 8002e04:	d101      	bne.n	8002e0a <__swsetup_r+0x46>
 8002e06:	68ac      	ldr	r4, [r5, #8]
 8002e08:	e7eb      	b.n	8002de2 <__swsetup_r+0x1e>
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <__swsetup_r+0xd8>)
 8002e0c:	429c      	cmp	r4, r3
 8002e0e:	bf08      	it	eq
 8002e10:	68ec      	ldreq	r4, [r5, #12]
 8002e12:	e7e6      	b.n	8002de2 <__swsetup_r+0x1e>
 8002e14:	0758      	lsls	r0, r3, #29
 8002e16:	d512      	bpl.n	8002e3e <__swsetup_r+0x7a>
 8002e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e1a:	b141      	cbz	r1, 8002e2e <__swsetup_r+0x6a>
 8002e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e20:	4299      	cmp	r1, r3
 8002e22:	d002      	beq.n	8002e2a <__swsetup_r+0x66>
 8002e24:	4630      	mov	r0, r6
 8002e26:	f000 f991 	bl	800314c <_free_r>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e34:	81a3      	strh	r3, [r4, #12]
 8002e36:	2300      	movs	r3, #0
 8002e38:	6063      	str	r3, [r4, #4]
 8002e3a:	6923      	ldr	r3, [r4, #16]
 8002e3c:	6023      	str	r3, [r4, #0]
 8002e3e:	89a3      	ldrh	r3, [r4, #12]
 8002e40:	f043 0308 	orr.w	r3, r3, #8
 8002e44:	81a3      	strh	r3, [r4, #12]
 8002e46:	6923      	ldr	r3, [r4, #16]
 8002e48:	b94b      	cbnz	r3, 8002e5e <__swsetup_r+0x9a>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e54:	d003      	beq.n	8002e5e <__swsetup_r+0x9a>
 8002e56:	4621      	mov	r1, r4
 8002e58:	4630      	mov	r0, r6
 8002e5a:	f000 f92b 	bl	80030b4 <__smakebuf_r>
 8002e5e:	89a0      	ldrh	r0, [r4, #12]
 8002e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e64:	f010 0301 	ands.w	r3, r0, #1
 8002e68:	d00a      	beq.n	8002e80 <__swsetup_r+0xbc>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60a3      	str	r3, [r4, #8]
 8002e6e:	6963      	ldr	r3, [r4, #20]
 8002e70:	425b      	negs	r3, r3
 8002e72:	61a3      	str	r3, [r4, #24]
 8002e74:	6923      	ldr	r3, [r4, #16]
 8002e76:	b943      	cbnz	r3, 8002e8a <__swsetup_r+0xc6>
 8002e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e7c:	d1ba      	bne.n	8002df4 <__swsetup_r+0x30>
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	0781      	lsls	r1, r0, #30
 8002e82:	bf58      	it	pl
 8002e84:	6963      	ldrpl	r3, [r4, #20]
 8002e86:	60a3      	str	r3, [r4, #8]
 8002e88:	e7f4      	b.n	8002e74 <__swsetup_r+0xb0>
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e7f7      	b.n	8002e7e <__swsetup_r+0xba>
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	080032a0 	.word	0x080032a0
 8002e98:	080032c0 	.word	0x080032c0
 8002e9c:	08003280 	.word	0x08003280

08002ea0 <_close_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4d06      	ldr	r5, [pc, #24]	; (8002ebc <_close_r+0x1c>)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	4608      	mov	r0, r1
 8002eaa:	602b      	str	r3, [r5, #0]
 8002eac:	f7fd fd81 	bl	80009b2 <_close>
 8002eb0:	1c43      	adds	r3, r0, #1
 8002eb2:	d102      	bne.n	8002eba <_close_r+0x1a>
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	b103      	cbz	r3, 8002eba <_close_r+0x1a>
 8002eb8:	6023      	str	r3, [r4, #0]
 8002eba:	bd38      	pop	{r3, r4, r5, pc}
 8002ebc:	20000174 	.word	0x20000174

08002ec0 <__sflush_r>:
 8002ec0:	898a      	ldrh	r2, [r1, #12]
 8002ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	0710      	lsls	r0, r2, #28
 8002eca:	460c      	mov	r4, r1
 8002ecc:	d458      	bmi.n	8002f80 <__sflush_r+0xc0>
 8002ece:	684b      	ldr	r3, [r1, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	dc05      	bgt.n	8002ee0 <__sflush_r+0x20>
 8002ed4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	dc02      	bgt.n	8002ee0 <__sflush_r+0x20>
 8002eda:	2000      	movs	r0, #0
 8002edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ee0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ee2:	2e00      	cmp	r6, #0
 8002ee4:	d0f9      	beq.n	8002eda <__sflush_r+0x1a>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002eec:	682f      	ldr	r7, [r5, #0]
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	d032      	beq.n	8002f58 <__sflush_r+0x98>
 8002ef2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ef4:	89a3      	ldrh	r3, [r4, #12]
 8002ef6:	075a      	lsls	r2, r3, #29
 8002ef8:	d505      	bpl.n	8002f06 <__sflush_r+0x46>
 8002efa:	6863      	ldr	r3, [r4, #4]
 8002efc:	1ac0      	subs	r0, r0, r3
 8002efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f00:	b10b      	cbz	r3, 8002f06 <__sflush_r+0x46>
 8002f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f04:	1ac0      	subs	r0, r0, r3
 8002f06:	2300      	movs	r3, #0
 8002f08:	4602      	mov	r2, r0
 8002f0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f0c:	6a21      	ldr	r1, [r4, #32]
 8002f0e:	4628      	mov	r0, r5
 8002f10:	47b0      	blx	r6
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	89a3      	ldrh	r3, [r4, #12]
 8002f16:	d106      	bne.n	8002f26 <__sflush_r+0x66>
 8002f18:	6829      	ldr	r1, [r5, #0]
 8002f1a:	291d      	cmp	r1, #29
 8002f1c:	d82c      	bhi.n	8002f78 <__sflush_r+0xb8>
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	; (8002fc8 <__sflush_r+0x108>)
 8002f20:	40ca      	lsrs	r2, r1
 8002f22:	07d6      	lsls	r6, r2, #31
 8002f24:	d528      	bpl.n	8002f78 <__sflush_r+0xb8>
 8002f26:	2200      	movs	r2, #0
 8002f28:	6062      	str	r2, [r4, #4]
 8002f2a:	04d9      	lsls	r1, r3, #19
 8002f2c:	6922      	ldr	r2, [r4, #16]
 8002f2e:	6022      	str	r2, [r4, #0]
 8002f30:	d504      	bpl.n	8002f3c <__sflush_r+0x7c>
 8002f32:	1c42      	adds	r2, r0, #1
 8002f34:	d101      	bne.n	8002f3a <__sflush_r+0x7a>
 8002f36:	682b      	ldr	r3, [r5, #0]
 8002f38:	b903      	cbnz	r3, 8002f3c <__sflush_r+0x7c>
 8002f3a:	6560      	str	r0, [r4, #84]	; 0x54
 8002f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f3e:	602f      	str	r7, [r5, #0]
 8002f40:	2900      	cmp	r1, #0
 8002f42:	d0ca      	beq.n	8002eda <__sflush_r+0x1a>
 8002f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f48:	4299      	cmp	r1, r3
 8002f4a:	d002      	beq.n	8002f52 <__sflush_r+0x92>
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f000 f8fd 	bl	800314c <_free_r>
 8002f52:	2000      	movs	r0, #0
 8002f54:	6360      	str	r0, [r4, #52]	; 0x34
 8002f56:	e7c1      	b.n	8002edc <__sflush_r+0x1c>
 8002f58:	6a21      	ldr	r1, [r4, #32]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	47b0      	blx	r6
 8002f60:	1c41      	adds	r1, r0, #1
 8002f62:	d1c7      	bne.n	8002ef4 <__sflush_r+0x34>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0c4      	beq.n	8002ef4 <__sflush_r+0x34>
 8002f6a:	2b1d      	cmp	r3, #29
 8002f6c:	d001      	beq.n	8002f72 <__sflush_r+0xb2>
 8002f6e:	2b16      	cmp	r3, #22
 8002f70:	d101      	bne.n	8002f76 <__sflush_r+0xb6>
 8002f72:	602f      	str	r7, [r5, #0]
 8002f74:	e7b1      	b.n	8002eda <__sflush_r+0x1a>
 8002f76:	89a3      	ldrh	r3, [r4, #12]
 8002f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7c:	81a3      	strh	r3, [r4, #12]
 8002f7e:	e7ad      	b.n	8002edc <__sflush_r+0x1c>
 8002f80:	690f      	ldr	r7, [r1, #16]
 8002f82:	2f00      	cmp	r7, #0
 8002f84:	d0a9      	beq.n	8002eda <__sflush_r+0x1a>
 8002f86:	0793      	lsls	r3, r2, #30
 8002f88:	680e      	ldr	r6, [r1, #0]
 8002f8a:	bf08      	it	eq
 8002f8c:	694b      	ldreq	r3, [r1, #20]
 8002f8e:	600f      	str	r7, [r1, #0]
 8002f90:	bf18      	it	ne
 8002f92:	2300      	movne	r3, #0
 8002f94:	eba6 0807 	sub.w	r8, r6, r7
 8002f98:	608b      	str	r3, [r1, #8]
 8002f9a:	f1b8 0f00 	cmp.w	r8, #0
 8002f9e:	dd9c      	ble.n	8002eda <__sflush_r+0x1a>
 8002fa0:	6a21      	ldr	r1, [r4, #32]
 8002fa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	463a      	mov	r2, r7
 8002fa8:	4628      	mov	r0, r5
 8002faa:	47b0      	blx	r6
 8002fac:	2800      	cmp	r0, #0
 8002fae:	dc06      	bgt.n	8002fbe <__sflush_r+0xfe>
 8002fb0:	89a3      	ldrh	r3, [r4, #12]
 8002fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb6:	81a3      	strh	r3, [r4, #12]
 8002fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fbc:	e78e      	b.n	8002edc <__sflush_r+0x1c>
 8002fbe:	4407      	add	r7, r0
 8002fc0:	eba8 0800 	sub.w	r8, r8, r0
 8002fc4:	e7e9      	b.n	8002f9a <__sflush_r+0xda>
 8002fc6:	bf00      	nop
 8002fc8:	20400001 	.word	0x20400001

08002fcc <_fflush_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	690b      	ldr	r3, [r1, #16]
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	b913      	cbnz	r3, 8002fdc <_fflush_r+0x10>
 8002fd6:	2500      	movs	r5, #0
 8002fd8:	4628      	mov	r0, r5
 8002fda:	bd38      	pop	{r3, r4, r5, pc}
 8002fdc:	b118      	cbz	r0, 8002fe6 <_fflush_r+0x1a>
 8002fde:	6983      	ldr	r3, [r0, #24]
 8002fe0:	b90b      	cbnz	r3, 8002fe6 <_fflush_r+0x1a>
 8002fe2:	f7ff fa15 	bl	8002410 <__sinit>
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <_fflush_r+0x6c>)
 8002fe8:	429c      	cmp	r4, r3
 8002fea:	d11b      	bne.n	8003024 <_fflush_r+0x58>
 8002fec:	686c      	ldr	r4, [r5, #4]
 8002fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0ef      	beq.n	8002fd6 <_fflush_r+0xa>
 8002ff6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ff8:	07d0      	lsls	r0, r2, #31
 8002ffa:	d404      	bmi.n	8003006 <_fflush_r+0x3a>
 8002ffc:	0599      	lsls	r1, r3, #22
 8002ffe:	d402      	bmi.n	8003006 <_fflush_r+0x3a>
 8003000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003002:	f7ff faa3 	bl	800254c <__retarget_lock_acquire_recursive>
 8003006:	4628      	mov	r0, r5
 8003008:	4621      	mov	r1, r4
 800300a:	f7ff ff59 	bl	8002ec0 <__sflush_r>
 800300e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003010:	07da      	lsls	r2, r3, #31
 8003012:	4605      	mov	r5, r0
 8003014:	d4e0      	bmi.n	8002fd8 <_fflush_r+0xc>
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	059b      	lsls	r3, r3, #22
 800301a:	d4dd      	bmi.n	8002fd8 <_fflush_r+0xc>
 800301c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800301e:	f7ff fa96 	bl	800254e <__retarget_lock_release_recursive>
 8003022:	e7d9      	b.n	8002fd8 <_fflush_r+0xc>
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <_fflush_r+0x70>)
 8003026:	429c      	cmp	r4, r3
 8003028:	d101      	bne.n	800302e <_fflush_r+0x62>
 800302a:	68ac      	ldr	r4, [r5, #8]
 800302c:	e7df      	b.n	8002fee <_fflush_r+0x22>
 800302e:	4b04      	ldr	r3, [pc, #16]	; (8003040 <_fflush_r+0x74>)
 8003030:	429c      	cmp	r4, r3
 8003032:	bf08      	it	eq
 8003034:	68ec      	ldreq	r4, [r5, #12]
 8003036:	e7da      	b.n	8002fee <_fflush_r+0x22>
 8003038:	080032a0 	.word	0x080032a0
 800303c:	080032c0 	.word	0x080032c0
 8003040:	08003280 	.word	0x08003280

08003044 <_lseek_r>:
 8003044:	b538      	push	{r3, r4, r5, lr}
 8003046:	4d07      	ldr	r5, [pc, #28]	; (8003064 <_lseek_r+0x20>)
 8003048:	4604      	mov	r4, r0
 800304a:	4608      	mov	r0, r1
 800304c:	4611      	mov	r1, r2
 800304e:	2200      	movs	r2, #0
 8003050:	602a      	str	r2, [r5, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	f7fd fcd4 	bl	8000a00 <_lseek>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_lseek_r+0x1e>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	b103      	cbz	r3, 8003062 <_lseek_r+0x1e>
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000174 	.word	0x20000174

08003068 <__swhatbuf_r>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	460e      	mov	r6, r1
 800306c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003070:	2900      	cmp	r1, #0
 8003072:	b096      	sub	sp, #88	; 0x58
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	da08      	bge.n	800308c <__swhatbuf_r+0x24>
 800307a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	602a      	str	r2, [r5, #0]
 8003082:	061a      	lsls	r2, r3, #24
 8003084:	d410      	bmi.n	80030a8 <__swhatbuf_r+0x40>
 8003086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308a:	e00e      	b.n	80030aa <__swhatbuf_r+0x42>
 800308c:	466a      	mov	r2, sp
 800308e:	f000 f8bb 	bl	8003208 <_fstat_r>
 8003092:	2800      	cmp	r0, #0
 8003094:	dbf1      	blt.n	800307a <__swhatbuf_r+0x12>
 8003096:	9a01      	ldr	r2, [sp, #4]
 8003098:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800309c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80030a0:	425a      	negs	r2, r3
 80030a2:	415a      	adcs	r2, r3
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	e7ee      	b.n	8003086 <__swhatbuf_r+0x1e>
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	2000      	movs	r0, #0
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	b016      	add	sp, #88	; 0x58
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080030b4 <__smakebuf_r>:
 80030b4:	898b      	ldrh	r3, [r1, #12]
 80030b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030b8:	079d      	lsls	r5, r3, #30
 80030ba:	4606      	mov	r6, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	d507      	bpl.n	80030d0 <__smakebuf_r+0x1c>
 80030c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030c4:	6023      	str	r3, [r4, #0]
 80030c6:	6123      	str	r3, [r4, #16]
 80030c8:	2301      	movs	r3, #1
 80030ca:	6163      	str	r3, [r4, #20]
 80030cc:	b002      	add	sp, #8
 80030ce:	bd70      	pop	{r4, r5, r6, pc}
 80030d0:	ab01      	add	r3, sp, #4
 80030d2:	466a      	mov	r2, sp
 80030d4:	f7ff ffc8 	bl	8003068 <__swhatbuf_r>
 80030d8:	9900      	ldr	r1, [sp, #0]
 80030da:	4605      	mov	r5, r0
 80030dc:	4630      	mov	r0, r6
 80030de:	f7ff fa57 	bl	8002590 <_malloc_r>
 80030e2:	b948      	cbnz	r0, 80030f8 <__smakebuf_r+0x44>
 80030e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e8:	059a      	lsls	r2, r3, #22
 80030ea:	d4ef      	bmi.n	80030cc <__smakebuf_r+0x18>
 80030ec:	f023 0303 	bic.w	r3, r3, #3
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	81a3      	strh	r3, [r4, #12]
 80030f6:	e7e3      	b.n	80030c0 <__smakebuf_r+0xc>
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <__smakebuf_r+0x7c>)
 80030fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	6020      	str	r0, [r4, #0]
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	81a3      	strh	r3, [r4, #12]
 8003106:	9b00      	ldr	r3, [sp, #0]
 8003108:	6163      	str	r3, [r4, #20]
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	6120      	str	r0, [r4, #16]
 800310e:	b15b      	cbz	r3, 8003128 <__smakebuf_r+0x74>
 8003110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003114:	4630      	mov	r0, r6
 8003116:	f000 f889 	bl	800322c <_isatty_r>
 800311a:	b128      	cbz	r0, 8003128 <__smakebuf_r+0x74>
 800311c:	89a3      	ldrh	r3, [r4, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	81a3      	strh	r3, [r4, #12]
 8003128:	89a0      	ldrh	r0, [r4, #12]
 800312a:	4305      	orrs	r5, r0
 800312c:	81a5      	strh	r5, [r4, #12]
 800312e:	e7cd      	b.n	80030cc <__smakebuf_r+0x18>
 8003130:	080023a9 	.word	0x080023a9

08003134 <__malloc_lock>:
 8003134:	4801      	ldr	r0, [pc, #4]	; (800313c <__malloc_lock+0x8>)
 8003136:	f7ff ba09 	b.w	800254c <__retarget_lock_acquire_recursive>
 800313a:	bf00      	nop
 800313c:	20000168 	.word	0x20000168

08003140 <__malloc_unlock>:
 8003140:	4801      	ldr	r0, [pc, #4]	; (8003148 <__malloc_unlock+0x8>)
 8003142:	f7ff ba04 	b.w	800254e <__retarget_lock_release_recursive>
 8003146:	bf00      	nop
 8003148:	20000168 	.word	0x20000168

0800314c <_free_r>:
 800314c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800314e:	2900      	cmp	r1, #0
 8003150:	d044      	beq.n	80031dc <_free_r+0x90>
 8003152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003156:	9001      	str	r0, [sp, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f1a1 0404 	sub.w	r4, r1, #4
 800315e:	bfb8      	it	lt
 8003160:	18e4      	addlt	r4, r4, r3
 8003162:	f7ff ffe7 	bl	8003134 <__malloc_lock>
 8003166:	4a1e      	ldr	r2, [pc, #120]	; (80031e0 <_free_r+0x94>)
 8003168:	9801      	ldr	r0, [sp, #4]
 800316a:	6813      	ldr	r3, [r2, #0]
 800316c:	b933      	cbnz	r3, 800317c <_free_r+0x30>
 800316e:	6063      	str	r3, [r4, #4]
 8003170:	6014      	str	r4, [r2, #0]
 8003172:	b003      	add	sp, #12
 8003174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003178:	f7ff bfe2 	b.w	8003140 <__malloc_unlock>
 800317c:	42a3      	cmp	r3, r4
 800317e:	d908      	bls.n	8003192 <_free_r+0x46>
 8003180:	6825      	ldr	r5, [r4, #0]
 8003182:	1961      	adds	r1, r4, r5
 8003184:	428b      	cmp	r3, r1
 8003186:	bf01      	itttt	eq
 8003188:	6819      	ldreq	r1, [r3, #0]
 800318a:	685b      	ldreq	r3, [r3, #4]
 800318c:	1949      	addeq	r1, r1, r5
 800318e:	6021      	streq	r1, [r4, #0]
 8003190:	e7ed      	b.n	800316e <_free_r+0x22>
 8003192:	461a      	mov	r2, r3
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b10b      	cbz	r3, 800319c <_free_r+0x50>
 8003198:	42a3      	cmp	r3, r4
 800319a:	d9fa      	bls.n	8003192 <_free_r+0x46>
 800319c:	6811      	ldr	r1, [r2, #0]
 800319e:	1855      	adds	r5, r2, r1
 80031a0:	42a5      	cmp	r5, r4
 80031a2:	d10b      	bne.n	80031bc <_free_r+0x70>
 80031a4:	6824      	ldr	r4, [r4, #0]
 80031a6:	4421      	add	r1, r4
 80031a8:	1854      	adds	r4, r2, r1
 80031aa:	42a3      	cmp	r3, r4
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	d1e0      	bne.n	8003172 <_free_r+0x26>
 80031b0:	681c      	ldr	r4, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	6053      	str	r3, [r2, #4]
 80031b6:	4421      	add	r1, r4
 80031b8:	6011      	str	r1, [r2, #0]
 80031ba:	e7da      	b.n	8003172 <_free_r+0x26>
 80031bc:	d902      	bls.n	80031c4 <_free_r+0x78>
 80031be:	230c      	movs	r3, #12
 80031c0:	6003      	str	r3, [r0, #0]
 80031c2:	e7d6      	b.n	8003172 <_free_r+0x26>
 80031c4:	6825      	ldr	r5, [r4, #0]
 80031c6:	1961      	adds	r1, r4, r5
 80031c8:	428b      	cmp	r3, r1
 80031ca:	bf04      	itt	eq
 80031cc:	6819      	ldreq	r1, [r3, #0]
 80031ce:	685b      	ldreq	r3, [r3, #4]
 80031d0:	6063      	str	r3, [r4, #4]
 80031d2:	bf04      	itt	eq
 80031d4:	1949      	addeq	r1, r1, r5
 80031d6:	6021      	streq	r1, [r4, #0]
 80031d8:	6054      	str	r4, [r2, #4]
 80031da:	e7ca      	b.n	8003172 <_free_r+0x26>
 80031dc:	b003      	add	sp, #12
 80031de:	bd30      	pop	{r4, r5, pc}
 80031e0:	2000016c 	.word	0x2000016c

080031e4 <_read_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4d07      	ldr	r5, [pc, #28]	; (8003204 <_read_r+0x20>)
 80031e8:	4604      	mov	r4, r0
 80031ea:	4608      	mov	r0, r1
 80031ec:	4611      	mov	r1, r2
 80031ee:	2200      	movs	r2, #0
 80031f0:	602a      	str	r2, [r5, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f7fd fbc0 	bl	8000978 <_read>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_read_r+0x1e>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_read_r+0x1e>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000174 	.word	0x20000174

08003208 <_fstat_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4d07      	ldr	r5, [pc, #28]	; (8003228 <_fstat_r+0x20>)
 800320c:	2300      	movs	r3, #0
 800320e:	4604      	mov	r4, r0
 8003210:	4608      	mov	r0, r1
 8003212:	4611      	mov	r1, r2
 8003214:	602b      	str	r3, [r5, #0]
 8003216:	f7fd fbd8 	bl	80009ca <_fstat>
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d102      	bne.n	8003224 <_fstat_r+0x1c>
 800321e:	682b      	ldr	r3, [r5, #0]
 8003220:	b103      	cbz	r3, 8003224 <_fstat_r+0x1c>
 8003222:	6023      	str	r3, [r4, #0]
 8003224:	bd38      	pop	{r3, r4, r5, pc}
 8003226:	bf00      	nop
 8003228:	20000174 	.word	0x20000174

0800322c <_isatty_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4d06      	ldr	r5, [pc, #24]	; (8003248 <_isatty_r+0x1c>)
 8003230:	2300      	movs	r3, #0
 8003232:	4604      	mov	r4, r0
 8003234:	4608      	mov	r0, r1
 8003236:	602b      	str	r3, [r5, #0]
 8003238:	f7fd fbd7 	bl	80009ea <_isatty>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d102      	bne.n	8003246 <_isatty_r+0x1a>
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	b103      	cbz	r3, 8003246 <_isatty_r+0x1a>
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	bd38      	pop	{r3, r4, r5, pc}
 8003248:	20000174 	.word	0x20000174

0800324c <_init>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr

08003258 <_fini>:
 8003258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800325a:	bf00      	nop
 800325c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325e:	bc08      	pop	{r3}
 8003260:	469e      	mov	lr, r3
 8003262:	4770      	bx	lr
