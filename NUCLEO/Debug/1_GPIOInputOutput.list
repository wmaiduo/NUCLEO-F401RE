
1_GPIOInputOutput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dbc  08002dbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc4  08002dc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08002e3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002e3c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d569  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e53  00000000  00000000  0002d609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002f460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  000300d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b4  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9a4  00000000  00000000  0004832c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e881  00000000  00000000  00056cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5551  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b40  00000000  00000000  000e55a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002cf0 	.word	0x08002cf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002cf0 	.word	0x08002cf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_GPIO_EXTI_Callback>:

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13){

	};
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(BTN_PIN);
 800059e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005a2:	f000 fd57 	bl	8001054 <HAL_GPIO_EXTI_IRQHandler>
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <tim_timebase_init>:
//Timer period (Auto reload value) = 10 000

TIM_HandleTypeDef TimHandle;


void tim_timebase_init(void){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
	_TIMx_CLK_ENABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <tim_timebase_init+0x70>)
 80005b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ba:	4a18      	ldr	r2, [pc, #96]	; (800061c <tim_timebase_init+0x70>)
 80005bc:	f043 0302 	orr.w	r3, r3, #2
 80005c0:	6413      	str	r3, [r2, #64]	; 0x40
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <tim_timebase_init+0x70>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	f003 0302 	and.w	r3, r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

	TimHandle.Instance = TIMx;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <tim_timebase_init+0x74>)
 80005d0:	4a14      	ldr	r2, [pc, #80]	; (8000624 <tim_timebase_init+0x78>)
 80005d2:	601a      	str	r2, [r3, #0]
	TimHandle.Init.Prescaler = 1600 - 1; // 16 000 000 / 1600 = 10 000
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <tim_timebase_init+0x74>)
 80005d6:	f240 623f 	movw	r2, #1599	; 0x63f
 80005da:	605a      	str	r2, [r3, #4]
	TimHandle.Init.Period = 10000 - 1; // 10 000 / 10000 = 1hz
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <tim_timebase_init+0x74>)
 80005de:	f242 720f 	movw	r2, #9999	; 0x270f
 80005e2:	60da      	str	r2, [r3, #12]
	TimHandle.Init.ClockDivision = 0;
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <tim_timebase_init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ea:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <tim_timebase_init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
	TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <tim_timebase_init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Init(&TimHandle);
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <tim_timebase_init+0x74>)
 80005f8:	f000 fd78 	bl	80010ec <HAL_TIM_Base_Init>

	HAL_NVIC_SetPriority(TIMx_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	201d      	movs	r0, #29
 8000602:	f000 fb6c 	bl	8000cde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIMx_IRQn);
 8000606:	201d      	movs	r0, #29
 8000608:	f000 fb85 	bl	8000d16 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start_IT(&TimHandle);
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <tim_timebase_init+0x74>)
 800060e:	f000 fdc7 	bl	80011a0 <HAL_TIM_Base_Start_IT>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	2000008c 	.word	0x2000008c
 8000624:	40000400 	.word	0x40000400

08000628 <TIM3_IRQHandler>:

void TIMx_IRQHandler(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&TimHandle);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <TIM3_IRQHandler+0x10>)
 800062e:	f000 fe19 	bl	8001264 <HAL_TIM_IRQHandler>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000008c 	.word	0x2000008c

0800063c <uart_init>:
#include <stdint.h>
#include "stm32f4xx_hal.h"

UART_HandleTypeDef huart2;

void uart_init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <uart_init+0xb0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <uart_init+0xb0>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b22      	ldr	r3, [pc, #136]	; (80006ec <uart_init+0xb0>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_USART2_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <uart_init+0xb0>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <uart_init+0xb0>)
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <uart_init+0xb0>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 800068a:	230c      	movs	r3, #12
 800068c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000692:	2307      	movs	r3, #7
 8000694:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <uart_init+0xb4>)
 80006a6:	f000 fb51 	bl	8000d4c <HAL_GPIO_Init>

	huart2.Instance = USART2;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <uart_init+0xb8>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <uart_init+0xbc>)
 80006ae:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <uart_init+0xb8>)
 80006b2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b6:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <uart_init+0xb8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <uart_init+0xb8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <uart_init+0xb8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <uart_init+0xb8>)
 80006cc:	220c      	movs	r2, #12
 80006ce:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <uart_init+0xb8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <uart_init+0xb8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <uart_init+0xb8>)
 80006de:	f000 ff85 	bl	80015ec <HAL_UART_Init>
}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	200000d4 	.word	0x200000d4
 80006f8:	40004400 	.word	0x40004400

080006fc <uart_putchar>:

int uart_putchar(int ch) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000704:	1d39      	adds	r1, r7, #4
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	2201      	movs	r2, #1
 800070c:	4803      	ldr	r0, [pc, #12]	; (800071c <uart_putchar+0x20>)
 800070e:	f000 ffba 	bl	8001686 <HAL_UART_Transmit>
    return ch;
 8000712:	687b      	ldr	r3, [r7, #4]
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000d4 	.word	0x200000d4

08000720 <_write>:

int _write(int file, char* ptr, int len) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e009      	b.n	8000746 <_write+0x26>
        uart_putchar(*ptr++);
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	60ba      	str	r2, [r7, #8]
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ffde 	bl	80006fc <uart_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	3301      	adds	r3, #1
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	429a      	cmp	r2, r3
 800074c:	dbf1      	blt.n	8000732 <_write+0x12>
    }

    return len;
 800074e:	687b      	ldr	r3, [r7, #4]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <main>:
#include "../Peripherals/Inc/uart.h"
#include "../Peripherals/Inc/led.h"
#include "../Peripherals/Inc/exti.h"
#include "../Peripherals/Inc/tim.h"

int main(void){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	HAL_Init();
 800075c:	f000 f972 	bl	8000a44 <HAL_Init>
	uart_init();
 8000760:	f7ff ff6c 	bl	800063c <uart_init>
	tim_timebase_init();
 8000764:	f7ff ff22 	bl	80005ac <tim_timebase_init>

    while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x10>
	...

0800076c <HAL_TIM_PeriodElapsedCallback>:
    {
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	printf("Hello From TImer\n\r");
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000776:	f001 fb2d 	bl	8001dd4 <iprintf>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08002d08 	.word	0x08002d08

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <HAL_MspInit+0x4c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079c:	6453      	str	r3, [r2, #68]	; 0x44
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c6:	2007      	movs	r0, #7
 80007c8:	f000 fa7e 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <HAL_UART_MspInit+0x84>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d12b      	bne.n	8000852 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a17      	ldr	r2, [pc, #92]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_UART_MspInit+0x88>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_UART_MspInit+0x88>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <HAL_UART_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000832:	230c      	movs	r3, #12
 8000834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000842:	2307      	movs	r3, #7
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <HAL_UART_MspInit+0x8c>)
 800084e:	f000 fa7d 	bl	8000d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40004400 	.word	0x40004400
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f918 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	e00a      	b.n	80008e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ce:	f3af 8000 	nop.w
 80008d2:	4601      	mov	r1, r0
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	1c5a      	adds	r2, r3, #1
 80008d8:	60ba      	str	r2, [r7, #8]
 80008da:	b2ca      	uxtb	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf0      	blt.n	80008ce <_read+0x12>
  }

  return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091e:	605a      	str	r2, [r3, #4]
  return 0;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_isatty>:

int _isatty(int file)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
	...

08000960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_sbrk+0x5c>)
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <_sbrk+0x60>)
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d102      	bne.n	8000982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <_sbrk+0x64>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <_sbrk+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <_sbrk+0x64>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	429a      	cmp	r2, r3
 800098e:	d207      	bcs.n	80009a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000990:	f001 f9ee 	bl	8001d70 <__errno>
 8000994:	4603      	mov	r3, r0
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	e009      	b.n	80009b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <_sbrk+0x64>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <_sbrk+0x64>)
 80009b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b2:	68fb      	ldr	r3, [r7, #12]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20018000 	.word	0x20018000
 80009c0:	00000400 	.word	0x00000400
 80009c4:	20000118 	.word	0x20000118
 80009c8:	20000130 	.word	0x20000130

080009cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009f6:	490e      	ldr	r1, [pc, #56]	; (8000a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a0c:	4c0b      	ldr	r4, [pc, #44]	; (8000a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a1a:	f7ff ffd7 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f001 f9ad 	bl	8001d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fe99 	bl	8000758 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a34:	08002dcc 	.word	0x08002dcc
  ldr r2, =_sbss
 8000a38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a3c:	20000130 	.word	0x20000130

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f92b 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe86 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f943 	bl	8000d32 <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f90b 	bl	8000cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	2000011c 	.word	0x2000011c

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2000011c 	.word	0x2000011c

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f7ff ff8e 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff29 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff3e 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff8e 	bl	8000c1c <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5d 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff31 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffa2 	bl	8000c84 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	e159      	b.n	800101c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d68:	2201      	movs	r2, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	f040 8148 	bne.w	8001016 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d005      	beq.n	8000d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d130      	bne.n	8000e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	2203      	movs	r2, #3
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4013      	ands	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	f003 0201 	and.w	r2, r3, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d017      	beq.n	8000e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d123      	bne.n	8000e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	220f      	movs	r2, #15
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	69b9      	ldr	r1, [r7, #24]
 8000e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0203 	and.w	r2, r3, #3
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 80a2 	beq.w	8001016 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a56      	ldr	r2, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b54      	ldr	r3, [pc, #336]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eee:	4a52      	ldr	r2, [pc, #328]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a49      	ldr	r2, [pc, #292]	; (800103c <HAL_GPIO_Init+0x2f0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_GPIO_Init+0x202>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a48      	ldr	r2, [pc, #288]	; (8001040 <HAL_GPIO_Init+0x2f4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d013      	beq.n	8000f4a <HAL_GPIO_Init+0x1fe>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a47      	ldr	r2, [pc, #284]	; (8001044 <HAL_GPIO_Init+0x2f8>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d00d      	beq.n	8000f46 <HAL_GPIO_Init+0x1fa>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a46      	ldr	r2, [pc, #280]	; (8001048 <HAL_GPIO_Init+0x2fc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d007      	beq.n	8000f42 <HAL_GPIO_Init+0x1f6>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a45      	ldr	r2, [pc, #276]	; (800104c <HAL_GPIO_Init+0x300>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_GPIO_Init+0x1f2>
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f3e:	2307      	movs	r3, #7
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe6:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_GPIO_Init+0x304>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001010:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <HAL_GPIO_Init+0x304>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	f67f aea2 	bls.w	8000d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40013c00 	.word	0x40013c00

08001054 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	4013      	ands	r3, r2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa86 	bl	8000584 <HAL_GPIO_EXTI_Callback>
  }
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40013c00 	.word	0x40013c00

08001084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_RCC_GetHCLKFreq+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000000 	.word	0x20000000

0800109c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010a0:	f7ff fff0 	bl	8001084 <HAL_RCC_GetHCLKFreq>
 80010a4:	4602      	mov	r2, r0
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	0a9b      	lsrs	r3, r3, #10
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	4903      	ldr	r1, [pc, #12]	; (80010c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010b2:	5ccb      	ldrb	r3, [r1, r3]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	08002d1c 	.word	0x08002d1c

080010c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80010c8:	f7ff ffdc 	bl	8001084 <HAL_RCC_GetHCLKFreq>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	0b5b      	lsrs	r3, r3, #13
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	4903      	ldr	r1, [pc, #12]	; (80010e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010da:	5ccb      	ldrb	r3, [r1, r3]
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	08002d1c 	.word	0x08002d1c

080010ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e041      	b.n	8001182 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 f839 	bl	800118a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2202      	movs	r2, #2
 800111c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3304      	adds	r3, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f000 f9ca 	bl	80014c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2201      	movs	r2, #1
 800113c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d001      	beq.n	80011b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e044      	b.n	8001242 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2202      	movs	r2, #2
 80011bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f042 0201 	orr.w	r2, r2, #1
 80011ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_TIM_Base_Start_IT+0xb0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d018      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x6c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e2:	d013      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x6c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a1a      	ldr	r2, [pc, #104]	; (8001254 <HAL_TIM_Base_Start_IT+0xb4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00e      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x6c>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_TIM_Base_Start_IT+0xb8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d009      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x6c>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_TIM_Base_Start_IT+0xbc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d004      	beq.n	800120c <HAL_TIM_Base_Start_IT+0x6c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_TIM_Base_Start_IT+0xc0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d111      	bne.n	8001230 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b06      	cmp	r3, #6
 800121c:	d010      	beq.n	8001240 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800122e:	e007      	b.n	8001240 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000
 8001254:	40000400 	.word	0x40000400
 8001258:	40000800 	.word	0x40000800
 800125c:	40000c00 	.word	0x40000c00
 8001260:	40014000 	.word	0x40014000

08001264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b02      	cmp	r3, #2
 8001278:	d122      	bne.n	80012c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d11b      	bne.n	80012c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f06f 0202 	mvn.w	r2, #2
 8001290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f8ee 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 80012ac:	e005      	b.n	80012ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f8e0 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 f8f1 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d122      	bne.n	8001314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d11b      	bne.n	8001314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f06f 0204 	mvn.w	r2, #4
 80012e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2202      	movs	r2, #2
 80012ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 f8c4 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 8001300:	e005      	b.n	800130e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8b6 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f8c7 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b08      	cmp	r3, #8
 8001320:	d122      	bne.n	8001368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	2b08      	cmp	r3, #8
 800132e:	d11b      	bne.n	8001368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f06f 0208 	mvn.w	r2, #8
 8001338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2204      	movs	r2, #4
 800133e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f89a 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 8001354:	e005      	b.n	8001362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f88c 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f89d 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b10      	cmp	r3, #16
 8001374:	d122      	bne.n	80013bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b10      	cmp	r3, #16
 8001382:	d11b      	bne.n	80013bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f06f 0210 	mvn.w	r2, #16
 800138c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2208      	movs	r2, #8
 8001392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f870 	bl	8001488 <HAL_TIM_IC_CaptureCallback>
 80013a8:	e005      	b.n	80013b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f862 	bl	8001474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f873 	bl	800149c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d10e      	bne.n	80013e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d107      	bne.n	80013e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f06f 0201 	mvn.w	r2, #1
 80013e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff f9c2 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f2:	2b80      	cmp	r3, #128	; 0x80
 80013f4:	d10e      	bne.n	8001414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001400:	2b80      	cmp	r3, #128	; 0x80
 8001402:	d107      	bne.n	8001414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800140c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f8e2 	bl	80015d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800141e:	2b40      	cmp	r3, #64	; 0x40
 8001420:	d10e      	bne.n	8001440 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142c:	2b40      	cmp	r3, #64	; 0x40
 800142e:	d107      	bne.n	8001440 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f838 	bl	80014b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b20      	cmp	r3, #32
 800144c:	d10e      	bne.n	800146c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0320 	and.w	r3, r3, #32
 8001458:	2b20      	cmp	r3, #32
 800145a:	d107      	bne.n	800146c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0220 	mvn.w	r2, #32
 8001464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8ac 	bl	80015c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <TIM_Base_SetConfig+0xe4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d00f      	beq.n	80014fc <TIM_Base_SetConfig+0x38>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e2:	d00b      	beq.n	80014fc <TIM_Base_SetConfig+0x38>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <TIM_Base_SetConfig+0xe8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <TIM_Base_SetConfig+0x38>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <TIM_Base_SetConfig+0xec>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d003      	beq.n	80014fc <TIM_Base_SetConfig+0x38>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <TIM_Base_SetConfig+0xf0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d108      	bne.n	800150e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <TIM_Base_SetConfig+0xe4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01b      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151c:	d017      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <TIM_Base_SetConfig+0xe8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <TIM_Base_SetConfig+0xec>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00f      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <TIM_Base_SetConfig+0xf0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00b      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <TIM_Base_SetConfig+0xf4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <TIM_Base_SetConfig+0xf8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d003      	beq.n	800154e <TIM_Base_SetConfig+0x8a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <TIM_Base_SetConfig+0xfc>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d108      	bne.n	8001560 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <TIM_Base_SetConfig+0xe4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d103      	bne.n	8001594 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	615a      	str	r2, [r3, #20]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40000800 	.word	0x40000800
 80015b4:	40000c00 	.word	0x40000c00
 80015b8:	40014000 	.word	0x40014000
 80015bc:	40014400 	.word	0x40014400
 80015c0:	40014800 	.word	0x40014800

080015c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e03f      	b.n	800167e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff f8e0 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68da      	ldr	r2, [r3, #12]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800162e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f929 	bl	8001888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	695a      	ldr	r2, [r3, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b08a      	sub	sp, #40	; 0x28
 800168a:	af02      	add	r7, sp, #8
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	4613      	mov	r3, r2
 8001694:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d17c      	bne.n	80017a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_UART_Transmit+0x2c>
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e075      	b.n	80017a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_UART_Transmit+0x3e>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e06e      	b.n	80017a2 <HAL_UART_Transmit+0x11c>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2221      	movs	r2, #33	; 0x21
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016da:	f7ff fa19 	bl	8000b10 <HAL_GetTick>
 80016de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	88fa      	ldrh	r2, [r7, #6]
 80016e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	88fa      	ldrh	r2, [r7, #6]
 80016ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f4:	d108      	bne.n	8001708 <HAL_UART_Transmit+0x82>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d104      	bne.n	8001708 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	e003      	b.n	8001710 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001718:	e02a      	b.n	8001770 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2200      	movs	r2, #0
 8001722:	2180      	movs	r1, #128	; 0x80
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f840 	bl	80017aa <UART_WaitOnFlagUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e036      	b.n	80017a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10b      	bne.n	8001752 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001748:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	3302      	adds	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	e007      	b.n	8001762 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	3301      	adds	r3, #1
 8001760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001774:	b29b      	uxth	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1cf      	bne.n	800171a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2200      	movs	r2, #0
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f810 	bl	80017aa <UART_WaitOnFlagUntilTimeout>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e006      	b.n	80017a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2220      	movs	r2, #32
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	e000      	b.n	80017a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017a0:	2302      	movs	r3, #2
  }
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3720      	adds	r7, #32
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b090      	sub	sp, #64	; 0x40
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4613      	mov	r3, r2
 80017b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017ba:	e050      	b.n	800185e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c2:	d04c      	beq.n	800185e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <UART_WaitOnFlagUntilTimeout+0x30>
 80017ca:	f7ff f9a1 	bl	8000b10 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d241      	bcs.n	800185e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	330c      	adds	r3, #12
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	e853 3f00 	ldrex	r3, [r3]
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	330c      	adds	r3, #12
 80017f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017fa:	637a      	str	r2, [r7, #52]	; 0x34
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001802:	e841 2300 	strex	r3, r2, [r1]
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1e5      	bne.n	80017da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3314      	adds	r3, #20
 8001814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	e853 3f00 	ldrex	r3, [r3]
 800181c:	613b      	str	r3, [r7, #16]
   return(result);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	63bb      	str	r3, [r7, #56]	; 0x38
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3314      	adds	r3, #20
 800182c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800182e:	623a      	str	r2, [r7, #32]
 8001830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001832:	69f9      	ldr	r1, [r7, #28]
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	e841 2300 	strex	r3, r2, [r1]
 800183a:	61bb      	str	r3, [r7, #24]
   return(result);
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1e5      	bne.n	800180e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e00f      	b.n	800187e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4013      	ands	r3, r2
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	429a      	cmp	r2, r3
 800186c:	bf0c      	ite	eq
 800186e:	2301      	moveq	r3, #1
 8001870:	2300      	movne	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	429a      	cmp	r2, r3
 800187a:	d09f      	beq.n	80017bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3740      	adds	r7, #64	; 0x40
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800188c:	b0c0      	sub	sp, #256	; 0x100
 800188e:	af00      	add	r7, sp, #0
 8001890:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80018a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018a4:	68d9      	ldr	r1, [r3, #12]
 80018a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	ea40 0301 	orr.w	r3, r0, r1
 80018b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80018b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	431a      	orrs	r2, r3
 80018c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80018d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80018e0:	f021 010c 	bic.w	r1, r1, #12
 80018e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80018ee:	430b      	orrs	r3, r1
 80018f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80018fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001902:	6999      	ldr	r1, [r3, #24]
 8001904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	ea40 0301 	orr.w	r3, r0, r1
 800190e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b8f      	ldr	r3, [pc, #572]	; (8001b54 <UART_SetConfig+0x2cc>)
 8001918:	429a      	cmp	r2, r3
 800191a:	d005      	beq.n	8001928 <UART_SetConfig+0xa0>
 800191c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b8d      	ldr	r3, [pc, #564]	; (8001b58 <UART_SetConfig+0x2d0>)
 8001924:	429a      	cmp	r2, r3
 8001926:	d104      	bne.n	8001932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001928:	f7ff fbcc 	bl	80010c4 <HAL_RCC_GetPCLK2Freq>
 800192c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001930:	e003      	b.n	800193a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001932:	f7ff fbb3 	bl	800109c <HAL_RCC_GetPCLK1Freq>
 8001936:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800193a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001944:	f040 810c 	bne.w	8001b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800194c:	2200      	movs	r2, #0
 800194e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001952:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800195a:	4622      	mov	r2, r4
 800195c:	462b      	mov	r3, r5
 800195e:	1891      	adds	r1, r2, r2
 8001960:	65b9      	str	r1, [r7, #88]	; 0x58
 8001962:	415b      	adcs	r3, r3
 8001964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800196a:	4621      	mov	r1, r4
 800196c:	eb12 0801 	adds.w	r8, r2, r1
 8001970:	4629      	mov	r1, r5
 8001972:	eb43 0901 	adc.w	r9, r3, r1
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800198a:	4690      	mov	r8, r2
 800198c:	4699      	mov	r9, r3
 800198e:	4623      	mov	r3, r4
 8001990:	eb18 0303 	adds.w	r3, r8, r3
 8001994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001998:	462b      	mov	r3, r5
 800199a:	eb49 0303 	adc.w	r3, r9, r3
 800199e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80019a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80019ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80019b6:	460b      	mov	r3, r1
 80019b8:	18db      	adds	r3, r3, r3
 80019ba:	653b      	str	r3, [r7, #80]	; 0x50
 80019bc:	4613      	mov	r3, r2
 80019be:	eb42 0303 	adc.w	r3, r2, r3
 80019c2:	657b      	str	r3, [r7, #84]	; 0x54
 80019c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80019c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80019cc:	f7fe fc58 	bl	8000280 <__aeabi_uldivmod>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <UART_SetConfig+0x2d4>)
 80019d6:	fba3 2302 	umull	r2, r3, r3, r2
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	011c      	lsls	r4, r3, #4
 80019de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80019e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80019f0:	4642      	mov	r2, r8
 80019f2:	464b      	mov	r3, r9
 80019f4:	1891      	adds	r1, r2, r2
 80019f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80019f8:	415b      	adcs	r3, r3
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a00:	4641      	mov	r1, r8
 8001a02:	eb12 0a01 	adds.w	sl, r2, r1
 8001a06:	4649      	mov	r1, r9
 8001a08:	eb43 0b01 	adc.w	fp, r3, r1
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a20:	4692      	mov	sl, r2
 8001a22:	469b      	mov	fp, r3
 8001a24:	4643      	mov	r3, r8
 8001a26:	eb1a 0303 	adds.w	r3, sl, r3
 8001a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a2e:	464b      	mov	r3, r9
 8001a30:	eb4b 0303 	adc.w	r3, fp, r3
 8001a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	18db      	adds	r3, r3, r3
 8001a50:	643b      	str	r3, [r7, #64]	; 0x40
 8001a52:	4613      	mov	r3, r2
 8001a54:	eb42 0303 	adc.w	r3, r2, r3
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
 8001a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001a62:	f7fe fc0d 	bl	8000280 <__aeabi_uldivmod>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <UART_SetConfig+0x2d4>)
 8001a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2264      	movs	r2, #100	; 0x64
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	1acb      	subs	r3, r1, r3
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001a82:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <UART_SetConfig+0x2d4>)
 8001a84:	fba3 2302 	umull	r2, r3, r3, r2
 8001a88:	095b      	lsrs	r3, r3, #5
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a90:	441c      	add	r4, r3
 8001a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a96:	2200      	movs	r2, #0
 8001a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001aa4:	4642      	mov	r2, r8
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	1891      	adds	r1, r2, r2
 8001aaa:	63b9      	str	r1, [r7, #56]	; 0x38
 8001aac:	415b      	adcs	r3, r3
 8001aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	1851      	adds	r1, r2, r1
 8001ab8:	6339      	str	r1, [r7, #48]	; 0x30
 8001aba:	4649      	mov	r1, r9
 8001abc:	414b      	adcs	r3, r1
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001acc:	4659      	mov	r1, fp
 8001ace:	00cb      	lsls	r3, r1, #3
 8001ad0:	4651      	mov	r1, sl
 8001ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ad6:	4651      	mov	r1, sl
 8001ad8:	00ca      	lsls	r2, r1, #3
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4642      	mov	r2, r8
 8001ae2:	189b      	adds	r3, r3, r2
 8001ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ae8:	464b      	mov	r3, r9
 8001aea:	460a      	mov	r2, r1
 8001aec:	eb42 0303 	adc.w	r3, r2, r3
 8001af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001b08:	460b      	mov	r3, r1
 8001b0a:	18db      	adds	r3, r3, r3
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b0e:	4613      	mov	r3, r2
 8001b10:	eb42 0303 	adc.w	r3, r2, r3
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001b1e:	f7fe fbaf 	bl	8000280 <__aeabi_uldivmod>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <UART_SetConfig+0x2d4>)
 8001b28:	fba3 1302 	umull	r1, r3, r3, r2
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	2164      	movs	r1, #100	; 0x64
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	3332      	adds	r3, #50	; 0x32
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <UART_SetConfig+0x2d4>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	f003 0207 	and.w	r2, r3, #7
 8001b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4422      	add	r2, r4
 8001b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001b50:	e105      	b.n	8001d5e <UART_SetConfig+0x4d6>
 8001b52:	bf00      	nop
 8001b54:	40011000 	.word	0x40011000
 8001b58:	40011400 	.word	0x40011400
 8001b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b64:	2200      	movs	r2, #0
 8001b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001b72:	4642      	mov	r2, r8
 8001b74:	464b      	mov	r3, r9
 8001b76:	1891      	adds	r1, r2, r2
 8001b78:	6239      	str	r1, [r7, #32]
 8001b7a:	415b      	adcs	r3, r3
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b82:	4641      	mov	r1, r8
 8001b84:	1854      	adds	r4, r2, r1
 8001b86:	4649      	mov	r1, r9
 8001b88:	eb43 0501 	adc.w	r5, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	00eb      	lsls	r3, r5, #3
 8001b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9a:	00e2      	lsls	r2, r4, #3
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	18e3      	adds	r3, r4, r3
 8001ba4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ba8:	464b      	mov	r3, r9
 8001baa:	eb45 0303 	adc.w	r3, r5, r3
 8001bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001bce:	4629      	mov	r1, r5
 8001bd0:	008b      	lsls	r3, r1, #2
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bd8:	4621      	mov	r1, r4
 8001bda:	008a      	lsls	r2, r1, #2
 8001bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001be0:	f7fe fb4e 	bl	8000280 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <UART_SetConfig+0x4e4>)
 8001bea:	fba3 2302 	umull	r2, r3, r3, r2
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	011c      	lsls	r4, r3, #4
 8001bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001c04:	4642      	mov	r2, r8
 8001c06:	464b      	mov	r3, r9
 8001c08:	1891      	adds	r1, r2, r2
 8001c0a:	61b9      	str	r1, [r7, #24]
 8001c0c:	415b      	adcs	r3, r3
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c14:	4641      	mov	r1, r8
 8001c16:	1851      	adds	r1, r2, r1
 8001c18:	6139      	str	r1, [r7, #16]
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	414b      	adcs	r3, r1
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	00cb      	lsls	r3, r1, #3
 8001c30:	4651      	mov	r1, sl
 8001c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c36:	4651      	mov	r1, sl
 8001c38:	00ca      	lsls	r2, r1, #3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	4642      	mov	r2, r8
 8001c42:	189b      	adds	r3, r3, r2
 8001c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c48:	464b      	mov	r3, r9
 8001c4a:	460a      	mov	r2, r1
 8001c4c:	eb42 0303 	adc.w	r3, r2, r3
 8001c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	008b      	lsls	r3, r1, #2
 8001c70:	4641      	mov	r1, r8
 8001c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c76:	4641      	mov	r1, r8
 8001c78:	008a      	lsls	r2, r1, #2
 8001c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001c7e:	f7fe faff 	bl	8000280 <__aeabi_uldivmod>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4b39      	ldr	r3, [pc, #228]	; (8001d6c <UART_SetConfig+0x4e4>)
 8001c88:	fba3 1302 	umull	r1, r3, r3, r2
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	2164      	movs	r1, #100	; 0x64
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	3332      	adds	r3, #50	; 0x32
 8001c9a:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <UART_SetConfig+0x4e4>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	095b      	lsrs	r3, r3, #5
 8001ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca6:	441c      	add	r4, r3
 8001ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cac:	2200      	movs	r2, #0
 8001cae:	673b      	str	r3, [r7, #112]	; 0x70
 8001cb0:	677a      	str	r2, [r7, #116]	; 0x74
 8001cb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001cb6:	4642      	mov	r2, r8
 8001cb8:	464b      	mov	r3, r9
 8001cba:	1891      	adds	r1, r2, r2
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	415b      	adcs	r3, r3
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc6:	4641      	mov	r1, r8
 8001cc8:	1851      	adds	r1, r2, r1
 8001cca:	6039      	str	r1, [r7, #0]
 8001ccc:	4649      	mov	r1, r9
 8001cce:	414b      	adcs	r3, r1
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	f04f 0300 	mov.w	r3, #0
 8001cda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001cde:	4659      	mov	r1, fp
 8001ce0:	00cb      	lsls	r3, r1, #3
 8001ce2:	4651      	mov	r1, sl
 8001ce4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ce8:	4651      	mov	r1, sl
 8001cea:	00ca      	lsls	r2, r1, #3
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4642      	mov	r2, r8
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cf8:	464b      	mov	r3, r9
 8001cfa:	460a      	mov	r2, r1
 8001cfc:	eb42 0303 	adc.w	r3, r2, r3
 8001d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	663b      	str	r3, [r7, #96]	; 0x60
 8001d0c:	667a      	str	r2, [r7, #100]	; 0x64
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	008b      	lsls	r3, r1, #2
 8001d1e:	4641      	mov	r1, r8
 8001d20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d24:	4641      	mov	r1, r8
 8001d26:	008a      	lsls	r2, r1, #2
 8001d28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001d2c:	f7fe faa8 	bl	8000280 <__aeabi_uldivmod>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <UART_SetConfig+0x4e4>)
 8001d36:	fba3 1302 	umull	r1, r3, r3, r2
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	2164      	movs	r1, #100	; 0x64
 8001d3e:	fb01 f303 	mul.w	r3, r1, r3
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	3332      	adds	r3, #50	; 0x32
 8001d48:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <UART_SetConfig+0x4e4>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	f003 020f 	and.w	r2, r3, #15
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4422      	add	r2, r4
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001d64:	46bd      	mov	sp, r7
 8001d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6a:	bf00      	nop
 8001d6c:	51eb851f 	.word	0x51eb851f

08001d70 <__errno>:
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <__errno+0x8>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000000c 	.word	0x2000000c

08001d7c <__libc_init_array>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4d0d      	ldr	r5, [pc, #52]	; (8001db4 <__libc_init_array+0x38>)
 8001d80:	4c0d      	ldr	r4, [pc, #52]	; (8001db8 <__libc_init_array+0x3c>)
 8001d82:	1b64      	subs	r4, r4, r5
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	2600      	movs	r6, #0
 8001d88:	42a6      	cmp	r6, r4
 8001d8a:	d109      	bne.n	8001da0 <__libc_init_array+0x24>
 8001d8c:	4d0b      	ldr	r5, [pc, #44]	; (8001dbc <__libc_init_array+0x40>)
 8001d8e:	4c0c      	ldr	r4, [pc, #48]	; (8001dc0 <__libc_init_array+0x44>)
 8001d90:	f000 ffae 	bl	8002cf0 <_init>
 8001d94:	1b64      	subs	r4, r4, r5
 8001d96:	10a4      	asrs	r4, r4, #2
 8001d98:	2600      	movs	r6, #0
 8001d9a:	42a6      	cmp	r6, r4
 8001d9c:	d105      	bne.n	8001daa <__libc_init_array+0x2e>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da4:	4798      	blx	r3
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7ee      	b.n	8001d88 <__libc_init_array+0xc>
 8001daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dae:	4798      	blx	r3
 8001db0:	3601      	adds	r6, #1
 8001db2:	e7f2      	b.n	8001d9a <__libc_init_array+0x1e>
 8001db4:	08002dc4 	.word	0x08002dc4
 8001db8:	08002dc4 	.word	0x08002dc4
 8001dbc:	08002dc4 	.word	0x08002dc4
 8001dc0:	08002dc8 	.word	0x08002dc8

08001dc4 <memset>:
 8001dc4:	4402      	add	r2, r0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d100      	bne.n	8001dce <memset+0xa>
 8001dcc:	4770      	bx	lr
 8001dce:	f803 1b01 	strb.w	r1, [r3], #1
 8001dd2:	e7f9      	b.n	8001dc8 <memset+0x4>

08001dd4 <iprintf>:
 8001dd4:	b40f      	push	{r0, r1, r2, r3}
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <iprintf+0x2c>)
 8001dd8:	b513      	push	{r0, r1, r4, lr}
 8001dda:	681c      	ldr	r4, [r3, #0]
 8001ddc:	b124      	cbz	r4, 8001de8 <iprintf+0x14>
 8001dde:	69a3      	ldr	r3, [r4, #24]
 8001de0:	b913      	cbnz	r3, 8001de8 <iprintf+0x14>
 8001de2:	4620      	mov	r0, r4
 8001de4:	f000 f866 	bl	8001eb4 <__sinit>
 8001de8:	ab05      	add	r3, sp, #20
 8001dea:	9a04      	ldr	r2, [sp, #16]
 8001dec:	68a1      	ldr	r1, [r4, #8]
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	4620      	mov	r0, r4
 8001df2:	f000 f9bd 	bl	8002170 <_vfiprintf_r>
 8001df6:	b002      	add	sp, #8
 8001df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dfc:	b004      	add	sp, #16
 8001dfe:	4770      	bx	lr
 8001e00:	2000000c 	.word	0x2000000c

08001e04 <std>:
 8001e04:	2300      	movs	r3, #0
 8001e06:	b510      	push	{r4, lr}
 8001e08:	4604      	mov	r4, r0
 8001e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e12:	6083      	str	r3, [r0, #8]
 8001e14:	8181      	strh	r1, [r0, #12]
 8001e16:	6643      	str	r3, [r0, #100]	; 0x64
 8001e18:	81c2      	strh	r2, [r0, #14]
 8001e1a:	6183      	str	r3, [r0, #24]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2208      	movs	r2, #8
 8001e20:	305c      	adds	r0, #92	; 0x5c
 8001e22:	f7ff ffcf 	bl	8001dc4 <memset>
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <std+0x38>)
 8001e28:	6263      	str	r3, [r4, #36]	; 0x24
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <std+0x3c>)
 8001e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <std+0x40>)
 8001e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e32:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <std+0x44>)
 8001e34:	6224      	str	r4, [r4, #32]
 8001e36:	6323      	str	r3, [r4, #48]	; 0x30
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	08002719 	.word	0x08002719
 8001e40:	0800273b 	.word	0x0800273b
 8001e44:	08002773 	.word	0x08002773
 8001e48:	08002797 	.word	0x08002797

08001e4c <_cleanup_r>:
 8001e4c:	4901      	ldr	r1, [pc, #4]	; (8001e54 <_cleanup_r+0x8>)
 8001e4e:	f000 b8af 	b.w	8001fb0 <_fwalk_reent>
 8001e52:	bf00      	nop
 8001e54:	08002a71 	.word	0x08002a71

08001e58 <__sfmoreglue>:
 8001e58:	b570      	push	{r4, r5, r6, lr}
 8001e5a:	2268      	movs	r2, #104	; 0x68
 8001e5c:	1e4d      	subs	r5, r1, #1
 8001e5e:	4355      	muls	r5, r2
 8001e60:	460e      	mov	r6, r1
 8001e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e66:	f000 f8e5 	bl	8002034 <_malloc_r>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	b140      	cbz	r0, 8001e80 <__sfmoreglue+0x28>
 8001e6e:	2100      	movs	r1, #0
 8001e70:	e9c0 1600 	strd	r1, r6, [r0]
 8001e74:	300c      	adds	r0, #12
 8001e76:	60a0      	str	r0, [r4, #8]
 8001e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e7c:	f7ff ffa2 	bl	8001dc4 <memset>
 8001e80:	4620      	mov	r0, r4
 8001e82:	bd70      	pop	{r4, r5, r6, pc}

08001e84 <__sfp_lock_acquire>:
 8001e84:	4801      	ldr	r0, [pc, #4]	; (8001e8c <__sfp_lock_acquire+0x8>)
 8001e86:	f000 b8b3 	b.w	8001ff0 <__retarget_lock_acquire_recursive>
 8001e8a:	bf00      	nop
 8001e8c:	20000121 	.word	0x20000121

08001e90 <__sfp_lock_release>:
 8001e90:	4801      	ldr	r0, [pc, #4]	; (8001e98 <__sfp_lock_release+0x8>)
 8001e92:	f000 b8ae 	b.w	8001ff2 <__retarget_lock_release_recursive>
 8001e96:	bf00      	nop
 8001e98:	20000121 	.word	0x20000121

08001e9c <__sinit_lock_acquire>:
 8001e9c:	4801      	ldr	r0, [pc, #4]	; (8001ea4 <__sinit_lock_acquire+0x8>)
 8001e9e:	f000 b8a7 	b.w	8001ff0 <__retarget_lock_acquire_recursive>
 8001ea2:	bf00      	nop
 8001ea4:	20000122 	.word	0x20000122

08001ea8 <__sinit_lock_release>:
 8001ea8:	4801      	ldr	r0, [pc, #4]	; (8001eb0 <__sinit_lock_release+0x8>)
 8001eaa:	f000 b8a2 	b.w	8001ff2 <__retarget_lock_release_recursive>
 8001eae:	bf00      	nop
 8001eb0:	20000122 	.word	0x20000122

08001eb4 <__sinit>:
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	f7ff fff0 	bl	8001e9c <__sinit_lock_acquire>
 8001ebc:	69a3      	ldr	r3, [r4, #24]
 8001ebe:	b11b      	cbz	r3, 8001ec8 <__sinit+0x14>
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec4:	f7ff bff0 	b.w	8001ea8 <__sinit_lock_release>
 8001ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <__sinit+0x68>)
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <__sinit+0x6c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ed6:	42a3      	cmp	r3, r4
 8001ed8:	bf04      	itt	eq
 8001eda:	2301      	moveq	r3, #1
 8001edc:	61a3      	streq	r3, [r4, #24]
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f000 f820 	bl	8001f24 <__sfp>
 8001ee4:	6060      	str	r0, [r4, #4]
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f000 f81c 	bl	8001f24 <__sfp>
 8001eec:	60a0      	str	r0, [r4, #8]
 8001eee:	4620      	mov	r0, r4
 8001ef0:	f000 f818 	bl	8001f24 <__sfp>
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60e0      	str	r0, [r4, #12]
 8001ef8:	2104      	movs	r1, #4
 8001efa:	6860      	ldr	r0, [r4, #4]
 8001efc:	f7ff ff82 	bl	8001e04 <std>
 8001f00:	68a0      	ldr	r0, [r4, #8]
 8001f02:	2201      	movs	r2, #1
 8001f04:	2109      	movs	r1, #9
 8001f06:	f7ff ff7d 	bl	8001e04 <std>
 8001f0a:	68e0      	ldr	r0, [r4, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	2112      	movs	r1, #18
 8001f10:	f7ff ff78 	bl	8001e04 <std>
 8001f14:	2301      	movs	r3, #1
 8001f16:	61a3      	str	r3, [r4, #24]
 8001f18:	e7d2      	b.n	8001ec0 <__sinit+0xc>
 8001f1a:	bf00      	nop
 8001f1c:	08002d24 	.word	0x08002d24
 8001f20:	08001e4d 	.word	0x08001e4d

08001f24 <__sfp>:
 8001f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f26:	4607      	mov	r7, r0
 8001f28:	f7ff ffac 	bl	8001e84 <__sfp_lock_acquire>
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <__sfp+0x84>)
 8001f2e:	681e      	ldr	r6, [r3, #0]
 8001f30:	69b3      	ldr	r3, [r6, #24]
 8001f32:	b913      	cbnz	r3, 8001f3a <__sfp+0x16>
 8001f34:	4630      	mov	r0, r6
 8001f36:	f7ff ffbd 	bl	8001eb4 <__sinit>
 8001f3a:	3648      	adds	r6, #72	; 0x48
 8001f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	d503      	bpl.n	8001f4c <__sfp+0x28>
 8001f44:	6833      	ldr	r3, [r6, #0]
 8001f46:	b30b      	cbz	r3, 8001f8c <__sfp+0x68>
 8001f48:	6836      	ldr	r6, [r6, #0]
 8001f4a:	e7f7      	b.n	8001f3c <__sfp+0x18>
 8001f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f50:	b9d5      	cbnz	r5, 8001f88 <__sfp+0x64>
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <__sfp+0x88>)
 8001f54:	60e3      	str	r3, [r4, #12]
 8001f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8001f5c:	f000 f847 	bl	8001fee <__retarget_lock_init_recursive>
 8001f60:	f7ff ff96 	bl	8001e90 <__sfp_lock_release>
 8001f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f6c:	6025      	str	r5, [r4, #0]
 8001f6e:	61a5      	str	r5, [r4, #24]
 8001f70:	2208      	movs	r2, #8
 8001f72:	4629      	mov	r1, r5
 8001f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f78:	f7ff ff24 	bl	8001dc4 <memset>
 8001f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f84:	4620      	mov	r0, r4
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	3468      	adds	r4, #104	; 0x68
 8001f8a:	e7d9      	b.n	8001f40 <__sfp+0x1c>
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4638      	mov	r0, r7
 8001f90:	f7ff ff62 	bl	8001e58 <__sfmoreglue>
 8001f94:	4604      	mov	r4, r0
 8001f96:	6030      	str	r0, [r6, #0]
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d1d5      	bne.n	8001f48 <__sfp+0x24>
 8001f9c:	f7ff ff78 	bl	8001e90 <__sfp_lock_release>
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	603b      	str	r3, [r7, #0]
 8001fa4:	e7ee      	b.n	8001f84 <__sfp+0x60>
 8001fa6:	bf00      	nop
 8001fa8:	08002d24 	.word	0x08002d24
 8001fac:	ffff0001 	.word	0xffff0001

08001fb0 <_fwalk_reent>:
 8001fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fb4:	4606      	mov	r6, r0
 8001fb6:	4688      	mov	r8, r1
 8001fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fbc:	2700      	movs	r7, #0
 8001fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8001fc6:	d505      	bpl.n	8001fd4 <_fwalk_reent+0x24>
 8001fc8:	6824      	ldr	r4, [r4, #0]
 8001fca:	2c00      	cmp	r4, #0
 8001fcc:	d1f7      	bne.n	8001fbe <_fwalk_reent+0xe>
 8001fce:	4638      	mov	r0, r7
 8001fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fd4:	89ab      	ldrh	r3, [r5, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d907      	bls.n	8001fea <_fwalk_reent+0x3a>
 8001fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	d003      	beq.n	8001fea <_fwalk_reent+0x3a>
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	47c0      	blx	r8
 8001fe8:	4307      	orrs	r7, r0
 8001fea:	3568      	adds	r5, #104	; 0x68
 8001fec:	e7e9      	b.n	8001fc2 <_fwalk_reent+0x12>

08001fee <__retarget_lock_init_recursive>:
 8001fee:	4770      	bx	lr

08001ff0 <__retarget_lock_acquire_recursive>:
 8001ff0:	4770      	bx	lr

08001ff2 <__retarget_lock_release_recursive>:
 8001ff2:	4770      	bx	lr

08001ff4 <sbrk_aligned>:
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	4e0e      	ldr	r6, [pc, #56]	; (8002030 <sbrk_aligned+0x3c>)
 8001ff8:	460c      	mov	r4, r1
 8001ffa:	6831      	ldr	r1, [r6, #0]
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	b911      	cbnz	r1, 8002006 <sbrk_aligned+0x12>
 8002000:	f000 fb7a 	bl	80026f8 <_sbrk_r>
 8002004:	6030      	str	r0, [r6, #0]
 8002006:	4621      	mov	r1, r4
 8002008:	4628      	mov	r0, r5
 800200a:	f000 fb75 	bl	80026f8 <_sbrk_r>
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d00a      	beq.n	8002028 <sbrk_aligned+0x34>
 8002012:	1cc4      	adds	r4, r0, #3
 8002014:	f024 0403 	bic.w	r4, r4, #3
 8002018:	42a0      	cmp	r0, r4
 800201a:	d007      	beq.n	800202c <sbrk_aligned+0x38>
 800201c:	1a21      	subs	r1, r4, r0
 800201e:	4628      	mov	r0, r5
 8002020:	f000 fb6a 	bl	80026f8 <_sbrk_r>
 8002024:	3001      	adds	r0, #1
 8002026:	d101      	bne.n	800202c <sbrk_aligned+0x38>
 8002028:	f04f 34ff 	mov.w	r4, #4294967295
 800202c:	4620      	mov	r0, r4
 800202e:	bd70      	pop	{r4, r5, r6, pc}
 8002030:	20000128 	.word	0x20000128

08002034 <_malloc_r>:
 8002034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002038:	1ccd      	adds	r5, r1, #3
 800203a:	f025 0503 	bic.w	r5, r5, #3
 800203e:	3508      	adds	r5, #8
 8002040:	2d0c      	cmp	r5, #12
 8002042:	bf38      	it	cc
 8002044:	250c      	movcc	r5, #12
 8002046:	2d00      	cmp	r5, #0
 8002048:	4607      	mov	r7, r0
 800204a:	db01      	blt.n	8002050 <_malloc_r+0x1c>
 800204c:	42a9      	cmp	r1, r5
 800204e:	d905      	bls.n	800205c <_malloc_r+0x28>
 8002050:	230c      	movs	r3, #12
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	2600      	movs	r6, #0
 8002056:	4630      	mov	r0, r6
 8002058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800205c:	4e2e      	ldr	r6, [pc, #184]	; (8002118 <_malloc_r+0xe4>)
 800205e:	f000 fdbb 	bl	8002bd8 <__malloc_lock>
 8002062:	6833      	ldr	r3, [r6, #0]
 8002064:	461c      	mov	r4, r3
 8002066:	bb34      	cbnz	r4, 80020b6 <_malloc_r+0x82>
 8002068:	4629      	mov	r1, r5
 800206a:	4638      	mov	r0, r7
 800206c:	f7ff ffc2 	bl	8001ff4 <sbrk_aligned>
 8002070:	1c43      	adds	r3, r0, #1
 8002072:	4604      	mov	r4, r0
 8002074:	d14d      	bne.n	8002112 <_malloc_r+0xde>
 8002076:	6834      	ldr	r4, [r6, #0]
 8002078:	4626      	mov	r6, r4
 800207a:	2e00      	cmp	r6, #0
 800207c:	d140      	bne.n	8002100 <_malloc_r+0xcc>
 800207e:	6823      	ldr	r3, [r4, #0]
 8002080:	4631      	mov	r1, r6
 8002082:	4638      	mov	r0, r7
 8002084:	eb04 0803 	add.w	r8, r4, r3
 8002088:	f000 fb36 	bl	80026f8 <_sbrk_r>
 800208c:	4580      	cmp	r8, r0
 800208e:	d13a      	bne.n	8002106 <_malloc_r+0xd2>
 8002090:	6821      	ldr	r1, [r4, #0]
 8002092:	3503      	adds	r5, #3
 8002094:	1a6d      	subs	r5, r5, r1
 8002096:	f025 0503 	bic.w	r5, r5, #3
 800209a:	3508      	adds	r5, #8
 800209c:	2d0c      	cmp	r5, #12
 800209e:	bf38      	it	cc
 80020a0:	250c      	movcc	r5, #12
 80020a2:	4629      	mov	r1, r5
 80020a4:	4638      	mov	r0, r7
 80020a6:	f7ff ffa5 	bl	8001ff4 <sbrk_aligned>
 80020aa:	3001      	adds	r0, #1
 80020ac:	d02b      	beq.n	8002106 <_malloc_r+0xd2>
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	442b      	add	r3, r5
 80020b2:	6023      	str	r3, [r4, #0]
 80020b4:	e00e      	b.n	80020d4 <_malloc_r+0xa0>
 80020b6:	6822      	ldr	r2, [r4, #0]
 80020b8:	1b52      	subs	r2, r2, r5
 80020ba:	d41e      	bmi.n	80020fa <_malloc_r+0xc6>
 80020bc:	2a0b      	cmp	r2, #11
 80020be:	d916      	bls.n	80020ee <_malloc_r+0xba>
 80020c0:	1961      	adds	r1, r4, r5
 80020c2:	42a3      	cmp	r3, r4
 80020c4:	6025      	str	r5, [r4, #0]
 80020c6:	bf18      	it	ne
 80020c8:	6059      	strne	r1, [r3, #4]
 80020ca:	6863      	ldr	r3, [r4, #4]
 80020cc:	bf08      	it	eq
 80020ce:	6031      	streq	r1, [r6, #0]
 80020d0:	5162      	str	r2, [r4, r5]
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	4638      	mov	r0, r7
 80020d6:	f104 060b 	add.w	r6, r4, #11
 80020da:	f000 fd83 	bl	8002be4 <__malloc_unlock>
 80020de:	f026 0607 	bic.w	r6, r6, #7
 80020e2:	1d23      	adds	r3, r4, #4
 80020e4:	1af2      	subs	r2, r6, r3
 80020e6:	d0b6      	beq.n	8002056 <_malloc_r+0x22>
 80020e8:	1b9b      	subs	r3, r3, r6
 80020ea:	50a3      	str	r3, [r4, r2]
 80020ec:	e7b3      	b.n	8002056 <_malloc_r+0x22>
 80020ee:	6862      	ldr	r2, [r4, #4]
 80020f0:	42a3      	cmp	r3, r4
 80020f2:	bf0c      	ite	eq
 80020f4:	6032      	streq	r2, [r6, #0]
 80020f6:	605a      	strne	r2, [r3, #4]
 80020f8:	e7ec      	b.n	80020d4 <_malloc_r+0xa0>
 80020fa:	4623      	mov	r3, r4
 80020fc:	6864      	ldr	r4, [r4, #4]
 80020fe:	e7b2      	b.n	8002066 <_malloc_r+0x32>
 8002100:	4634      	mov	r4, r6
 8002102:	6876      	ldr	r6, [r6, #4]
 8002104:	e7b9      	b.n	800207a <_malloc_r+0x46>
 8002106:	230c      	movs	r3, #12
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4638      	mov	r0, r7
 800210c:	f000 fd6a 	bl	8002be4 <__malloc_unlock>
 8002110:	e7a1      	b.n	8002056 <_malloc_r+0x22>
 8002112:	6025      	str	r5, [r4, #0]
 8002114:	e7de      	b.n	80020d4 <_malloc_r+0xa0>
 8002116:	bf00      	nop
 8002118:	20000124 	.word	0x20000124

0800211c <__sfputc_r>:
 800211c:	6893      	ldr	r3, [r2, #8]
 800211e:	3b01      	subs	r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	b410      	push	{r4}
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	da08      	bge.n	800213a <__sfputc_r+0x1e>
 8002128:	6994      	ldr	r4, [r2, #24]
 800212a:	42a3      	cmp	r3, r4
 800212c:	db01      	blt.n	8002132 <__sfputc_r+0x16>
 800212e:	290a      	cmp	r1, #10
 8002130:	d103      	bne.n	800213a <__sfputc_r+0x1e>
 8002132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002136:	f000 bb33 	b.w	80027a0 <__swbuf_r>
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	1c58      	adds	r0, r3, #1
 800213e:	6010      	str	r0, [r2, #0]
 8002140:	7019      	strb	r1, [r3, #0]
 8002142:	4608      	mov	r0, r1
 8002144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002148:	4770      	bx	lr

0800214a <__sfputs_r>:
 800214a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214c:	4606      	mov	r6, r0
 800214e:	460f      	mov	r7, r1
 8002150:	4614      	mov	r4, r2
 8002152:	18d5      	adds	r5, r2, r3
 8002154:	42ac      	cmp	r4, r5
 8002156:	d101      	bne.n	800215c <__sfputs_r+0x12>
 8002158:	2000      	movs	r0, #0
 800215a:	e007      	b.n	800216c <__sfputs_r+0x22>
 800215c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002160:	463a      	mov	r2, r7
 8002162:	4630      	mov	r0, r6
 8002164:	f7ff ffda 	bl	800211c <__sfputc_r>
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	d1f3      	bne.n	8002154 <__sfputs_r+0xa>
 800216c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002170 <_vfiprintf_r>:
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	460d      	mov	r5, r1
 8002176:	b09d      	sub	sp, #116	; 0x74
 8002178:	4614      	mov	r4, r2
 800217a:	4698      	mov	r8, r3
 800217c:	4606      	mov	r6, r0
 800217e:	b118      	cbz	r0, 8002188 <_vfiprintf_r+0x18>
 8002180:	6983      	ldr	r3, [r0, #24]
 8002182:	b90b      	cbnz	r3, 8002188 <_vfiprintf_r+0x18>
 8002184:	f7ff fe96 	bl	8001eb4 <__sinit>
 8002188:	4b89      	ldr	r3, [pc, #548]	; (80023b0 <_vfiprintf_r+0x240>)
 800218a:	429d      	cmp	r5, r3
 800218c:	d11b      	bne.n	80021c6 <_vfiprintf_r+0x56>
 800218e:	6875      	ldr	r5, [r6, #4]
 8002190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002192:	07d9      	lsls	r1, r3, #31
 8002194:	d405      	bmi.n	80021a2 <_vfiprintf_r+0x32>
 8002196:	89ab      	ldrh	r3, [r5, #12]
 8002198:	059a      	lsls	r2, r3, #22
 800219a:	d402      	bmi.n	80021a2 <_vfiprintf_r+0x32>
 800219c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800219e:	f7ff ff27 	bl	8001ff0 <__retarget_lock_acquire_recursive>
 80021a2:	89ab      	ldrh	r3, [r5, #12]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	d501      	bpl.n	80021ac <_vfiprintf_r+0x3c>
 80021a8:	692b      	ldr	r3, [r5, #16]
 80021aa:	b9eb      	cbnz	r3, 80021e8 <_vfiprintf_r+0x78>
 80021ac:	4629      	mov	r1, r5
 80021ae:	4630      	mov	r0, r6
 80021b0:	f000 fb5a 	bl	8002868 <__swsetup_r>
 80021b4:	b1c0      	cbz	r0, 80021e8 <_vfiprintf_r+0x78>
 80021b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021b8:	07dc      	lsls	r4, r3, #31
 80021ba:	d50e      	bpl.n	80021da <_vfiprintf_r+0x6a>
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	b01d      	add	sp, #116	; 0x74
 80021c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c6:	4b7b      	ldr	r3, [pc, #492]	; (80023b4 <_vfiprintf_r+0x244>)
 80021c8:	429d      	cmp	r5, r3
 80021ca:	d101      	bne.n	80021d0 <_vfiprintf_r+0x60>
 80021cc:	68b5      	ldr	r5, [r6, #8]
 80021ce:	e7df      	b.n	8002190 <_vfiprintf_r+0x20>
 80021d0:	4b79      	ldr	r3, [pc, #484]	; (80023b8 <_vfiprintf_r+0x248>)
 80021d2:	429d      	cmp	r5, r3
 80021d4:	bf08      	it	eq
 80021d6:	68f5      	ldreq	r5, [r6, #12]
 80021d8:	e7da      	b.n	8002190 <_vfiprintf_r+0x20>
 80021da:	89ab      	ldrh	r3, [r5, #12]
 80021dc:	0598      	lsls	r0, r3, #22
 80021de:	d4ed      	bmi.n	80021bc <_vfiprintf_r+0x4c>
 80021e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021e2:	f7ff ff06 	bl	8001ff2 <__retarget_lock_release_recursive>
 80021e6:	e7e9      	b.n	80021bc <_vfiprintf_r+0x4c>
 80021e8:	2300      	movs	r3, #0
 80021ea:	9309      	str	r3, [sp, #36]	; 0x24
 80021ec:	2320      	movs	r3, #32
 80021ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80021f6:	2330      	movs	r3, #48	; 0x30
 80021f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80023bc <_vfiprintf_r+0x24c>
 80021fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002200:	f04f 0901 	mov.w	r9, #1
 8002204:	4623      	mov	r3, r4
 8002206:	469a      	mov	sl, r3
 8002208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800220c:	b10a      	cbz	r2, 8002212 <_vfiprintf_r+0xa2>
 800220e:	2a25      	cmp	r2, #37	; 0x25
 8002210:	d1f9      	bne.n	8002206 <_vfiprintf_r+0x96>
 8002212:	ebba 0b04 	subs.w	fp, sl, r4
 8002216:	d00b      	beq.n	8002230 <_vfiprintf_r+0xc0>
 8002218:	465b      	mov	r3, fp
 800221a:	4622      	mov	r2, r4
 800221c:	4629      	mov	r1, r5
 800221e:	4630      	mov	r0, r6
 8002220:	f7ff ff93 	bl	800214a <__sfputs_r>
 8002224:	3001      	adds	r0, #1
 8002226:	f000 80aa 	beq.w	800237e <_vfiprintf_r+0x20e>
 800222a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800222c:	445a      	add	r2, fp
 800222e:	9209      	str	r2, [sp, #36]	; 0x24
 8002230:	f89a 3000 	ldrb.w	r3, [sl]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a2 	beq.w	800237e <_vfiprintf_r+0x20e>
 800223a:	2300      	movs	r3, #0
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002244:	f10a 0a01 	add.w	sl, sl, #1
 8002248:	9304      	str	r3, [sp, #16]
 800224a:	9307      	str	r3, [sp, #28]
 800224c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002250:	931a      	str	r3, [sp, #104]	; 0x68
 8002252:	4654      	mov	r4, sl
 8002254:	2205      	movs	r2, #5
 8002256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800225a:	4858      	ldr	r0, [pc, #352]	; (80023bc <_vfiprintf_r+0x24c>)
 800225c:	f7fd ffc0 	bl	80001e0 <memchr>
 8002260:	9a04      	ldr	r2, [sp, #16]
 8002262:	b9d8      	cbnz	r0, 800229c <_vfiprintf_r+0x12c>
 8002264:	06d1      	lsls	r1, r2, #27
 8002266:	bf44      	itt	mi
 8002268:	2320      	movmi	r3, #32
 800226a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800226e:	0713      	lsls	r3, r2, #28
 8002270:	bf44      	itt	mi
 8002272:	232b      	movmi	r3, #43	; 0x2b
 8002274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002278:	f89a 3000 	ldrb.w	r3, [sl]
 800227c:	2b2a      	cmp	r3, #42	; 0x2a
 800227e:	d015      	beq.n	80022ac <_vfiprintf_r+0x13c>
 8002280:	9a07      	ldr	r2, [sp, #28]
 8002282:	4654      	mov	r4, sl
 8002284:	2000      	movs	r0, #0
 8002286:	f04f 0c0a 	mov.w	ip, #10
 800228a:	4621      	mov	r1, r4
 800228c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002290:	3b30      	subs	r3, #48	; 0x30
 8002292:	2b09      	cmp	r3, #9
 8002294:	d94e      	bls.n	8002334 <_vfiprintf_r+0x1c4>
 8002296:	b1b0      	cbz	r0, 80022c6 <_vfiprintf_r+0x156>
 8002298:	9207      	str	r2, [sp, #28]
 800229a:	e014      	b.n	80022c6 <_vfiprintf_r+0x156>
 800229c:	eba0 0308 	sub.w	r3, r0, r8
 80022a0:	fa09 f303 	lsl.w	r3, r9, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	9304      	str	r3, [sp, #16]
 80022a8:	46a2      	mov	sl, r4
 80022aa:	e7d2      	b.n	8002252 <_vfiprintf_r+0xe2>
 80022ac:	9b03      	ldr	r3, [sp, #12]
 80022ae:	1d19      	adds	r1, r3, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	9103      	str	r1, [sp, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bfbb      	ittet	lt
 80022b8:	425b      	neglt	r3, r3
 80022ba:	f042 0202 	orrlt.w	r2, r2, #2
 80022be:	9307      	strge	r3, [sp, #28]
 80022c0:	9307      	strlt	r3, [sp, #28]
 80022c2:	bfb8      	it	lt
 80022c4:	9204      	strlt	r2, [sp, #16]
 80022c6:	7823      	ldrb	r3, [r4, #0]
 80022c8:	2b2e      	cmp	r3, #46	; 0x2e
 80022ca:	d10c      	bne.n	80022e6 <_vfiprintf_r+0x176>
 80022cc:	7863      	ldrb	r3, [r4, #1]
 80022ce:	2b2a      	cmp	r3, #42	; 0x2a
 80022d0:	d135      	bne.n	800233e <_vfiprintf_r+0x1ce>
 80022d2:	9b03      	ldr	r3, [sp, #12]
 80022d4:	1d1a      	adds	r2, r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	9203      	str	r2, [sp, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bfb8      	it	lt
 80022de:	f04f 33ff 	movlt.w	r3, #4294967295
 80022e2:	3402      	adds	r4, #2
 80022e4:	9305      	str	r3, [sp, #20]
 80022e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80023cc <_vfiprintf_r+0x25c>
 80022ea:	7821      	ldrb	r1, [r4, #0]
 80022ec:	2203      	movs	r2, #3
 80022ee:	4650      	mov	r0, sl
 80022f0:	f7fd ff76 	bl	80001e0 <memchr>
 80022f4:	b140      	cbz	r0, 8002308 <_vfiprintf_r+0x198>
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	eba0 000a 	sub.w	r0, r0, sl
 80022fc:	fa03 f000 	lsl.w	r0, r3, r0
 8002300:	9b04      	ldr	r3, [sp, #16]
 8002302:	4303      	orrs	r3, r0
 8002304:	3401      	adds	r4, #1
 8002306:	9304      	str	r3, [sp, #16]
 8002308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800230c:	482c      	ldr	r0, [pc, #176]	; (80023c0 <_vfiprintf_r+0x250>)
 800230e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002312:	2206      	movs	r2, #6
 8002314:	f7fd ff64 	bl	80001e0 <memchr>
 8002318:	2800      	cmp	r0, #0
 800231a:	d03f      	beq.n	800239c <_vfiprintf_r+0x22c>
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <_vfiprintf_r+0x254>)
 800231e:	bb1b      	cbnz	r3, 8002368 <_vfiprintf_r+0x1f8>
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	3307      	adds	r3, #7
 8002324:	f023 0307 	bic.w	r3, r3, #7
 8002328:	3308      	adds	r3, #8
 800232a:	9303      	str	r3, [sp, #12]
 800232c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800232e:	443b      	add	r3, r7
 8002330:	9309      	str	r3, [sp, #36]	; 0x24
 8002332:	e767      	b.n	8002204 <_vfiprintf_r+0x94>
 8002334:	fb0c 3202 	mla	r2, ip, r2, r3
 8002338:	460c      	mov	r4, r1
 800233a:	2001      	movs	r0, #1
 800233c:	e7a5      	b.n	800228a <_vfiprintf_r+0x11a>
 800233e:	2300      	movs	r3, #0
 8002340:	3401      	adds	r4, #1
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 0c0a 	mov.w	ip, #10
 800234a:	4620      	mov	r0, r4
 800234c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002350:	3a30      	subs	r2, #48	; 0x30
 8002352:	2a09      	cmp	r2, #9
 8002354:	d903      	bls.n	800235e <_vfiprintf_r+0x1ee>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0c5      	beq.n	80022e6 <_vfiprintf_r+0x176>
 800235a:	9105      	str	r1, [sp, #20]
 800235c:	e7c3      	b.n	80022e6 <_vfiprintf_r+0x176>
 800235e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002362:	4604      	mov	r4, r0
 8002364:	2301      	movs	r3, #1
 8002366:	e7f0      	b.n	800234a <_vfiprintf_r+0x1da>
 8002368:	ab03      	add	r3, sp, #12
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	462a      	mov	r2, r5
 800236e:	4b16      	ldr	r3, [pc, #88]	; (80023c8 <_vfiprintf_r+0x258>)
 8002370:	a904      	add	r1, sp, #16
 8002372:	4630      	mov	r0, r6
 8002374:	f3af 8000 	nop.w
 8002378:	4607      	mov	r7, r0
 800237a:	1c78      	adds	r0, r7, #1
 800237c:	d1d6      	bne.n	800232c <_vfiprintf_r+0x1bc>
 800237e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002380:	07d9      	lsls	r1, r3, #31
 8002382:	d405      	bmi.n	8002390 <_vfiprintf_r+0x220>
 8002384:	89ab      	ldrh	r3, [r5, #12]
 8002386:	059a      	lsls	r2, r3, #22
 8002388:	d402      	bmi.n	8002390 <_vfiprintf_r+0x220>
 800238a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800238c:	f7ff fe31 	bl	8001ff2 <__retarget_lock_release_recursive>
 8002390:	89ab      	ldrh	r3, [r5, #12]
 8002392:	065b      	lsls	r3, r3, #25
 8002394:	f53f af12 	bmi.w	80021bc <_vfiprintf_r+0x4c>
 8002398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800239a:	e711      	b.n	80021c0 <_vfiprintf_r+0x50>
 800239c:	ab03      	add	r3, sp, #12
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	462a      	mov	r2, r5
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <_vfiprintf_r+0x258>)
 80023a4:	a904      	add	r1, sp, #16
 80023a6:	4630      	mov	r0, r6
 80023a8:	f000 f880 	bl	80024ac <_printf_i>
 80023ac:	e7e4      	b.n	8002378 <_vfiprintf_r+0x208>
 80023ae:	bf00      	nop
 80023b0:	08002d48 	.word	0x08002d48
 80023b4:	08002d68 	.word	0x08002d68
 80023b8:	08002d28 	.word	0x08002d28
 80023bc:	08002d88 	.word	0x08002d88
 80023c0:	08002d92 	.word	0x08002d92
 80023c4:	00000000 	.word	0x00000000
 80023c8:	0800214b 	.word	0x0800214b
 80023cc:	08002d8e 	.word	0x08002d8e

080023d0 <_printf_common>:
 80023d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d4:	4616      	mov	r6, r2
 80023d6:	4699      	mov	r9, r3
 80023d8:	688a      	ldr	r2, [r1, #8]
 80023da:	690b      	ldr	r3, [r1, #16]
 80023dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bfb8      	it	lt
 80023e4:	4613      	movlt	r3, r2
 80023e6:	6033      	str	r3, [r6, #0]
 80023e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023ec:	4607      	mov	r7, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	b10a      	cbz	r2, 80023f6 <_printf_common+0x26>
 80023f2:	3301      	adds	r3, #1
 80023f4:	6033      	str	r3, [r6, #0]
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	0699      	lsls	r1, r3, #26
 80023fa:	bf42      	ittt	mi
 80023fc:	6833      	ldrmi	r3, [r6, #0]
 80023fe:	3302      	addmi	r3, #2
 8002400:	6033      	strmi	r3, [r6, #0]
 8002402:	6825      	ldr	r5, [r4, #0]
 8002404:	f015 0506 	ands.w	r5, r5, #6
 8002408:	d106      	bne.n	8002418 <_printf_common+0x48>
 800240a:	f104 0a19 	add.w	sl, r4, #25
 800240e:	68e3      	ldr	r3, [r4, #12]
 8002410:	6832      	ldr	r2, [r6, #0]
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	42ab      	cmp	r3, r5
 8002416:	dc26      	bgt.n	8002466 <_printf_common+0x96>
 8002418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800241c:	1e13      	subs	r3, r2, #0
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	bf18      	it	ne
 8002422:	2301      	movne	r3, #1
 8002424:	0692      	lsls	r2, r2, #26
 8002426:	d42b      	bmi.n	8002480 <_printf_common+0xb0>
 8002428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800242c:	4649      	mov	r1, r9
 800242e:	4638      	mov	r0, r7
 8002430:	47c0      	blx	r8
 8002432:	3001      	adds	r0, #1
 8002434:	d01e      	beq.n	8002474 <_printf_common+0xa4>
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	68e5      	ldr	r5, [r4, #12]
 800243a:	6832      	ldr	r2, [r6, #0]
 800243c:	f003 0306 	and.w	r3, r3, #6
 8002440:	2b04      	cmp	r3, #4
 8002442:	bf08      	it	eq
 8002444:	1aad      	subeq	r5, r5, r2
 8002446:	68a3      	ldr	r3, [r4, #8]
 8002448:	6922      	ldr	r2, [r4, #16]
 800244a:	bf0c      	ite	eq
 800244c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002450:	2500      	movne	r5, #0
 8002452:	4293      	cmp	r3, r2
 8002454:	bfc4      	itt	gt
 8002456:	1a9b      	subgt	r3, r3, r2
 8002458:	18ed      	addgt	r5, r5, r3
 800245a:	2600      	movs	r6, #0
 800245c:	341a      	adds	r4, #26
 800245e:	42b5      	cmp	r5, r6
 8002460:	d11a      	bne.n	8002498 <_printf_common+0xc8>
 8002462:	2000      	movs	r0, #0
 8002464:	e008      	b.n	8002478 <_printf_common+0xa8>
 8002466:	2301      	movs	r3, #1
 8002468:	4652      	mov	r2, sl
 800246a:	4649      	mov	r1, r9
 800246c:	4638      	mov	r0, r7
 800246e:	47c0      	blx	r8
 8002470:	3001      	adds	r0, #1
 8002472:	d103      	bne.n	800247c <_printf_common+0xac>
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247c:	3501      	adds	r5, #1
 800247e:	e7c6      	b.n	800240e <_printf_common+0x3e>
 8002480:	18e1      	adds	r1, r4, r3
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	2030      	movs	r0, #48	; 0x30
 8002486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800248a:	4422      	add	r2, r4
 800248c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002494:	3302      	adds	r3, #2
 8002496:	e7c7      	b.n	8002428 <_printf_common+0x58>
 8002498:	2301      	movs	r3, #1
 800249a:	4622      	mov	r2, r4
 800249c:	4649      	mov	r1, r9
 800249e:	4638      	mov	r0, r7
 80024a0:	47c0      	blx	r8
 80024a2:	3001      	adds	r0, #1
 80024a4:	d0e6      	beq.n	8002474 <_printf_common+0xa4>
 80024a6:	3601      	adds	r6, #1
 80024a8:	e7d9      	b.n	800245e <_printf_common+0x8e>
	...

080024ac <_printf_i>:
 80024ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024b0:	7e0f      	ldrb	r7, [r1, #24]
 80024b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024b4:	2f78      	cmp	r7, #120	; 0x78
 80024b6:	4691      	mov	r9, r2
 80024b8:	4680      	mov	r8, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	469a      	mov	sl, r3
 80024be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024c2:	d807      	bhi.n	80024d4 <_printf_i+0x28>
 80024c4:	2f62      	cmp	r7, #98	; 0x62
 80024c6:	d80a      	bhi.n	80024de <_printf_i+0x32>
 80024c8:	2f00      	cmp	r7, #0
 80024ca:	f000 80d8 	beq.w	800267e <_printf_i+0x1d2>
 80024ce:	2f58      	cmp	r7, #88	; 0x58
 80024d0:	f000 80a3 	beq.w	800261a <_printf_i+0x16e>
 80024d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024dc:	e03a      	b.n	8002554 <_printf_i+0xa8>
 80024de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024e2:	2b15      	cmp	r3, #21
 80024e4:	d8f6      	bhi.n	80024d4 <_printf_i+0x28>
 80024e6:	a101      	add	r1, pc, #4	; (adr r1, 80024ec <_printf_i+0x40>)
 80024e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024ec:	08002545 	.word	0x08002545
 80024f0:	08002559 	.word	0x08002559
 80024f4:	080024d5 	.word	0x080024d5
 80024f8:	080024d5 	.word	0x080024d5
 80024fc:	080024d5 	.word	0x080024d5
 8002500:	080024d5 	.word	0x080024d5
 8002504:	08002559 	.word	0x08002559
 8002508:	080024d5 	.word	0x080024d5
 800250c:	080024d5 	.word	0x080024d5
 8002510:	080024d5 	.word	0x080024d5
 8002514:	080024d5 	.word	0x080024d5
 8002518:	08002665 	.word	0x08002665
 800251c:	08002589 	.word	0x08002589
 8002520:	08002647 	.word	0x08002647
 8002524:	080024d5 	.word	0x080024d5
 8002528:	080024d5 	.word	0x080024d5
 800252c:	08002687 	.word	0x08002687
 8002530:	080024d5 	.word	0x080024d5
 8002534:	08002589 	.word	0x08002589
 8002538:	080024d5 	.word	0x080024d5
 800253c:	080024d5 	.word	0x080024d5
 8002540:	0800264f 	.word	0x0800264f
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	602a      	str	r2, [r5, #0]
 800254c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002554:	2301      	movs	r3, #1
 8002556:	e0a3      	b.n	80026a0 <_printf_i+0x1f4>
 8002558:	6820      	ldr	r0, [r4, #0]
 800255a:	6829      	ldr	r1, [r5, #0]
 800255c:	0606      	lsls	r6, r0, #24
 800255e:	f101 0304 	add.w	r3, r1, #4
 8002562:	d50a      	bpl.n	800257a <_printf_i+0xce>
 8002564:	680e      	ldr	r6, [r1, #0]
 8002566:	602b      	str	r3, [r5, #0]
 8002568:	2e00      	cmp	r6, #0
 800256a:	da03      	bge.n	8002574 <_printf_i+0xc8>
 800256c:	232d      	movs	r3, #45	; 0x2d
 800256e:	4276      	negs	r6, r6
 8002570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002574:	485e      	ldr	r0, [pc, #376]	; (80026f0 <_printf_i+0x244>)
 8002576:	230a      	movs	r3, #10
 8002578:	e019      	b.n	80025ae <_printf_i+0x102>
 800257a:	680e      	ldr	r6, [r1, #0]
 800257c:	602b      	str	r3, [r5, #0]
 800257e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002582:	bf18      	it	ne
 8002584:	b236      	sxthne	r6, r6
 8002586:	e7ef      	b.n	8002568 <_printf_i+0xbc>
 8002588:	682b      	ldr	r3, [r5, #0]
 800258a:	6820      	ldr	r0, [r4, #0]
 800258c:	1d19      	adds	r1, r3, #4
 800258e:	6029      	str	r1, [r5, #0]
 8002590:	0601      	lsls	r1, r0, #24
 8002592:	d501      	bpl.n	8002598 <_printf_i+0xec>
 8002594:	681e      	ldr	r6, [r3, #0]
 8002596:	e002      	b.n	800259e <_printf_i+0xf2>
 8002598:	0646      	lsls	r6, r0, #25
 800259a:	d5fb      	bpl.n	8002594 <_printf_i+0xe8>
 800259c:	881e      	ldrh	r6, [r3, #0]
 800259e:	4854      	ldr	r0, [pc, #336]	; (80026f0 <_printf_i+0x244>)
 80025a0:	2f6f      	cmp	r7, #111	; 0x6f
 80025a2:	bf0c      	ite	eq
 80025a4:	2308      	moveq	r3, #8
 80025a6:	230a      	movne	r3, #10
 80025a8:	2100      	movs	r1, #0
 80025aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025ae:	6865      	ldr	r5, [r4, #4]
 80025b0:	60a5      	str	r5, [r4, #8]
 80025b2:	2d00      	cmp	r5, #0
 80025b4:	bfa2      	ittt	ge
 80025b6:	6821      	ldrge	r1, [r4, #0]
 80025b8:	f021 0104 	bicge.w	r1, r1, #4
 80025bc:	6021      	strge	r1, [r4, #0]
 80025be:	b90e      	cbnz	r6, 80025c4 <_printf_i+0x118>
 80025c0:	2d00      	cmp	r5, #0
 80025c2:	d04d      	beq.n	8002660 <_printf_i+0x1b4>
 80025c4:	4615      	mov	r5, r2
 80025c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80025ca:	fb03 6711 	mls	r7, r3, r1, r6
 80025ce:	5dc7      	ldrb	r7, [r0, r7]
 80025d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025d4:	4637      	mov	r7, r6
 80025d6:	42bb      	cmp	r3, r7
 80025d8:	460e      	mov	r6, r1
 80025da:	d9f4      	bls.n	80025c6 <_printf_i+0x11a>
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d10b      	bne.n	80025f8 <_printf_i+0x14c>
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	07de      	lsls	r6, r3, #31
 80025e4:	d508      	bpl.n	80025f8 <_printf_i+0x14c>
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	6861      	ldr	r1, [r4, #4]
 80025ea:	4299      	cmp	r1, r3
 80025ec:	bfde      	ittt	le
 80025ee:	2330      	movle	r3, #48	; 0x30
 80025f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025f8:	1b52      	subs	r2, r2, r5
 80025fa:	6122      	str	r2, [r4, #16]
 80025fc:	f8cd a000 	str.w	sl, [sp]
 8002600:	464b      	mov	r3, r9
 8002602:	aa03      	add	r2, sp, #12
 8002604:	4621      	mov	r1, r4
 8002606:	4640      	mov	r0, r8
 8002608:	f7ff fee2 	bl	80023d0 <_printf_common>
 800260c:	3001      	adds	r0, #1
 800260e:	d14c      	bne.n	80026aa <_printf_i+0x1fe>
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	b004      	add	sp, #16
 8002616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800261a:	4835      	ldr	r0, [pc, #212]	; (80026f0 <_printf_i+0x244>)
 800261c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002620:	6829      	ldr	r1, [r5, #0]
 8002622:	6823      	ldr	r3, [r4, #0]
 8002624:	f851 6b04 	ldr.w	r6, [r1], #4
 8002628:	6029      	str	r1, [r5, #0]
 800262a:	061d      	lsls	r5, r3, #24
 800262c:	d514      	bpl.n	8002658 <_printf_i+0x1ac>
 800262e:	07df      	lsls	r7, r3, #31
 8002630:	bf44      	itt	mi
 8002632:	f043 0320 	orrmi.w	r3, r3, #32
 8002636:	6023      	strmi	r3, [r4, #0]
 8002638:	b91e      	cbnz	r6, 8002642 <_printf_i+0x196>
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f023 0320 	bic.w	r3, r3, #32
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	2310      	movs	r3, #16
 8002644:	e7b0      	b.n	80025a8 <_printf_i+0xfc>
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	f043 0320 	orr.w	r3, r3, #32
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	2378      	movs	r3, #120	; 0x78
 8002650:	4828      	ldr	r0, [pc, #160]	; (80026f4 <_printf_i+0x248>)
 8002652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002656:	e7e3      	b.n	8002620 <_printf_i+0x174>
 8002658:	0659      	lsls	r1, r3, #25
 800265a:	bf48      	it	mi
 800265c:	b2b6      	uxthmi	r6, r6
 800265e:	e7e6      	b.n	800262e <_printf_i+0x182>
 8002660:	4615      	mov	r5, r2
 8002662:	e7bb      	b.n	80025dc <_printf_i+0x130>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	6826      	ldr	r6, [r4, #0]
 8002668:	6961      	ldr	r1, [r4, #20]
 800266a:	1d18      	adds	r0, r3, #4
 800266c:	6028      	str	r0, [r5, #0]
 800266e:	0635      	lsls	r5, r6, #24
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	d501      	bpl.n	8002678 <_printf_i+0x1cc>
 8002674:	6019      	str	r1, [r3, #0]
 8002676:	e002      	b.n	800267e <_printf_i+0x1d2>
 8002678:	0670      	lsls	r0, r6, #25
 800267a:	d5fb      	bpl.n	8002674 <_printf_i+0x1c8>
 800267c:	8019      	strh	r1, [r3, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	6123      	str	r3, [r4, #16]
 8002682:	4615      	mov	r5, r2
 8002684:	e7ba      	b.n	80025fc <_printf_i+0x150>
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	1d1a      	adds	r2, r3, #4
 800268a:	602a      	str	r2, [r5, #0]
 800268c:	681d      	ldr	r5, [r3, #0]
 800268e:	6862      	ldr	r2, [r4, #4]
 8002690:	2100      	movs	r1, #0
 8002692:	4628      	mov	r0, r5
 8002694:	f7fd fda4 	bl	80001e0 <memchr>
 8002698:	b108      	cbz	r0, 800269e <_printf_i+0x1f2>
 800269a:	1b40      	subs	r0, r0, r5
 800269c:	6060      	str	r0, [r4, #4]
 800269e:	6863      	ldr	r3, [r4, #4]
 80026a0:	6123      	str	r3, [r4, #16]
 80026a2:	2300      	movs	r3, #0
 80026a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026a8:	e7a8      	b.n	80025fc <_printf_i+0x150>
 80026aa:	6923      	ldr	r3, [r4, #16]
 80026ac:	462a      	mov	r2, r5
 80026ae:	4649      	mov	r1, r9
 80026b0:	4640      	mov	r0, r8
 80026b2:	47d0      	blx	sl
 80026b4:	3001      	adds	r0, #1
 80026b6:	d0ab      	beq.n	8002610 <_printf_i+0x164>
 80026b8:	6823      	ldr	r3, [r4, #0]
 80026ba:	079b      	lsls	r3, r3, #30
 80026bc:	d413      	bmi.n	80026e6 <_printf_i+0x23a>
 80026be:	68e0      	ldr	r0, [r4, #12]
 80026c0:	9b03      	ldr	r3, [sp, #12]
 80026c2:	4298      	cmp	r0, r3
 80026c4:	bfb8      	it	lt
 80026c6:	4618      	movlt	r0, r3
 80026c8:	e7a4      	b.n	8002614 <_printf_i+0x168>
 80026ca:	2301      	movs	r3, #1
 80026cc:	4632      	mov	r2, r6
 80026ce:	4649      	mov	r1, r9
 80026d0:	4640      	mov	r0, r8
 80026d2:	47d0      	blx	sl
 80026d4:	3001      	adds	r0, #1
 80026d6:	d09b      	beq.n	8002610 <_printf_i+0x164>
 80026d8:	3501      	adds	r5, #1
 80026da:	68e3      	ldr	r3, [r4, #12]
 80026dc:	9903      	ldr	r1, [sp, #12]
 80026de:	1a5b      	subs	r3, r3, r1
 80026e0:	42ab      	cmp	r3, r5
 80026e2:	dcf2      	bgt.n	80026ca <_printf_i+0x21e>
 80026e4:	e7eb      	b.n	80026be <_printf_i+0x212>
 80026e6:	2500      	movs	r5, #0
 80026e8:	f104 0619 	add.w	r6, r4, #25
 80026ec:	e7f5      	b.n	80026da <_printf_i+0x22e>
 80026ee:	bf00      	nop
 80026f0:	08002d99 	.word	0x08002d99
 80026f4:	08002daa 	.word	0x08002daa

080026f8 <_sbrk_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	4d06      	ldr	r5, [pc, #24]	; (8002714 <_sbrk_r+0x1c>)
 80026fc:	2300      	movs	r3, #0
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	f7fe f92c 	bl	8000960 <_sbrk>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_sbrk_r+0x1a>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_sbrk_r+0x1a>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	2000012c 	.word	0x2000012c

08002718 <__sread>:
 8002718:	b510      	push	{r4, lr}
 800271a:	460c      	mov	r4, r1
 800271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002720:	f000 fab2 	bl	8002c88 <_read_r>
 8002724:	2800      	cmp	r0, #0
 8002726:	bfab      	itete	ge
 8002728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800272a:	89a3      	ldrhlt	r3, [r4, #12]
 800272c:	181b      	addge	r3, r3, r0
 800272e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002732:	bfac      	ite	ge
 8002734:	6563      	strge	r3, [r4, #84]	; 0x54
 8002736:	81a3      	strhlt	r3, [r4, #12]
 8002738:	bd10      	pop	{r4, pc}

0800273a <__swrite>:
 800273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273e:	461f      	mov	r7, r3
 8002740:	898b      	ldrh	r3, [r1, #12]
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	4605      	mov	r5, r0
 8002746:	460c      	mov	r4, r1
 8002748:	4616      	mov	r6, r2
 800274a:	d505      	bpl.n	8002758 <__swrite+0x1e>
 800274c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002750:	2302      	movs	r3, #2
 8002752:	2200      	movs	r2, #0
 8002754:	f000 f9c8 	bl	8002ae8 <_lseek_r>
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800275e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002762:	81a3      	strh	r3, [r4, #12]
 8002764:	4632      	mov	r2, r6
 8002766:	463b      	mov	r3, r7
 8002768:	4628      	mov	r0, r5
 800276a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800276e:	f000 b869 	b.w	8002844 <_write_r>

08002772 <__sseek>:
 8002772:	b510      	push	{r4, lr}
 8002774:	460c      	mov	r4, r1
 8002776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800277a:	f000 f9b5 	bl	8002ae8 <_lseek_r>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	bf15      	itete	ne
 8002784:	6560      	strne	r0, [r4, #84]	; 0x54
 8002786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800278a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800278e:	81a3      	strheq	r3, [r4, #12]
 8002790:	bf18      	it	ne
 8002792:	81a3      	strhne	r3, [r4, #12]
 8002794:	bd10      	pop	{r4, pc}

08002796 <__sclose>:
 8002796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800279a:	f000 b8d3 	b.w	8002944 <_close_r>
	...

080027a0 <__swbuf_r>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	460e      	mov	r6, r1
 80027a4:	4614      	mov	r4, r2
 80027a6:	4605      	mov	r5, r0
 80027a8:	b118      	cbz	r0, 80027b2 <__swbuf_r+0x12>
 80027aa:	6983      	ldr	r3, [r0, #24]
 80027ac:	b90b      	cbnz	r3, 80027b2 <__swbuf_r+0x12>
 80027ae:	f7ff fb81 	bl	8001eb4 <__sinit>
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <__swbuf_r+0x98>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	d12b      	bne.n	8002810 <__swbuf_r+0x70>
 80027b8:	686c      	ldr	r4, [r5, #4]
 80027ba:	69a3      	ldr	r3, [r4, #24]
 80027bc:	60a3      	str	r3, [r4, #8]
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	071a      	lsls	r2, r3, #28
 80027c2:	d52f      	bpl.n	8002824 <__swbuf_r+0x84>
 80027c4:	6923      	ldr	r3, [r4, #16]
 80027c6:	b36b      	cbz	r3, 8002824 <__swbuf_r+0x84>
 80027c8:	6923      	ldr	r3, [r4, #16]
 80027ca:	6820      	ldr	r0, [r4, #0]
 80027cc:	1ac0      	subs	r0, r0, r3
 80027ce:	6963      	ldr	r3, [r4, #20]
 80027d0:	b2f6      	uxtb	r6, r6
 80027d2:	4283      	cmp	r3, r0
 80027d4:	4637      	mov	r7, r6
 80027d6:	dc04      	bgt.n	80027e2 <__swbuf_r+0x42>
 80027d8:	4621      	mov	r1, r4
 80027da:	4628      	mov	r0, r5
 80027dc:	f000 f948 	bl	8002a70 <_fflush_r>
 80027e0:	bb30      	cbnz	r0, 8002830 <__swbuf_r+0x90>
 80027e2:	68a3      	ldr	r3, [r4, #8]
 80027e4:	3b01      	subs	r3, #1
 80027e6:	60a3      	str	r3, [r4, #8]
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	6022      	str	r2, [r4, #0]
 80027ee:	701e      	strb	r6, [r3, #0]
 80027f0:	6963      	ldr	r3, [r4, #20]
 80027f2:	3001      	adds	r0, #1
 80027f4:	4283      	cmp	r3, r0
 80027f6:	d004      	beq.n	8002802 <__swbuf_r+0x62>
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	07db      	lsls	r3, r3, #31
 80027fc:	d506      	bpl.n	800280c <__swbuf_r+0x6c>
 80027fe:	2e0a      	cmp	r6, #10
 8002800:	d104      	bne.n	800280c <__swbuf_r+0x6c>
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f933 	bl	8002a70 <_fflush_r>
 800280a:	b988      	cbnz	r0, 8002830 <__swbuf_r+0x90>
 800280c:	4638      	mov	r0, r7
 800280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <__swbuf_r+0x9c>)
 8002812:	429c      	cmp	r4, r3
 8002814:	d101      	bne.n	800281a <__swbuf_r+0x7a>
 8002816:	68ac      	ldr	r4, [r5, #8]
 8002818:	e7cf      	b.n	80027ba <__swbuf_r+0x1a>
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <__swbuf_r+0xa0>)
 800281c:	429c      	cmp	r4, r3
 800281e:	bf08      	it	eq
 8002820:	68ec      	ldreq	r4, [r5, #12]
 8002822:	e7ca      	b.n	80027ba <__swbuf_r+0x1a>
 8002824:	4621      	mov	r1, r4
 8002826:	4628      	mov	r0, r5
 8002828:	f000 f81e 	bl	8002868 <__swsetup_r>
 800282c:	2800      	cmp	r0, #0
 800282e:	d0cb      	beq.n	80027c8 <__swbuf_r+0x28>
 8002830:	f04f 37ff 	mov.w	r7, #4294967295
 8002834:	e7ea      	b.n	800280c <__swbuf_r+0x6c>
 8002836:	bf00      	nop
 8002838:	08002d48 	.word	0x08002d48
 800283c:	08002d68 	.word	0x08002d68
 8002840:	08002d28 	.word	0x08002d28

08002844 <_write_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4d07      	ldr	r5, [pc, #28]	; (8002864 <_write_r+0x20>)
 8002848:	4604      	mov	r4, r0
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	2200      	movs	r2, #0
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f7fd ff64 	bl	8000720 <_write>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_write_r+0x1e>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b103      	cbz	r3, 8002862 <_write_r+0x1e>
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	2000012c 	.word	0x2000012c

08002868 <__swsetup_r>:
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <__swsetup_r+0xcc>)
 800286a:	b570      	push	{r4, r5, r6, lr}
 800286c:	681d      	ldr	r5, [r3, #0]
 800286e:	4606      	mov	r6, r0
 8002870:	460c      	mov	r4, r1
 8002872:	b125      	cbz	r5, 800287e <__swsetup_r+0x16>
 8002874:	69ab      	ldr	r3, [r5, #24]
 8002876:	b913      	cbnz	r3, 800287e <__swsetup_r+0x16>
 8002878:	4628      	mov	r0, r5
 800287a:	f7ff fb1b 	bl	8001eb4 <__sinit>
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <__swsetup_r+0xd0>)
 8002880:	429c      	cmp	r4, r3
 8002882:	d10f      	bne.n	80028a4 <__swsetup_r+0x3c>
 8002884:	686c      	ldr	r4, [r5, #4]
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800288c:	0719      	lsls	r1, r3, #28
 800288e:	d42c      	bmi.n	80028ea <__swsetup_r+0x82>
 8002890:	06dd      	lsls	r5, r3, #27
 8002892:	d411      	bmi.n	80028b8 <__swsetup_r+0x50>
 8002894:	2309      	movs	r3, #9
 8002896:	6033      	str	r3, [r6, #0]
 8002898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800289c:	81a3      	strh	r3, [r4, #12]
 800289e:	f04f 30ff 	mov.w	r0, #4294967295
 80028a2:	e03e      	b.n	8002922 <__swsetup_r+0xba>
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <__swsetup_r+0xd4>)
 80028a6:	429c      	cmp	r4, r3
 80028a8:	d101      	bne.n	80028ae <__swsetup_r+0x46>
 80028aa:	68ac      	ldr	r4, [r5, #8]
 80028ac:	e7eb      	b.n	8002886 <__swsetup_r+0x1e>
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <__swsetup_r+0xd8>)
 80028b0:	429c      	cmp	r4, r3
 80028b2:	bf08      	it	eq
 80028b4:	68ec      	ldreq	r4, [r5, #12]
 80028b6:	e7e6      	b.n	8002886 <__swsetup_r+0x1e>
 80028b8:	0758      	lsls	r0, r3, #29
 80028ba:	d512      	bpl.n	80028e2 <__swsetup_r+0x7a>
 80028bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028be:	b141      	cbz	r1, 80028d2 <__swsetup_r+0x6a>
 80028c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028c4:	4299      	cmp	r1, r3
 80028c6:	d002      	beq.n	80028ce <__swsetup_r+0x66>
 80028c8:	4630      	mov	r0, r6
 80028ca:	f000 f991 	bl	8002bf0 <_free_r>
 80028ce:	2300      	movs	r3, #0
 80028d0:	6363      	str	r3, [r4, #52]	; 0x34
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	2300      	movs	r3, #0
 80028dc:	6063      	str	r3, [r4, #4]
 80028de:	6923      	ldr	r3, [r4, #16]
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	89a3      	ldrh	r3, [r4, #12]
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	81a3      	strh	r3, [r4, #12]
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	b94b      	cbnz	r3, 8002902 <__swsetup_r+0x9a>
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f8:	d003      	beq.n	8002902 <__swsetup_r+0x9a>
 80028fa:	4621      	mov	r1, r4
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f92b 	bl	8002b58 <__smakebuf_r>
 8002902:	89a0      	ldrh	r0, [r4, #12]
 8002904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002908:	f010 0301 	ands.w	r3, r0, #1
 800290c:	d00a      	beq.n	8002924 <__swsetup_r+0xbc>
 800290e:	2300      	movs	r3, #0
 8002910:	60a3      	str	r3, [r4, #8]
 8002912:	6963      	ldr	r3, [r4, #20]
 8002914:	425b      	negs	r3, r3
 8002916:	61a3      	str	r3, [r4, #24]
 8002918:	6923      	ldr	r3, [r4, #16]
 800291a:	b943      	cbnz	r3, 800292e <__swsetup_r+0xc6>
 800291c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002920:	d1ba      	bne.n	8002898 <__swsetup_r+0x30>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	0781      	lsls	r1, r0, #30
 8002926:	bf58      	it	pl
 8002928:	6963      	ldrpl	r3, [r4, #20]
 800292a:	60a3      	str	r3, [r4, #8]
 800292c:	e7f4      	b.n	8002918 <__swsetup_r+0xb0>
 800292e:	2000      	movs	r0, #0
 8002930:	e7f7      	b.n	8002922 <__swsetup_r+0xba>
 8002932:	bf00      	nop
 8002934:	2000000c 	.word	0x2000000c
 8002938:	08002d48 	.word	0x08002d48
 800293c:	08002d68 	.word	0x08002d68
 8002940:	08002d28 	.word	0x08002d28

08002944 <_close_r>:
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	4d06      	ldr	r5, [pc, #24]	; (8002960 <_close_r+0x1c>)
 8002948:	2300      	movs	r3, #0
 800294a:	4604      	mov	r4, r0
 800294c:	4608      	mov	r0, r1
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	f7fd ffd1 	bl	80008f6 <_close>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d102      	bne.n	800295e <_close_r+0x1a>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	b103      	cbz	r3, 800295e <_close_r+0x1a>
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	bd38      	pop	{r3, r4, r5, pc}
 8002960:	2000012c 	.word	0x2000012c

08002964 <__sflush_r>:
 8002964:	898a      	ldrh	r2, [r1, #12]
 8002966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296a:	4605      	mov	r5, r0
 800296c:	0710      	lsls	r0, r2, #28
 800296e:	460c      	mov	r4, r1
 8002970:	d458      	bmi.n	8002a24 <__sflush_r+0xc0>
 8002972:	684b      	ldr	r3, [r1, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dc05      	bgt.n	8002984 <__sflush_r+0x20>
 8002978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	dc02      	bgt.n	8002984 <__sflush_r+0x20>
 800297e:	2000      	movs	r0, #0
 8002980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002986:	2e00      	cmp	r6, #0
 8002988:	d0f9      	beq.n	800297e <__sflush_r+0x1a>
 800298a:	2300      	movs	r3, #0
 800298c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002990:	682f      	ldr	r7, [r5, #0]
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	d032      	beq.n	80029fc <__sflush_r+0x98>
 8002996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	075a      	lsls	r2, r3, #29
 800299c:	d505      	bpl.n	80029aa <__sflush_r+0x46>
 800299e:	6863      	ldr	r3, [r4, #4]
 80029a0:	1ac0      	subs	r0, r0, r3
 80029a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029a4:	b10b      	cbz	r3, 80029aa <__sflush_r+0x46>
 80029a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029a8:	1ac0      	subs	r0, r0, r3
 80029aa:	2300      	movs	r3, #0
 80029ac:	4602      	mov	r2, r0
 80029ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029b0:	6a21      	ldr	r1, [r4, #32]
 80029b2:	4628      	mov	r0, r5
 80029b4:	47b0      	blx	r6
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	d106      	bne.n	80029ca <__sflush_r+0x66>
 80029bc:	6829      	ldr	r1, [r5, #0]
 80029be:	291d      	cmp	r1, #29
 80029c0:	d82c      	bhi.n	8002a1c <__sflush_r+0xb8>
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <__sflush_r+0x108>)
 80029c4:	40ca      	lsrs	r2, r1
 80029c6:	07d6      	lsls	r6, r2, #31
 80029c8:	d528      	bpl.n	8002a1c <__sflush_r+0xb8>
 80029ca:	2200      	movs	r2, #0
 80029cc:	6062      	str	r2, [r4, #4]
 80029ce:	04d9      	lsls	r1, r3, #19
 80029d0:	6922      	ldr	r2, [r4, #16]
 80029d2:	6022      	str	r2, [r4, #0]
 80029d4:	d504      	bpl.n	80029e0 <__sflush_r+0x7c>
 80029d6:	1c42      	adds	r2, r0, #1
 80029d8:	d101      	bne.n	80029de <__sflush_r+0x7a>
 80029da:	682b      	ldr	r3, [r5, #0]
 80029dc:	b903      	cbnz	r3, 80029e0 <__sflush_r+0x7c>
 80029de:	6560      	str	r0, [r4, #84]	; 0x54
 80029e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029e2:	602f      	str	r7, [r5, #0]
 80029e4:	2900      	cmp	r1, #0
 80029e6:	d0ca      	beq.n	800297e <__sflush_r+0x1a>
 80029e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029ec:	4299      	cmp	r1, r3
 80029ee:	d002      	beq.n	80029f6 <__sflush_r+0x92>
 80029f0:	4628      	mov	r0, r5
 80029f2:	f000 f8fd 	bl	8002bf0 <_free_r>
 80029f6:	2000      	movs	r0, #0
 80029f8:	6360      	str	r0, [r4, #52]	; 0x34
 80029fa:	e7c1      	b.n	8002980 <__sflush_r+0x1c>
 80029fc:	6a21      	ldr	r1, [r4, #32]
 80029fe:	2301      	movs	r3, #1
 8002a00:	4628      	mov	r0, r5
 8002a02:	47b0      	blx	r6
 8002a04:	1c41      	adds	r1, r0, #1
 8002a06:	d1c7      	bne.n	8002998 <__sflush_r+0x34>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0c4      	beq.n	8002998 <__sflush_r+0x34>
 8002a0e:	2b1d      	cmp	r3, #29
 8002a10:	d001      	beq.n	8002a16 <__sflush_r+0xb2>
 8002a12:	2b16      	cmp	r3, #22
 8002a14:	d101      	bne.n	8002a1a <__sflush_r+0xb6>
 8002a16:	602f      	str	r7, [r5, #0]
 8002a18:	e7b1      	b.n	800297e <__sflush_r+0x1a>
 8002a1a:	89a3      	ldrh	r3, [r4, #12]
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	e7ad      	b.n	8002980 <__sflush_r+0x1c>
 8002a24:	690f      	ldr	r7, [r1, #16]
 8002a26:	2f00      	cmp	r7, #0
 8002a28:	d0a9      	beq.n	800297e <__sflush_r+0x1a>
 8002a2a:	0793      	lsls	r3, r2, #30
 8002a2c:	680e      	ldr	r6, [r1, #0]
 8002a2e:	bf08      	it	eq
 8002a30:	694b      	ldreq	r3, [r1, #20]
 8002a32:	600f      	str	r7, [r1, #0]
 8002a34:	bf18      	it	ne
 8002a36:	2300      	movne	r3, #0
 8002a38:	eba6 0807 	sub.w	r8, r6, r7
 8002a3c:	608b      	str	r3, [r1, #8]
 8002a3e:	f1b8 0f00 	cmp.w	r8, #0
 8002a42:	dd9c      	ble.n	800297e <__sflush_r+0x1a>
 8002a44:	6a21      	ldr	r1, [r4, #32]
 8002a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a48:	4643      	mov	r3, r8
 8002a4a:	463a      	mov	r2, r7
 8002a4c:	4628      	mov	r0, r5
 8002a4e:	47b0      	blx	r6
 8002a50:	2800      	cmp	r0, #0
 8002a52:	dc06      	bgt.n	8002a62 <__sflush_r+0xfe>
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5a:	81a3      	strh	r3, [r4, #12]
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	e78e      	b.n	8002980 <__sflush_r+0x1c>
 8002a62:	4407      	add	r7, r0
 8002a64:	eba8 0800 	sub.w	r8, r8, r0
 8002a68:	e7e9      	b.n	8002a3e <__sflush_r+0xda>
 8002a6a:	bf00      	nop
 8002a6c:	20400001 	.word	0x20400001

08002a70 <_fflush_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	690b      	ldr	r3, [r1, #16]
 8002a74:	4605      	mov	r5, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	b913      	cbnz	r3, 8002a80 <_fflush_r+0x10>
 8002a7a:	2500      	movs	r5, #0
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	b118      	cbz	r0, 8002a8a <_fflush_r+0x1a>
 8002a82:	6983      	ldr	r3, [r0, #24]
 8002a84:	b90b      	cbnz	r3, 8002a8a <_fflush_r+0x1a>
 8002a86:	f7ff fa15 	bl	8001eb4 <__sinit>
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <_fflush_r+0x6c>)
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	d11b      	bne.n	8002ac8 <_fflush_r+0x58>
 8002a90:	686c      	ldr	r4, [r5, #4]
 8002a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ef      	beq.n	8002a7a <_fflush_r+0xa>
 8002a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a9c:	07d0      	lsls	r0, r2, #31
 8002a9e:	d404      	bmi.n	8002aaa <_fflush_r+0x3a>
 8002aa0:	0599      	lsls	r1, r3, #22
 8002aa2:	d402      	bmi.n	8002aaa <_fflush_r+0x3a>
 8002aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aa6:	f7ff faa3 	bl	8001ff0 <__retarget_lock_acquire_recursive>
 8002aaa:	4628      	mov	r0, r5
 8002aac:	4621      	mov	r1, r4
 8002aae:	f7ff ff59 	bl	8002964 <__sflush_r>
 8002ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ab4:	07da      	lsls	r2, r3, #31
 8002ab6:	4605      	mov	r5, r0
 8002ab8:	d4e0      	bmi.n	8002a7c <_fflush_r+0xc>
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	059b      	lsls	r3, r3, #22
 8002abe:	d4dd      	bmi.n	8002a7c <_fflush_r+0xc>
 8002ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ac2:	f7ff fa96 	bl	8001ff2 <__retarget_lock_release_recursive>
 8002ac6:	e7d9      	b.n	8002a7c <_fflush_r+0xc>
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <_fflush_r+0x70>)
 8002aca:	429c      	cmp	r4, r3
 8002acc:	d101      	bne.n	8002ad2 <_fflush_r+0x62>
 8002ace:	68ac      	ldr	r4, [r5, #8]
 8002ad0:	e7df      	b.n	8002a92 <_fflush_r+0x22>
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <_fflush_r+0x74>)
 8002ad4:	429c      	cmp	r4, r3
 8002ad6:	bf08      	it	eq
 8002ad8:	68ec      	ldreq	r4, [r5, #12]
 8002ada:	e7da      	b.n	8002a92 <_fflush_r+0x22>
 8002adc:	08002d48 	.word	0x08002d48
 8002ae0:	08002d68 	.word	0x08002d68
 8002ae4:	08002d28 	.word	0x08002d28

08002ae8 <_lseek_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4d07      	ldr	r5, [pc, #28]	; (8002b08 <_lseek_r+0x20>)
 8002aec:	4604      	mov	r4, r0
 8002aee:	4608      	mov	r0, r1
 8002af0:	4611      	mov	r1, r2
 8002af2:	2200      	movs	r2, #0
 8002af4:	602a      	str	r2, [r5, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7fd ff24 	bl	8000944 <_lseek>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_lseek_r+0x1e>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_lseek_r+0x1e>
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	2000012c 	.word	0x2000012c

08002b0c <__swhatbuf_r>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	460e      	mov	r6, r1
 8002b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b14:	2900      	cmp	r1, #0
 8002b16:	b096      	sub	sp, #88	; 0x58
 8002b18:	4614      	mov	r4, r2
 8002b1a:	461d      	mov	r5, r3
 8002b1c:	da08      	bge.n	8002b30 <__swhatbuf_r+0x24>
 8002b1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	602a      	str	r2, [r5, #0]
 8002b26:	061a      	lsls	r2, r3, #24
 8002b28:	d410      	bmi.n	8002b4c <__swhatbuf_r+0x40>
 8002b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2e:	e00e      	b.n	8002b4e <__swhatbuf_r+0x42>
 8002b30:	466a      	mov	r2, sp
 8002b32:	f000 f8bb 	bl	8002cac <_fstat_r>
 8002b36:	2800      	cmp	r0, #0
 8002b38:	dbf1      	blt.n	8002b1e <__swhatbuf_r+0x12>
 8002b3a:	9a01      	ldr	r2, [sp, #4]
 8002b3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b44:	425a      	negs	r2, r3
 8002b46:	415a      	adcs	r2, r3
 8002b48:	602a      	str	r2, [r5, #0]
 8002b4a:	e7ee      	b.n	8002b2a <__swhatbuf_r+0x1e>
 8002b4c:	2340      	movs	r3, #64	; 0x40
 8002b4e:	2000      	movs	r0, #0
 8002b50:	6023      	str	r3, [r4, #0]
 8002b52:	b016      	add	sp, #88	; 0x58
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b58 <__smakebuf_r>:
 8002b58:	898b      	ldrh	r3, [r1, #12]
 8002b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b5c:	079d      	lsls	r5, r3, #30
 8002b5e:	4606      	mov	r6, r0
 8002b60:	460c      	mov	r4, r1
 8002b62:	d507      	bpl.n	8002b74 <__smakebuf_r+0x1c>
 8002b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	6123      	str	r3, [r4, #16]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	6163      	str	r3, [r4, #20]
 8002b70:	b002      	add	sp, #8
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
 8002b74:	ab01      	add	r3, sp, #4
 8002b76:	466a      	mov	r2, sp
 8002b78:	f7ff ffc8 	bl	8002b0c <__swhatbuf_r>
 8002b7c:	9900      	ldr	r1, [sp, #0]
 8002b7e:	4605      	mov	r5, r0
 8002b80:	4630      	mov	r0, r6
 8002b82:	f7ff fa57 	bl	8002034 <_malloc_r>
 8002b86:	b948      	cbnz	r0, 8002b9c <__smakebuf_r+0x44>
 8002b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b8c:	059a      	lsls	r2, r3, #22
 8002b8e:	d4ef      	bmi.n	8002b70 <__smakebuf_r+0x18>
 8002b90:	f023 0303 	bic.w	r3, r3, #3
 8002b94:	f043 0302 	orr.w	r3, r3, #2
 8002b98:	81a3      	strh	r3, [r4, #12]
 8002b9a:	e7e3      	b.n	8002b64 <__smakebuf_r+0xc>
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <__smakebuf_r+0x7c>)
 8002b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	6020      	str	r0, [r4, #0]
 8002ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba8:	81a3      	strh	r3, [r4, #12]
 8002baa:	9b00      	ldr	r3, [sp, #0]
 8002bac:	6163      	str	r3, [r4, #20]
 8002bae:	9b01      	ldr	r3, [sp, #4]
 8002bb0:	6120      	str	r0, [r4, #16]
 8002bb2:	b15b      	cbz	r3, 8002bcc <__smakebuf_r+0x74>
 8002bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bb8:	4630      	mov	r0, r6
 8002bba:	f000 f889 	bl	8002cd0 <_isatty_r>
 8002bbe:	b128      	cbz	r0, 8002bcc <__smakebuf_r+0x74>
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	81a3      	strh	r3, [r4, #12]
 8002bcc:	89a0      	ldrh	r0, [r4, #12]
 8002bce:	4305      	orrs	r5, r0
 8002bd0:	81a5      	strh	r5, [r4, #12]
 8002bd2:	e7cd      	b.n	8002b70 <__smakebuf_r+0x18>
 8002bd4:	08001e4d 	.word	0x08001e4d

08002bd8 <__malloc_lock>:
 8002bd8:	4801      	ldr	r0, [pc, #4]	; (8002be0 <__malloc_lock+0x8>)
 8002bda:	f7ff ba09 	b.w	8001ff0 <__retarget_lock_acquire_recursive>
 8002bde:	bf00      	nop
 8002be0:	20000120 	.word	0x20000120

08002be4 <__malloc_unlock>:
 8002be4:	4801      	ldr	r0, [pc, #4]	; (8002bec <__malloc_unlock+0x8>)
 8002be6:	f7ff ba04 	b.w	8001ff2 <__retarget_lock_release_recursive>
 8002bea:	bf00      	nop
 8002bec:	20000120 	.word	0x20000120

08002bf0 <_free_r>:
 8002bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bf2:	2900      	cmp	r1, #0
 8002bf4:	d044      	beq.n	8002c80 <_free_r+0x90>
 8002bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bfa:	9001      	str	r0, [sp, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8002c02:	bfb8      	it	lt
 8002c04:	18e4      	addlt	r4, r4, r3
 8002c06:	f7ff ffe7 	bl	8002bd8 <__malloc_lock>
 8002c0a:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <_free_r+0x94>)
 8002c0c:	9801      	ldr	r0, [sp, #4]
 8002c0e:	6813      	ldr	r3, [r2, #0]
 8002c10:	b933      	cbnz	r3, 8002c20 <_free_r+0x30>
 8002c12:	6063      	str	r3, [r4, #4]
 8002c14:	6014      	str	r4, [r2, #0]
 8002c16:	b003      	add	sp, #12
 8002c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c1c:	f7ff bfe2 	b.w	8002be4 <__malloc_unlock>
 8002c20:	42a3      	cmp	r3, r4
 8002c22:	d908      	bls.n	8002c36 <_free_r+0x46>
 8002c24:	6825      	ldr	r5, [r4, #0]
 8002c26:	1961      	adds	r1, r4, r5
 8002c28:	428b      	cmp	r3, r1
 8002c2a:	bf01      	itttt	eq
 8002c2c:	6819      	ldreq	r1, [r3, #0]
 8002c2e:	685b      	ldreq	r3, [r3, #4]
 8002c30:	1949      	addeq	r1, r1, r5
 8002c32:	6021      	streq	r1, [r4, #0]
 8002c34:	e7ed      	b.n	8002c12 <_free_r+0x22>
 8002c36:	461a      	mov	r2, r3
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b10b      	cbz	r3, 8002c40 <_free_r+0x50>
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d9fa      	bls.n	8002c36 <_free_r+0x46>
 8002c40:	6811      	ldr	r1, [r2, #0]
 8002c42:	1855      	adds	r5, r2, r1
 8002c44:	42a5      	cmp	r5, r4
 8002c46:	d10b      	bne.n	8002c60 <_free_r+0x70>
 8002c48:	6824      	ldr	r4, [r4, #0]
 8002c4a:	4421      	add	r1, r4
 8002c4c:	1854      	adds	r4, r2, r1
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	d1e0      	bne.n	8002c16 <_free_r+0x26>
 8002c54:	681c      	ldr	r4, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	6053      	str	r3, [r2, #4]
 8002c5a:	4421      	add	r1, r4
 8002c5c:	6011      	str	r1, [r2, #0]
 8002c5e:	e7da      	b.n	8002c16 <_free_r+0x26>
 8002c60:	d902      	bls.n	8002c68 <_free_r+0x78>
 8002c62:	230c      	movs	r3, #12
 8002c64:	6003      	str	r3, [r0, #0]
 8002c66:	e7d6      	b.n	8002c16 <_free_r+0x26>
 8002c68:	6825      	ldr	r5, [r4, #0]
 8002c6a:	1961      	adds	r1, r4, r5
 8002c6c:	428b      	cmp	r3, r1
 8002c6e:	bf04      	itt	eq
 8002c70:	6819      	ldreq	r1, [r3, #0]
 8002c72:	685b      	ldreq	r3, [r3, #4]
 8002c74:	6063      	str	r3, [r4, #4]
 8002c76:	bf04      	itt	eq
 8002c78:	1949      	addeq	r1, r1, r5
 8002c7a:	6021      	streq	r1, [r4, #0]
 8002c7c:	6054      	str	r4, [r2, #4]
 8002c7e:	e7ca      	b.n	8002c16 <_free_r+0x26>
 8002c80:	b003      	add	sp, #12
 8002c82:	bd30      	pop	{r4, r5, pc}
 8002c84:	20000124 	.word	0x20000124

08002c88 <_read_r>:
 8002c88:	b538      	push	{r3, r4, r5, lr}
 8002c8a:	4d07      	ldr	r5, [pc, #28]	; (8002ca8 <_read_r+0x20>)
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	4608      	mov	r0, r1
 8002c90:	4611      	mov	r1, r2
 8002c92:	2200      	movs	r2, #0
 8002c94:	602a      	str	r2, [r5, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	f7fd fe10 	bl	80008bc <_read>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d102      	bne.n	8002ca6 <_read_r+0x1e>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	b103      	cbz	r3, 8002ca6 <_read_r+0x1e>
 8002ca4:	6023      	str	r3, [r4, #0]
 8002ca6:	bd38      	pop	{r3, r4, r5, pc}
 8002ca8:	2000012c 	.word	0x2000012c

08002cac <_fstat_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4d07      	ldr	r5, [pc, #28]	; (8002ccc <_fstat_r+0x20>)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	602b      	str	r3, [r5, #0]
 8002cba:	f7fd fe28 	bl	800090e <_fstat>
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	d102      	bne.n	8002cc8 <_fstat_r+0x1c>
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	b103      	cbz	r3, 8002cc8 <_fstat_r+0x1c>
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000012c 	.word	0x2000012c

08002cd0 <_isatty_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	4d06      	ldr	r5, [pc, #24]	; (8002cec <_isatty_r+0x1c>)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	f7fd fe27 	bl	800092e <_isatty>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_isatty_r+0x1a>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_isatty_r+0x1a>
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	2000012c 	.word	0x2000012c

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
